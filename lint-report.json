[{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\.eslintrc.cjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":25,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\r\n    root: true,\r\n    env: { es2022: true, node: true },\r\n    parser: '@typescript-eslint/parser',\r\n    parserOptions: { ecmaVersion: 'latest', sourceType: 'module', project: undefined },\r\n    plugins: ['@typescript-eslint', 'react', 'react-hooks', 'react-native', 'import'],\r\n    extends: [\r\n        'eslint:recommended',\r\n        'plugin:@typescript-eslint/recommended',\r\n        'plugin:react/recommended',\r\n        'plugin:react-hooks/recommended',\r\n        'plugin:react-native/all'\r\n    ],\r\n    settings: { react: { version: 'detect' } },\r\n    ignorePatterns: ['dist', 'web-build', 'node_modules', '.expo', 'coverage'],\r\n    rules: {\r\n        'react/react-in-jsx-scope': 'off',\r\n        'react/prop-types': 'off',\r\n        '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],\r\n        'import/order': ['warn', { 'newlines-between': 'always', 'alphabetize': { order: 'asc', caseInsensitive: true } }]\r\n    }\r\n};\r\n\r\n// Prevent accidental JSX in .ts test files (should use .tsx)\r\nmodule.exports.overrides = [\r\n    {\r\n        files: ['**/*.test.ts'],\r\n        rules: {\r\n            'react/jsx-uses-react': 'off',\r\n            'react/jsx-uses-vars': 'off',\r\n            // Custom guard: disallow angle bracket patterns suggestive of JSX\r\n            'no-restricted-syntax': [\r\n                'error',\r\n                {\r\n                    selector: \"Program:has(JSXElement)\",\r\n                    message: 'JSX detected in .test.ts file; rename to .test.tsx'\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        files: ['**/*.ts', '**/*.tsx'],\r\n        excludedFiles: [\r\n            'constants/colors.ts',\r\n            'app/**/*.tsx',\r\n            'components/**/*.tsx',\r\n            'src/modules/**/*.tsx'\r\n        ],\r\n        rules: {\r\n            // Block introducing new legacy color keys via direct property access\r\n            'no-restricted-properties': [\r\n                'error',\r\n                {\r\n                    object: 'Colors',\r\n                    property: 'card',\r\n                    message: 'Legacy color key card: migrate to theme.colors.surface or useTheme() before adding new usages.'\r\n                },\r\n                { object: 'Colors', property: 'textLight', message: 'Use theme.colors.textSecondary instead of textLight.' },\r\n                { object: 'Colors', property: 'primaryLight', message: 'Derive a lighter shade or introduce semantic token; avoid primaryLight.' },\r\n                { object: 'Colors', property: 'secondaryLight', message: 'Derive lighter secondary shade; avoid secondaryLight.' },\r\n                { object: 'Colors', property: 'androidRipple', message: 'Use Platform.select ripple logic; avoid androidRipple.' },\r\n                { object: 'Colors', property: 'white', message: 'Use explicit #FFF or a semantic foreground token.' }\r\n            ]\r\n        }\r\n    }\r\n];\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\.expo\\types\\router.d.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'T' is defined but never used.","line":8,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\Dangerfile.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fail' is assigned a value but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":41,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":48}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* Basic Danger rules */\r\nconst { danger, fail, warn, message } = require('danger');\r\n\r\n// PR size\r\nif (danger.github.pr.additions + danger.github.pr.deletions > 1200) {\r\n    warn('Large PR: Consider splitting into smaller, focused changes.');\r\n}\r\n\r\n// Title quality\r\nif (!/(feat|fix|chore|refactor|docs|test|perf|build|ci)/i.test(danger.github.pr.title)) {\r\n    warn('PR title should follow conventional commit style (e.g., feat:, fix:, chore:).');\r\n}\r\n\r\n// Test reminder\r\nconst hasTestChanges = danger.git.modified_files.some(f => f.includes('_tests_') || f.includes('__tests__'))\r\n    || danger.git.created_files.some(f => f.includes('_tests_') || f.includes('__tests__'));\r\nconst touchesSrc = danger.git.modified_files.some(f => f.startsWith('components/') || f.startsWith('hooks/') || f.startsWith('stores/'));\r\nif (touchesSrc && !hasTestChanges) {\r\n    warn('Source changes detected without accompanying tests. Consider adding/adjusting tests.');\r\n}\r\n\r\nmessage('Γ£à Danger checks completed.');\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\accessibility.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\announceAPI.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[301,304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[301,304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2199,2202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2199,2202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Tests for unified announce API (S3-4).\r\n */\r\nimport { announce, announceForAccessibility } from '../utils/accessibility';\r\n\r\n// Mock react-native minimally to force Platform.OS = 'web' so live region path executes.\r\njest.mock('react-native', () => ({\r\n    Platform: { OS: 'web', select: (sel: any) => sel.web },\r\n    AccessibilityInfo: { announceForAccessibility: jest.fn() },\r\n}));\r\n\r\ndescribe('announce API (web live regions)', () => {\r\n    beforeEach(() => {\r\n        // Clear any prior regions\r\n        document.getElementById('__a11y_live_polite')?.remove();\r\n        document.getElementById('__a11y_live_assertive')?.remove();\r\n        jest.useFakeTimers();\r\n        jest.spyOn(console, 'warn').mockImplementation(() => { });\r\n    });\r\n\r\n    afterEach(() => {\r\n        jest.runOnlyPendingTimers();\r\n        jest.useRealTimers();\r\n        (console.warn as jest.Mock).mockRestore?.();\r\n    });\r\n\r\n    it('creates polite live region and injects message', () => {\r\n        announce('Hello world');\r\n        const region = document.getElementById('__a11y_live_polite');\r\n        expect(region).toBeTruthy();\r\n        expect(region!.textContent).toBe('');\r\n        jest.advanceTimersByTime(15);\r\n        expect(region!.textContent).toBe('Hello world');\r\n    });\r\n\r\n    it('dedupes rapid identical messages within window', () => {\r\n        announce('Repeat');\r\n        jest.advanceTimersByTime(15);\r\n        const region = document.getElementById('__a11y_live_polite')!;\r\n        expect(region.textContent).toBe('Repeat');\r\n        announce('Repeat');\r\n        jest.advanceTimersByTime(30);\r\n        expect(region.textContent).toBe('Repeat');\r\n    });\r\n\r\n    it('creates assertive region when politeness=assertive', () => {\r\n        announce('Important', { politeness: 'assertive' });\r\n        const region = document.getElementById('__a11y_live_assertive');\r\n        expect(region).toBeTruthy();\r\n        jest.advanceTimersByTime(15);\r\n        expect(region!.textContent).toBe('Important');\r\n    });\r\n\r\n    it('deprecated announceForAccessibility delegates & warns (assertive)', () => {\r\n        const warnSpy = jest.spyOn(console, 'warn').mockImplementation(() => { });\r\n        (global as any).__DEV__ = true;\r\n        announceForAccessibility('Legacy');\r\n        jest.advanceTimersByTime(15);\r\n        const polite = document.getElementById('__a11y_live_polite');\r\n        const assertive = document.getElementById('__a11y_live_assertive');\r\n        expect(polite || assertive).toBeTruthy();\r\n        expect(warnSpy).toHaveBeenCalled();\r\n        warnSpy.mockRestore();\r\n    });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\basic.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\deepLinking.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\directionStep.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseStep' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render } from '@testing-library/react-native';\r\nimport React from 'react';\n\r\nimport DirectionStep from '@/components/DirectionStep';\r\nimport { TransitStep } from '@/types/navigation';\r\n\r\nconst baseStep: TransitStep = {\r\n  id: 's1',\r\n  type: 'walk',\r\n  from: 'Origin',\r\n  to: 'Destination',\r\n  duration: 5,\r\n};\r\n\r\ndescribe('DirectionStep nullability safeguards', () => {\r\n  it('renders placeholder when step is null', () => {\r\n    const { getByText } = render(<DirectionStep step={null} isLast />);\r\n    expect(getByText('Step unavailable')).toBeTruthy();\r\n    expect(getByText('Data missing')).toBeTruthy();\r\n  });\r\n\r\n  it('renders fallbacks for missing fields', () => {\r\n    // Intentionally omit from/to to simulate bad data shape; cast to TransitStep for test\r\n    const incomplete: Partial<TransitStep> = { id: 's2', type: 'bus', duration: NaN };\r\n    const { getByText } = render(<DirectionStep step={incomplete as TransitStep} isLast />);\r\n    expect(getByText('Bus')).toBeTruthy();\r\n    expect(getByText('Unknown start')).toBeTruthy();\r\n    expect(getByText('Unknown destination')).toBeTruthy();\r\n    expect(getByText('--')).toBeTruthy();\r\n  });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\favoritesList.test.tsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":35,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":39,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2132,2135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2132,2135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":36,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":36,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2701,2704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2701,2704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, waitFor } from '@testing-library/react-native';\r\nimport React from 'react';\n\r\nimport HomeScreen from '@/app/tabs/index';\r\n\r\n// Mock navigation store with favorites\r\njest.mock('@/stores/navigationStore', () => ({\r\n  useNavigationStore: () => ({\r\n    favorites: [\r\n      { id: 'f1', name: 'Fav One', address: 'Addr 1', category: 'park', coordinates: { latitude: 0, longitude: 0 } },\r\n      { id: 'f2', name: 'Fav Two', address: 'Addr 2', category: 'school', coordinates: { latitude: 0, longitude: 0 } },\r\n      { id: 'f3', name: 'Fav Three', address: 'Addr 3', category: 'home', coordinates: { latitude: 0, longitude: 0 } },\r\n    ],\r\n    setDestination: () => {},\r\n    addToRecentSearches: () => {},\r\n    recentSearches: [],\r\n  })\r\n}));\r\n\r\n// Mock other dependent hooks/stores/components to keep test minimal\r\njest.mock('@/hooks/useLocation', () => () => ({ location: { latitude:0, longitude:0 }, hasLocation: true }));\r\njest.mock('@/stores/gamificationStore', () => ({ useGamificationStore: () => ({ userStats: {}, completeTrip: () => {} }) }));\r\njest.mock('@/hooks/useRegionalData', () => ({ useRegionalData: () => ({ formatters: {}, regionalContent: { popularPlaces: [] }, currentRegion: { name: 'Region', coordinates: { latitude:0, longitude:0 } } }) }));\r\njest.mock('@/stores/categoryStore', () => ({ useCategoryStore: () => ({ getApprovedCategories: () => [] }) }));\r\njest.mock('@/modules/safety/components/SafeZoneIndicator', () => ({ SafeZoneIndicator: () => null }));\r\njest.mock('@/components/UserStatsCard', () => () => null);\r\njest.mock('@/components/RegionalFunFactCard', () => () => null);\r\njest.mock('@/components/WeatherCard', () => () => null);\r\njest.mock('@/components/AIJourneyCompanion', () => () => null);\r\njest.mock('@/components/VirtualPetCompanion', () => () => null);\r\njest.mock('@/components/SmartRouteSuggestions', () => () => null);\r\njest.mock('@/modules/safety/components/SafetyPanel', () => () => null);\r\njest.mock('@/components/SearchWithSuggestions', () => () => null);\r\njest.mock('@/components/CategoryButton', () => () => null);\r\njest.mock('@/components/PlaceCard', () => ({ place }: any) => {\r\n  const ReactNative = require('react-native');\r\n  const View = ReactNative.View; const Text = ReactNative.Text;\r\n  return <View testID={`place-card-${place.id}`}><Text>{place.name}</Text></View>;\r\n});\r\n// Mock nav & analytics to avoid side-effects\r\njest.mock('@/shared/navigation/nav', () => ({ nav: { push: () => {}, back: () => {} } }));\r\njest.mock('@/utils/analytics', () => ({ trackScreenView: () => {}, trackUserAction: () => {} }));\r\njest.mock('@/components/EmptyState', () => () => null);\r\njest.mock('@/components/PullToRefresh', () => ({ children }: any) => children);\r\n\r\ndescribe('Favorites list virtualization', () => {\r\n  it('renders favorites via FlatList', async () => {\r\n    const { getByTestId, queryByTestId } = render(<HomeScreen />);\r\n    const list = getByTestId('favorites-list');\r\n    expect(list).toBeTruthy();\r\n    await waitFor(() => {\r\n      expect(queryByTestId('place-card-f2')).toBeTruthy();\r\n    }, { timeout: 10000 });\r\n  });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\performanceMarks.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\persistence.test.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":6,"column":62,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":6,"endColumn":138},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[607,610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[607,610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[894,897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[894,897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { act } from '@testing-library/react-native';\n\r\nimport { useNavigationStore } from '@/stores/navigationStore';\r\n\r\njest.mock('@react-native-async-storage/async-storage', () => require('@react-native-async-storage/async-storage/jest/async-storage-mock'));\r\n\r\nfunction flush(ms = 0) { return new Promise(r => setTimeout(r, ms)); }\r\n\r\ndescribe('navigationStore persistence', () => {\r\n    beforeEach(() => {\r\n        jest.clearAllMocks();\r\n    });\r\n\r\n    it('persists favorites and hydrates them', async () => {\r\n        const place: any = { id: 'favx', name: 'Fav X' };\r\n        await act(async () => {\r\n            useNavigationStore.getState().addToFavorites(place);\r\n            await flush(350);\r\n        });\r\n        expect(AsyncStorage.setItem).toHaveBeenCalled();\r\n        const stored = (AsyncStorage.setItem as any).mock.calls.pop()[1];\r\n        expect(stored).toContain('favx');\r\n\r\n        // simulate reload\r\n        const saved = stored;\r\n        (AsyncStorage.getItem as any).mockResolvedValueOnce(saved);\r\n        await act(async () => { await useNavigationStore.getState().hydrate(); });\r\n        expect(useNavigationStore.getState().favorites.find(f => f.id === 'favx')).toBeTruthy();\r\n    });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\routeCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\routeDetail.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1268,1271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1268,1271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentStep' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1350,1353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1350,1353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1507,1510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1507,1510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'step' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1584,1587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1584,1587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onDismiss' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1660,1663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1660,1663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2024,2027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2024,2027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2162,2165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2162,2165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render } from '@testing-library/react-native';\r\nimport React from 'react';\n\r\nimport RouteDetailScreen from '@/app/route/[id]';\r\n\r\n// Mock expo-router useLocalSearchParams\r\njest.mock('expo-router', () => ({\r\n  useLocalSearchParams: () => ({ id: 'r1' })\r\n}));\r\n\r\n// Mock navigation store\r\njest.mock('@/stores/navigationStore', () => ({\r\n  useNavigationStore: () => ({\r\n    origin: { id: 'o1', name: 'Origin', address: 'Addr', category: 'other', coordinates: { latitude: 0, longitude: 0 } },\r\n    destination: { id: 'd1', name: 'Destination', address: 'Addr', category: 'other', coordinates: { latitude: 1, longitude: 1 } },\r\n    selectedRoute: null,\r\n  })\r\n}));\r\n\r\n// Mock routes query hook to return a consistent list\r\njest.mock('@/hooks/useRoutesQuery', () => ({\r\n  useRoutesQuery: () => ({ data: [ { id: 'r1', totalDuration: 10, departureTime: '10:00', arrivalTime: '10:10', steps: [ { id: 's1', type: 'walk', from: 'Origin', to: 'Destination', duration: 10 } ] } ] })\r\n}));\r\n\r\n// Mock location hook\r\njest.mock('@/hooks/useLocation', () => () => ({ location: { latitude:0, longitude:0, error:null }, hasLocation: true }));\r\n\r\n// Mock child components with simple placeholders to avoid complexity\r\njest.mock('@/components/MapPlaceholder', () => ({ message }: any) => null);\r\njest.mock('@/components/VoiceNavigation', () => ({ currentStep }: any) => null);\r\njest.mock('@/modules/safety/components/SafetyPanel', () => () => null);\r\njest.mock('@/components/FeatureErrorBoundary', () => ({ children }: any) => children);\r\njest.mock('@/components/DirectionStep', () => ({ step }: any) => null);\r\njest.mock('@/components/FunFactCard', () => ({ onDismiss }: any) => null);\r\n\r\ndescribe('RouteDetailScreen', () => {\r\n  it('renders route content when data available', () => {\r\n    const { queryByText } = render(<RouteDetailScreen />);\r\n    expect(queryByText('Route not found')).toBeNull();\r\n  });\r\n\r\n  it('renders fallback when route missing', () => {\r\n  (jest.requireMock('@/stores/navigationStore').useNavigationStore as any) = () => ({ origin: null, destination: null, selectedRoute: null });\r\n  (jest.requireMock('@/hooks/useRoutesQuery').useRoutesQuery as any) = () => ({ data: [] });\r\n    const { getByText } = render(<RouteDetailScreen />);\r\n    expect(getByText('Route not found')).toBeTruthy();\r\n  });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\routeService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[262,265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[262,265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[401,404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[401,404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[523,526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[523,526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { fetchRoutes } from '@/services/routeService';\r\n\r\n// Simple mock types ΓÇô relying on existing type declarations via tsconfig paths\r\nconst origin = { id: 'o1', name: 'Origin', address: '', category: 'other', coordinates: { latitude: 0, longitude: 0 } } as any;\r\nconst destination = { id: 'd1', name: 'Destination', address: '', category: 'other', coordinates: { latitude: 1, longitude: 1 } } as any;\r\nconst baseOptions = { travelMode: 'transit', avoidTolls: false, avoidHighways: false, accessibilityMode: false } as any;\r\n\r\n// Allow shorter test time by mocking setTimeout? We keep default small latency.\r\njest.setTimeout(5000);\r\n\r\ndescribe('routeService.fetchRoutes', () => {\r\n    it('transforms walking routes with increased duration', async () => {\r\n        const routes = await fetchRoutes({ origin, destination, mode: 'walking', options: baseOptions });\r\n        expect(routes.length).toBeGreaterThan(0);\r\n        // Each route id should be prefixed\r\n        routes.forEach(r => {\r\n            expect(r.id.startsWith('walk_')).toBe(true);\r\n            expect(r.steps[0].type).toBe('walk');\r\n        });\r\n    });\r\n\r\n    it('transforms driving routes with decreased duration', async () => {\r\n        const routes = await fetchRoutes({ origin, destination, mode: 'driving', options: baseOptions });\r\n        expect(routes.length).toBeGreaterThan(0);\r\n        routes.forEach(r => {\r\n            expect(r.id.startsWith('drive_')).toBe(true);\r\n            expect(r.steps[0].type).toBe('car');\r\n        });\r\n    });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\routesCacheMetrics.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[411,414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[411,414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[550,553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[550,553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":113,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":116,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[668,671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[668,671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport React from 'react';\r\n\r\nimport { useRoutesQuery } from '@/hooks/useRoutesQuery';\r\nimport * as routeService from '@/services/routeService';\r\n\r\nconst origin = { id: 'o1', name: 'Origin', address: '', category: 'other', coordinates: { latitude: 0, longitude: 0 } } as any;\r\nconst destination = { id: 'd1', name: 'Destination', address: '', category: 'other', coordinates: { latitude: 1, longitude: 1 } } as any;\r\nconst options = { travelMode: 'transit', avoidHighways: false, avoidTolls: false, accessibilityMode: false } as any;\r\n\r\nfunction ComponentOnce() {\r\n  useRoutesQuery(origin, destination, 'transit', options);\r\n  return null;\r\n}\r\n\r\nfunction createClient() {\r\n  return new QueryClient({\r\n    defaultOptions: { queries: { retry: 0, staleTime: 10000 } }\r\n  });\r\n}\r\n\r\ndescribe('Routes cache metrics', () => {\r\n  it('calls fetchRoutes only once; second mount reuses cache', async () => {\r\n    const client = createClient();\r\n    const fetchSpy = jest.spyOn(routeService, 'fetchRoutes');\r\n    const { unmount, rerender } = render(\r\n      <QueryClientProvider client={client}>\r\n        <ComponentOnce />\r\n      </QueryClientProvider>\r\n    );\r\n    await waitFor(() => expect(fetchSpy).toHaveBeenCalledTimes(1), { timeout: 8000 });\r\n    // Ensure promise chain settled\r\n    await new Promise(r => setTimeout(r, 50));\r\n    unmount();\r\n    rerender(\r\n      <QueryClientProvider client={client}>\r\n        <ComponentOnce />\r\n      </QueryClientProvider>\r\n    );\r\n    await new Promise(r => setTimeout(r, 250));\r\n    expect(fetchSpy).toHaveBeenCalledTimes(1);\r\n  }, 15000);\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\routesCaching.test.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"`react` import should occur before import of `@/services/routeService`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":27},{"ruleId":"import/order","severity":1,"message":"`@testing-library/react-native` import should occur before import of `@/services/routeService`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":65},{"ruleId":"import/order","severity":1,"message":"`@tanstack/react-query` import should occur before import of `@/services/routeService`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[672,675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[672,675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[995,998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[995,998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1134,1137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1134,1137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":113,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":116,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1252,1255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1252,1255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Use real implementation but spy on fetchRoutes so we exercise latency + logic\r\nimport * as routeService from '@/services/routeService';\r\nconst fetchSpy = jest.spyOn(routeService, 'fetchRoutes');\r\n\r\nimport React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\r\nimport { useRoutesQuery } from '@/src/hooks/useRoutesQuery';\r\n\r\n// routeService mock defined above (must be before hook import)\r\n\r\n// Silence act warnings from react-query tick batching (already covered by waitFor)\r\nconst originalError = console.error;\r\nbeforeAll(() => {\r\n  console.error = (...args: any[]) => {\r\n    if (typeof args[0] === 'string' && args[0].includes('not wrapped in act')) return;\r\n    originalError(...args);\r\n  };\r\n});\r\nafterAll(() => {\r\n  console.error = originalError;\r\n});\r\n\r\nconst origin = { id: 'o1', name: 'Origin', address: '', category: 'other', coordinates: { latitude: 0, longitude: 0 } } as any;\r\nconst destination = { id: 'd1', name: 'Destination', address: '', category: 'other', coordinates: { latitude: 1, longitude: 1 } } as any;\r\nconst options = { travelMode: 'transit', avoidHighways: false, avoidTolls: false, accessibilityMode: false } as any;\r\n\r\nfunction TestComponent() {\r\n  // Two consecutive hook invocations with identical keys inside same provider tree\r\n  const first = useRoutesQuery(origin, destination, 'transit', options);\r\n  const second = useRoutesQuery(origin, destination, 'transit', options);\r\n  return <>\r\n    <>{first.data?.length}</>\r\n    <>{second.data?.length}</>\r\n  </>;\r\n}\r\n\r\nfunction createClient() {\r\n  return new QueryClient({\r\n    defaultOptions: { queries: { retry: 0, staleTime: 1000 } }\r\n  });\r\n}\r\n\r\ndescribe('Routes query caching', () => {\r\n  it('reuses cached data without refetch for identical keys (and only increments metrics once)', async () => {\r\n    const client = createClient();\r\n    render(<QueryClientProvider client={client}><TestComponent /></QueryClientProvider>);\r\n  // Wait until the data has appeared (query resolved)\r\n  await waitFor(() => expect(fetchSpy).toHaveBeenCalledTimes(1), { timeout: 5000 });\r\n  // Allow a microtask flush to ensure no second fetch queued\r\n  await new Promise(r => setTimeout(r, 50));\r\n  expect(fetchSpy).toHaveBeenCalledTimes(1);\r\n  }, 10000);\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\safety.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\safety.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[218,221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[218,221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[260,263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[260,263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":18,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":18,"endColumn":33},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useState\" is called in function \"default\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":22,"column":29,"nodeType":"MemberExpression","endLine":22,"endColumn":43},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useEffect\" is called in function \"default\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":23,"column":7,"nodeType":"MemberExpression","endLine":23,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, waitFor } from '@testing-library/react-native';\r\nimport React from 'react';\r\nimport { act } from 'react-test-renderer';\r\n\r\n// --- Mocks (must be declared before importing hook) ---\r\nlet mockSafeZones: any[] = [];\r\nlet setLocationState: ((loc: any) => void) | null = null;\r\nlet currentLocation = { latitude: 0, longitude: 0, error: null };\r\n\r\njest.mock('@/modules/safety/stores/parentalStore', () => ({\r\n  useParentalStore: () => ({\r\n    safeZones: mockSafeZones,\r\n    settings: { safeZoneAlerts: true },\r\n  }),\r\n}));\r\n\r\njest.mock('@/hooks/useLocation', () => {\r\n  const React = require('react');\r\n  return {\r\n    __esModule: true,\r\n    default: () => {\r\n      const [loc, setLoc] = React.useState(currentLocation);\r\n      React.useEffect(() => { setLocationState = setLoc; }, []);\r\n      return {\r\n        location: loc,\r\n        hasLocation: !loc.error,\r\n        loading: false,\r\n        safeCoordinates: () => (!loc.error ? { latitude: loc.latitude, longitude: loc.longitude } : undefined),\r\n      };\r\n    },\r\n  };\r\n});\r\n\r\n// Now import the hook after mocks so they take effect\r\n// eslint-disable-next-line import/first\r\nimport { useSafeZoneMonitor } from '@/modules/safety/hooks/useSafeZoneMonitor';\r\n\r\n// Helper to update mock location with re-render\r\nconst updateLocation = (lat: number, lon: number, error: string | null = null) => {\r\n  currentLocation = { latitude: lat, longitude: lon, error } as any;\r\n  act(() => { setLocationState?.(currentLocation); });\r\n};\r\n\r\nconst TestHarness: React.FC<{ onUpdate: (m: ReturnType<typeof useSafeZoneMonitor>) => void }> = ({ onUpdate }) => {\r\n  const monitor = useSafeZoneMonitor();\r\n  // Call on every render to always expose latest object reference\r\n  onUpdate(monitor);\r\n  return null;\r\n};\r\n\r\ndescribe('useSafeZoneMonitor', () => {\r\n  beforeEach(() => {\r\n    mockSafeZones = [];\r\n    updateLocation(0, 0); // reset\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllTimers();\r\n  });\r\n\r\n  let latestMonitor: ReturnType<typeof useSafeZoneMonitor> | null = null;\r\n  const renderMonitor = () => {\r\n    render(<TestHarness onUpdate={(m) => { latestMonitor = m; }} />);\r\n    if (!latestMonitor) throw new Error('Monitor not ready');\r\n    return latestMonitor;\r\n  };\r\n\r\n  it('produces entry event when inside a safe zone on first refresh', () => {\r\n    mockSafeZones = [{\r\n      id: 'z1', name: 'Home', latitude: 0, longitude: 0, radius: 150, isActive: true, createdAt: Date.now(),\r\n      notifications: { onEntry: true, onExit: true },\r\n    }];\r\n    updateLocation(0, 0); // already inside\r\n    renderMonitor();\r\n    act(() => { latestMonitor!.forceRefresh(); });\r\n    const entries = latestMonitor!.events.filter(e => e.type === 'entry' && e.zoneId === 'z1');\r\n    expect(entries.length).toBe(1);\r\n  });\r\n\r\n  it('produces exit event when leaving a safe zone', async () => {\r\n    mockSafeZones = [{\r\n      id: 'z1', name: 'Home', latitude: 0, longitude: 0, radius: 150, isActive: true, createdAt: Date.now(),\r\n      notifications: { onEntry: true, onExit: true },\r\n    }];\r\n    updateLocation(0, 0); // start inside\r\n    renderMonitor();\r\n    act(() => { latestMonitor!.forceRefresh(); });\r\n    await waitFor(() => {\r\n      expect(latestMonitor!.events.filter(e => e.type === 'entry').length).toBe(1);\r\n    });\r\n    updateLocation(0.002, 0.002); // move outside\r\n    act(() => { latestMonitor!.forceRefresh(); });\r\n    await waitFor(() => {\r\n      const exits = latestMonitor!.events.filter(e => e.type === 'exit' && e.zoneId === 'z1');\r\n      expect(exits.length).toBe(1);\r\n    });\r\n  });\r\n\r\n  it('classifies inside vs outside zones correctly', () => {\r\n    mockSafeZones = [\r\n      { id: 'in', name: 'Inner', latitude: 0, longitude: 0, radius: 200, isActive: true, createdAt: Date.now(), notifications: { onEntry: true, onExit: true } },\r\n      { id: 'out', name: 'Outer', latitude: 0.01, longitude: 0.01, radius: 50, isActive: true, createdAt: Date.now(), notifications: { onEntry: true, onExit: true } },\r\n    ];\r\n    updateLocation(0, 0); // inside first only\r\n    const monitor = renderMonitor();\r\n    act(() => { monitor.startMonitoring(); monitor.forceRefresh(); });\r\n    const status = monitor.getCurrentSafeZoneStatus();\r\n    expect(status).not.toBeNull();\r\n    expect(status!.inside.map(z => z.id)).toContain('in');\r\n    expect(status!.inside.map(z => z.id)).not.toContain('out');\r\n    expect(status!.outside.map(z => z.id)).toContain('out');\r\n    expect(status!.totalActive).toBe(2);\r\n  });\r\n\r\n  it('returns outside status when location unavailable', () => {\r\n    mockSafeZones = [{ id: 'z1', name: 'Zone', latitude: 0, longitude: 0, radius: 100, isActive: true, createdAt: Date.now(), notifications: { onEntry: true, onExit: true } }];\r\n    // Simulate location error\r\n    updateLocation(0, 0, 'Permission denied');\r\n    const monitor = renderMonitor();\r\n    act(() => { monitor.startMonitoring(); monitor.forceRefresh(); });\r\n    const status = monitor.getCurrentSafeZoneStatus();\r\n    expect(status).not.toBeNull();\r\n    expect(status!.inside.length).toBe(0);\r\n    expect(status!.outside.length).toBe(1);\r\n  });\r\n\r\n  it('caps event history at 20 entries (entry/exit cycles)', () => {\r\n    mockSafeZones = [{\r\n      id: 'z1', name: 'ZoneCap', latitude: 0, longitude: 0, radius: 120, isActive: true, createdAt: Date.now(),\r\n      notifications: { onEntry: true, onExit: true },\r\n    }];\r\n    updateLocation(0, 0); // inside initially\r\n    renderMonitor();\r\n    // First refresh establishes entry\r\n    act(() => { latestMonitor!.forceRefresh(); });\r\n    // Generate many exit/entry pairs (> 10 pairs => >20 events)\r\n    for (let i = 0; i < 15; i++) {\r\n      // exit\r\n      updateLocation(0.003 + i * 0.0001, 0.003 + i * 0.0001);\r\n      act(() => { latestMonitor!.forceRefresh(); });\r\n      // entry\r\n      updateLocation(0, 0);\r\n      act(() => { latestMonitor!.forceRefresh(); });\r\n    }\r\n    expect(latestMonitor!.events.length).toBe(20);\r\n    // Ensure newest event is the last action (entry) we performed\r\n    const newest = latestMonitor!.events[0];\r\n    expect(newest.type).toBe('entry');\r\n  });\r\n\r\n  it('ignores inactive zones (no events generated)', () => {\r\n    mockSafeZones = [{\r\n      id: 'z_inactive', name: 'Inactive', latitude: 0, longitude: 0, radius: 200, isActive: false, createdAt: Date.now(),\r\n      notifications: { onEntry: true, onExit: true },\r\n    }];\r\n    updateLocation(0, 0); // would be inside if active\r\n    renderMonitor();\r\n    act(() => { latestMonitor!.forceRefresh(); });\r\n    expect(latestMonitor!.events.length).toBe(0);\r\n    const status = latestMonitor!.getCurrentSafeZoneStatus();\r\n    expect(status?.inside.length).toBe(0);\r\n    expect(status?.totalActive).toBe(0);\r\n  });\r\n});\r\n\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\toastAccessibility.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":21,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":21,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, act } from '@testing-library/react-native';\r\nimport React from 'react';\n\r\nimport Toast from '@/components/Toast';\r\nimport { ThemeProvider } from '@/constants/theme';\r\n\r\njest.mock('react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo', () => {\r\n  const actual = jest.requireActual('react-native');\r\n  return {\r\n    ...actual.AccessibilityInfo,\r\n    announceForAccessibility: jest.fn(),\r\n    setAccessibilityFocus: jest.fn(),\r\n  };\r\n});\r\n\r\njest.mock('@/utils/accessibility', () => ({ announce: jest.fn() }));\r\n\r\ndescribe('Toast accessibility', () => {\r\n  it('announces message when visible', () => {\r\n    const { update } = render(<ThemeProvider><Toast message=\"Hello\" type=\"success\" visible={false} onHide={() => {}} /></ThemeProvider>);\r\n    const { announce } = require('@/utils/accessibility');\r\n    expect(announce).not.toHaveBeenCalled();\r\n    act(() => {\r\n      update(<ThemeProvider><Toast message=\"Hello\" type=\"success\" visible={true} onHide={() => {}} /></ThemeProvider>);\r\n    });\r\n    expect(announce).toHaveBeenCalledWith('Success: Hello');\r\n  });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\touchTargetAudit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\_tests_\\voiceNavigation.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":40,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":40,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, fireEvent } from '@testing-library/react-native';\r\nimport React from 'react';\n\r\nimport VoiceNavigation from '@/components/VoiceNavigation';\r\nimport { TransitStep } from '@/types/navigation';\r\n\r\njest.mock('@/utils/accessibility', () => ({ announce: jest.fn() }));\r\njest.mock('@/stores/navigationStore', () => ({\r\n  useNavigationStore: () => ({ accessibilitySettings: { voiceDescriptions: true }})\r\n}));\r\n\r\ndescribe('VoiceNavigation (S3-3)', () => {\r\n  const steps: TransitStep[] = [\r\n    { id: 's1', type: 'walk', from: 'Home', to: 'Corner', duration: 2 },\r\n    { id: 's2', type: 'bus', from: 'Corner', to: 'Station', duration: 5 },\r\n    { id: 's3', type: 'train', from: 'Station', to: 'Downtown', duration: 10 }\r\n  ];\r\n\r\n  it('renders first step instruction and step meta', () => {\r\n    const { getByTestId, getByText } = render(<VoiceNavigation steps={steps} />);\r\n    expect(getByTestId('voice-active-instruction').props.children).toMatch(/Walk from Home to Corner/);\r\n    expect(getByText('Step 1/3')).toBeTruthy();\r\n  });\r\n\r\n  it('navigates to next and previous steps updating instruction', () => {\r\n    const { getByTestId } = render(<VoiceNavigation steps={steps} />);\r\n    const next = getByTestId('voice-next');\r\n    fireEvent.press(next);\r\n    expect(getByTestId('voice-active-instruction').props.children).toMatch(/Take from Corner to Station/);\r\n    fireEvent.press(next);\r\n    expect(getByTestId('voice-active-instruction').props.children).toMatch(/Take from Station to Downtown/);\r\n    const prev = getByTestId('voice-prev');\r\n    fireEvent.press(prev);\r\n    expect(getByTestId('voice-active-instruction').props.children).toMatch(/Take from Corner to Station/);\r\n  });\r\n\r\n  it('re-announces current step when repeat pressed', () => {\r\n    const { getByTestId } = render(<VoiceNavigation steps={steps} />);\r\n    const repeat = getByTestId('voice-repeat');\r\n    const { announce } = require('@/utils/accessibility');\r\n    fireEvent.press(repeat);\r\n    expect(announce).toHaveBeenCalledWith('Walk from Home to Corner', expect.any(Object));\r\n  });\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\+not_found.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":11,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[341,367],"text":"This screen doesn&apos;t exist."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[341,367],"text":"This screen doesn&lsquo;t exist."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[341,367],"text":"This screen doesn&#39;t exist."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[341,367],"text":"This screen doesn&rsquo;t exist."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#2e78b7' }","line":32,"column":13,"nodeType":"ObjectExpression","endLine":35,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, Stack } from \"expo-router\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\r\nimport { nav } from \"@/shared/navigation/nav\";\r\n\r\nexport default function NotFoundScreen() {\r\n  return (\r\n    <>\r\n      <Stack.Screen options={{ title: \"Oops!\" }} />\r\n      <View style={styles.container}>\r\n        <Text style={styles.title}>This screen doesn't exist.</Text>\r\n\r\n  <Link href={nav.href(\"/\")} style={styles.link}>\r\n          <Text style={styles.linkText}>Go to home screen!</Text>\r\n        </Link>\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 20,\r\n  },\r\n  link: {\r\n    marginTop: 15,\r\n    paddingVertical: 15,\r\n  },\r\n  linkText: {\r\n    color: \"#2e78b7\",\r\n    fontSize: 14,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\_layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\index.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#f0f0f0' }","line":23,"column":14,"nodeType":"ObjectExpression","endLine":29,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#424242' }","line":30,"column":9,"nodeType":"ObjectExpression","endLine":35,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#2e7d32' }","line":36,"column":10,"nodeType":"ObjectExpression","endLine":42,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\n\r\nimport ErrorBoundary from '@/components/ErrorBoundary';\r\n\r\nexport default function IndexPage() {\r\n  console.log('Index page is rendering - Platform:', Platform.OS);\r\n  console.log('Current time:', new Date().toISOString());\r\n  \r\n  return (\r\n    <ErrorBoundary>\r\n      <View style={styles.container}>\r\n        <Text style={styles.title}>≡ƒÄë KidMap is Working!</Text>\r\n        <Text style={styles.text}>Platform: {Platform.OS}</Text>\r\n        <Text style={styles.text}>Time: {new Date().toLocaleTimeString()}</Text>\r\n        <Text style={styles.text}>If you can see this, the app is loading correctly!</Text>\r\n      </View>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: 'center',\r\n    backgroundColor: '#f0f0f0',\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    padding: 20,\r\n  },\r\n  text: {\r\n    color: '#424242',\r\n    fontSize: 16,\r\n    marginBottom: 15,\r\n    textAlign: 'center',\r\n  },\r\n  title: {\r\n    color: '#2e7d32',\r\n    fontSize: 28,\r\n    fontWeight: 'bold',\r\n    marginBottom: 30,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\modul.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\onboarding.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":10,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter } from \"expo-router\";\r\nimport React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\n\r\nimport OnboardingFlow from \"@/components/OnboardingFlow\";\r\nimport Colors from \"@/constants/colors\";\r\nimport { nav } from \"@/shared/navigation/nav\";\r\n\r\nexport default function OnboardingScreen() {\r\n  const router = useRouter();\r\n\r\n  const handleOnboardingComplete = () => {\r\n  nav.replaceTabs();\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <OnboardingFlow onComplete={handleOnboardingComplete} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\route\\[id].tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":113,"column":39,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":113,"endColumn":55},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":151,"column":19,"nodeType":"ObjectExpression","endLine":155,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":218,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":218,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":242,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":242,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":245,"column":17,"nodeType":"ObjectExpression","endLine":252,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useLocalSearchParams } from \"expo-router\";\r\nimport { Clock, Navigation, MapPin } from \"lucide-react-native\";\nimport React, { useMemo, useState } from \"react\";\r\nimport { StyleSheet, Text, View, ScrollView, Pressable } from \"react-native\";\n\r\nimport DirectionStep from \"@/components/DirectionStep\";\r\nimport FeatureErrorBoundary from \"@/components/FeatureErrorBoundary\";\r\nimport FunFactCard from \"@/components/FunFactCard\";\r\nimport MapPlaceholder from \"@/components/MapPlaceholder\";\r\nimport VoiceNavigation from \"@/components/VoiceNavigation\";\r\nimport Colors from \"@/constants/colors\";\r\nimport useLocation from \"@/hooks/useLocation\";\r\nimport { useRoutesQuery } from '@/hooks/useRoutesQuery';\nimport { getRandomFunFact } from \"@/mocks/funFacts\";\r\nimport SafetyPanel from \"@/modules/safety/components/SafetyPanel\";\r\nimport { nav } from '@/shared/navigation/nav';\r\nimport { useNavigationStore } from \"@/stores/navigationStore\";\r\n\r\nexport default function RouteDetailScreen() {\r\n  const { id } = useLocalSearchParams();\r\n  const { location } = useLocation();\r\n\r\n  const {\r\n    origin,\r\n    destination,\r\n    selectedRoute\r\n  } = useNavigationStore();\r\n  const { data: queriedRoutes = [] } = useRoutesQuery(origin, destination, origin && destination ? 'transit' : 'transit', { travelMode: 'transit', avoidHighways: false, avoidTolls: false, accessibilityMode: false });\r\n\r\n  // Narrow to string id (expo-router param can be string | string[] | undefined)\r\n  const routeId = Array.isArray(id) ? id[0] : id;\r\n\r\n  // Resolve the route deterministically\r\n  const route = useMemo(() => {\r\n    if (!routeId) return null;\r\n    if (selectedRoute && selectedRoute.id === routeId) return selectedRoute;\r\n    return queriedRoutes.find(r => r.id === routeId) || null;\r\n  }, [routeId, selectedRoute, queriedRoutes]);\r\n\r\n  // (S3-3) VoiceNavigation now handles formatting & sequencing internally\r\n\r\n  const [showFunFact, setShowFunFact] = useState(true);\r\n  const [currentFunFact] = useState(getRandomFunFact(\"subway\"));\r\n\r\n  // Unified guard ensures no unsafe property access below\r\n  if (!route || !origin || !destination) {\r\n    return (\r\n      <View style={styles.errorContainer}>\r\n        <Text style={styles.errorText}>Route not found</Text>\r\n        <Pressable \r\n          style={styles.backButton}\r\n          onPress={() => nav.back()}\r\n        >\r\n          <Text style={styles.backButtonText}>Go Back</Text>\r\n        </Pressable>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <MapPlaceholder\r\n        message={`Map showing route from ${origin.name} to ${destination.name}`}\r\n      />\r\n\r\n  <VoiceNavigation steps={route.steps} />\r\n\r\n      <FeatureErrorBoundary>\r\n        <SafetyPanel \r\n          currentLocation={location} \r\n          currentPlace={destination ? {\r\n            id: destination.id,\r\n            name: destination.name\r\n          } : undefined}\r\n        />\r\n      </FeatureErrorBoundary>\r\n\r\n      {showFunFact && (\r\n        <FunFactCard \r\n          fact={currentFunFact}\r\n          location=\"Transit System\"\r\n          onDismiss={() => setShowFunFact(false)}\r\n        />\r\n      )}\r\n      \r\n      <View style={styles.contentContainer}>\r\n        <View style={styles.routeSummary}>\r\n          <View style={styles.locationContainer}>\r\n            <View style={styles.locationRow}>\r\n              <View style={[styles.locationPin, styles.originPin]}>\r\n                <Navigation size={16} color=\"#FFFFFF\" />\r\n              </View>\r\n              <Text style={styles.locationText} numberOfLines={1}>\r\n                {origin.name}\r\n              </Text>\r\n            </View>\r\n            \r\n            <View style={styles.locationConnector} />\r\n            \r\n            <View style={styles.locationRow}>\r\n              <View style={[styles.locationPin, styles.destinationPin]}>\r\n                <MapPin size={16} color=\"#FFFFFF\" />\r\n              </View>\r\n              <Text style={styles.locationText} numberOfLines={1}>\r\n                {destination.name}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n          \r\n          <View style={styles.timeInfo}>\r\n            <Text style={styles.duration}>{route.totalDuration} min</Text>\r\n            <View style={styles.timeRow}>\r\n              <Clock size={14} color={Colors.textLight} style={styles.clockIcon} />\r\n              <Text style={styles.timeText}>\r\n                {route.departureTime} - {route.arrivalTime}\r\n              </Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n        \r\n        <Text style={styles.sectionTitle}>Step by Step Directions</Text>\r\n        \r\n        <View style={styles.stepsContainer}>\r\n          {route.steps.map((step, index) => (\r\n            <DirectionStep\r\n              key={step.id}\r\n              step={step}\r\n              isLast={index === route.steps.length - 1}\r\n            />\r\n          ))}\r\n        </View>\r\n        \r\n        <View style={styles.tipContainer}>\r\n          <Text style={styles.tipTitle}>Kid-Friendly Tip</Text>\r\n          <Text style={styles.tipText}>\r\n            Remember to stay with an adult and keep your phone with you at all times!\r\n          </Text>\r\n        </View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  backButton: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    paddingHorizontal: 24,\r\n    paddingVertical: 12,\r\n  },\r\n  backButtonText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  clockIcon: {\r\n    marginRight: 4,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  contentContainer: {\r\n    padding: 16,\r\n  },\r\n  destinationPin: {\r\n    backgroundColor: Colors.secondary,\r\n  },\r\n  duration: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 4,\r\n  },\r\n  errorContainer: {\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 16,\r\n  },\r\n  errorText: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    marginBottom: 24,\r\n  },\r\n  locationConnector: {\r\n    backgroundColor: Colors.border,\r\n    height: 24,\r\n    marginBottom: 8,\r\n    marginLeft: 13,\r\n    width: 2,\r\n  },\r\n  locationContainer: {\r\n    marginBottom: 16,\r\n  },\r\n  locationPin: {\r\n    alignItems: \"center\",\r\n    borderRadius: 14,\r\n    height: 28,\r\n    justifyContent: \"center\",\r\n    marginRight: 12,\r\n    width: 28,\r\n  },\r\n  locationRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 8,\r\n  },\r\n  locationText: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n  },\r\n  originPin: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  routeSummary: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    marginBottom: 24,\r\n    padding: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  stepsContainer: {\r\n    marginBottom: 24,\r\n  },\r\n  timeInfo: {\r\n    borderTopColor: Colors.border,\r\n    borderTopWidth: 1,\r\n    paddingTop: 16,\r\n  },\r\n  timeRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  timeText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  tipContainer: {\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderLeftColor: Colors.primary,\r\n    borderLeftWidth: 4,\r\n    borderRadius: 12,\r\n    marginBottom: 24,\r\n    padding: 16,\r\n  },\r\n  tipText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n  },\r\n  tipTitle: {\r\n    color: Colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\search.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":116,"column":38,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":116,"endColumn":54},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":118,"column":35,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3733,3770],"text":"\r\n              No places found for &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3733,3770],"text":"\r\n              No places found for &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3733,3770],"text":"\r\n              No places found for &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3733,3770],"text":"\r\n              No places found for &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":118,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3783,3798],"text":"&quot;\r\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3783,3798],"text":"&ldquo;\r\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3783,3798],"text":"&#34;\r\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3783,3798],"text":"&rdquo;\r\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":140,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":140,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useLocalSearchParams } from \"expo-router\";\r\nimport { MapPin } from \"lucide-react-native\";\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, FlatList } from \"react-native\";\n\r\nimport PlaceCard from \"@/components/PlaceCard\";\r\nimport SearchBar from \"@/components/SearchBar\";\r\nimport Colors from \"@/constants/colors\";\r\nimport { favoriteLocations, recentSearches } from \"@/mocks/places\";\r\nimport { nav } from '@/shared/navigation/nav';\r\nimport { useNavigationStore } from \"@/stores/navigationStore\";\nimport { Place, PlaceCategory } from \"@/types/navigation\";\r\n\r\n// Mock search results based on query or category\r\nconst getMockSearchResults = (query: string, category?: PlaceCategory): Place[] => {\r\n  // Combine favorites and recent searches for the mock data pool\r\n  const allPlaces = [...favoriteLocations, ...recentSearches];\r\n  \r\n  if (category) {\r\n    return allPlaces.filter(place => place.category === category);\r\n  }\r\n  \r\n  if (!query.trim()) {\r\n    return [];\r\n  }\r\n  \r\n  const lowerQuery = query.toLowerCase();\r\n  return allPlaces.filter(\r\n    place => \r\n      place.name.toLowerCase().includes(lowerQuery) || \r\n      place.address.toLowerCase().includes(lowerQuery)\r\n  );\r\n};\r\n\r\nexport default function SearchScreen() {\r\n  const params = useLocalSearchParams();\r\n  const category = params.category as PlaceCategory;\r\n  \r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState<Place[]>([]);\r\n  \r\n  const { \r\n    recentSearches: storedRecentSearches,\r\n    setDestination,\r\n    addToRecentSearches\r\n  } = useNavigationStore();\r\n\r\n  useEffect(() => {\r\n    // If category is provided, search by category\r\n    if (category) {\r\n      setSearchResults(getMockSearchResults(\"\", category));\r\n    }\r\n  }, [category]);\r\n\r\n  const handleSearch = (text: string) => {\r\n    setSearchQuery(text);\r\n    setSearchResults(getMockSearchResults(text, category));\r\n  };\r\n\r\n  const handlePlaceSelect = (place: Place) => {\r\n    setDestination(place);\r\n    addToRecentSearches(place);\r\n  nav.back();\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.searchContainer}>\r\n        <SearchBar\r\n          value={searchQuery}\r\n          onChangeText={handleSearch}\r\n          onClear={() => {\r\n            setSearchQuery(\"\");\r\n            setSearchResults([]);\r\n          }}\r\n          placeholder={\r\n            category \r\n              ? `Search ${category} places...` \r\n              : \"Search for a place...\"\r\n          }\r\n        />\r\n      </View>\r\n\r\n      {searchQuery.length === 0 && !category && storedRecentSearches.length > 0 && (\r\n        <>\r\n          <Text style={styles.sectionTitle}>Recent Searches</Text>\r\n          {storedRecentSearches.map(place => (\r\n            <PlaceCard\r\n              key={place.id}\r\n              place={place}\r\n              onPress={handlePlaceSelect}\r\n            />\r\n          ))}\r\n        </>\r\n      )}\r\n\r\n      {searchResults.length > 0 ? (\r\n        <>\r\n          <Text style={styles.sectionTitle}>\r\n            {category \r\n              ? `${category.charAt(0).toUpperCase() + category.slice(1)} Places` \r\n              : \"Search Results\"}\r\n          </Text>\r\n          <FlatList\r\n            data={searchResults}\r\n            keyExtractor={(item) => item.id}\r\n            renderItem={({ item }) => (\r\n              <PlaceCard place={item} onPress={handlePlaceSelect} />\r\n            )}\r\n            contentContainerStyle={styles.resultsList}\r\n          />\r\n        </>\r\n      ) : (\r\n        searchQuery.length > 0 && (\r\n          <View style={styles.emptyStateContainer}>\r\n            <MapPin size={40} color={Colors.textLight} />\r\n            <Text style={styles.emptyStateText}>\r\n              No places found for \"{searchQuery}\"\r\n            </Text>\r\n          </View>\r\n        )\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  emptyStateContainer: {\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 16,\r\n  },\r\n  emptyStateText: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    marginTop: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  resultsList: {\r\n    paddingBottom: 16,\r\n  },\r\n  searchContainer: {\r\n    marginBottom: 24,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\tabs\\_layout.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":13,"column":34,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":13,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Tabs } from \"expo-router\";\nimport { Home, Map, Train, Settings, Trophy } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { Platform } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\nexport default function TabLayout() {\r\n  return (\r\n    <Tabs\r\n      screenOptions={{\r\n        tabBarActiveTintColor: Colors.primary,\r\n        tabBarInactiveTintColor: Colors.textLight,\r\n        tabBarLabelStyle: {\r\n          fontSize: 12,\r\n          fontWeight: \"500\",\r\n        },\r\n        tabBarStyle: {\r\n          height: Platform.OS === 'android' ? 65 : 60,\r\n          paddingBottom: Platform.OS === 'android' ? 10 : 8,\r\n          paddingTop: Platform.OS === 'android' ? 5 : 0,\r\n        },\r\n        headerShadowVisible: false,\r\n        // Android-specific tab styling\r\n        ...(Platform.OS === 'android' && {\r\n          tabBarStyle: {\r\n            height: 65,\r\n            paddingBottom: 10,\r\n            paddingTop: 5,\r\n            elevation: 8,\r\n            borderTopWidth: 0,\r\n          },\r\n        }),\r\n      }}\r\n    >\r\n      <Tabs.Screen\r\n        name=\"index\"\r\n        options={{\r\n          title: \"Home\",\r\n          tabBarIcon: ({ color }) => <Home size={24} color={color} />,\r\n          headerTitle: \"KidMap\",\r\n        }}\r\n      />\r\n      <Tabs.Screen\r\n        name=\"map\"\r\n        options={{\r\n          title: \"Map\",\r\n          tabBarIcon: ({ color }) => <Map size={24} color={color} />,\r\n        }}\r\n      />\r\n      <Tabs.Screen\r\n        name=\"transit\"\r\n        options={{\r\n          title: \"Transit\",\r\n          tabBarIcon: ({ color }) => <Train size={24} color={color} />,\r\n        }}\r\n      />\r\n      <Tabs.Screen\r\n        name=\"achievements\"\r\n        options={{\r\n          title: \"Achievements\",\r\n          tabBarIcon: ({ color }) => <Trophy size={24} color={color} />,\r\n        }}\r\n      />\r\n      <Tabs.Screen\r\n        name=\"settings\"\r\n        options={{\r\n          title: \"Settings\",\r\n          tabBarIcon: ({ color }) => <Settings size={24} color={color} />,\r\n        }}\r\n      />\r\n    </Tabs>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\tabs\\achievements.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screenHeight' is assigned a value but never used.","line":10,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":49},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":146,"column":42,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":146,"endColumn":58},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":173,"column":18,"nodeType":"ObjectExpression","endLine":175,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":192,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":192,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0FFF4' }","line":202,"column":22,"nodeType":"ObjectExpression","endLine":206,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":217,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":217,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":222,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":222,"endColumn":33},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.journalList","line":233,"column":3,"nodeType":"Property","endLine":235,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":272,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":272,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Trophy, Star, Target, Calendar } from \"lucide-react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View, ScrollView, Pressable, Dimensions, Platform } from \"react-native\";\n\r\nimport AchievementBadge from \"@/components/AchievementBadge\";\r\nimport UserStatsCard from \"@/components/UserStatsCard\";\r\nimport Colors from \"@/constants/colors\";\r\nimport { useGamificationStore } from \"@/stores/gamificationStore\";\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\r\n\r\nexport default function AchievementsScreen() {\r\n  const { achievements, userStats, tripJournal } = useGamificationStore();\r\n  const [selectedTab, setSelectedTab] = useState<\"achievements\" | \"journal\">(\"achievements\");\r\n\r\n  const unlockedAchievements = achievements.filter(a => a.unlocked);\r\n  const lockedAchievements = achievements.filter(a => !a.unlocked);\r\n\r\n  const renderJournalEntry = ({ item }: { item: typeof tripJournal[0] }) => (\r\n    <View style={styles.journalEntry}>\r\n      <View style={styles.journalHeader}>\r\n        <Text style={styles.journalDate}>\r\n          {new Date(item.date).toLocaleDateString()}\r\n        </Text>\r\n        <View style={styles.ratingContainer}>\r\n          {[1, 2, 3, 4, 5].map(star => (\r\n            <Star \r\n              key={star}\r\n              size={16} \r\n              color={star <= item.rating ? \"#FFD700\" : Colors.border}\r\n              fill={star <= item.rating ? \"#FFD700\" : \"transparent\"}\r\n            />\r\n          ))}\r\n        </View>\r\n      </View>\r\n      \r\n      <Text style={styles.journalRoute}>\r\n        {item.from} ΓåÆ {item.to}\r\n      </Text>\r\n      \r\n      {item.notes && (\r\n        <Text style={styles.journalNotes}>{item.notes}</Text>\r\n      )}\r\n      \r\n      {item.funFacts.length > 0 && (\r\n        <View style={styles.funFactsContainer}>\r\n          <Text style={styles.funFactsTitle}>Fun Facts Learned:</Text>\r\n          {item.funFacts.map((fact, index) => (\r\n            <Text key={index} style={styles.funFact}>ΓÇó {fact}</Text>\r\n          ))}\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <ScrollView \r\n      style={styles.container}\r\n      contentContainerStyle={styles.scrollContent}\r\n      showsVerticalScrollIndicator={false}\r\n      bounces={true}\r\n    >\r\n      <UserStatsCard stats={userStats} />\r\n\r\n      <View style={styles.tabContainer}>\r\n        <Pressable\r\n          style={[\r\n            styles.tab,\r\n            selectedTab === \"achievements\" && styles.activeTab\r\n          ]}\r\n          onPress={() => setSelectedTab(\"achievements\")}\r\n        >\r\n          <Trophy size={20} color={selectedTab === \"achievements\" ? \"#FFFFFF\" : Colors.primary} />\r\n          <Text style={[\r\n            styles.tabText,\r\n            selectedTab === \"achievements\" && styles.activeTabText\r\n          ]}>\r\n            Achievements\r\n          </Text>\r\n        </Pressable>\r\n\r\n        <Pressable\r\n          style={[\r\n            styles.tab,\r\n            selectedTab === \"journal\" && styles.activeTab\r\n          ]}\r\n          onPress={() => setSelectedTab(\"journal\")}\r\n        >\r\n          <Calendar size={20} color={selectedTab === \"journal\" ? \"#FFFFFF\" : Colors.primary} />\r\n          <Text style={[\r\n            styles.tabText,\r\n            selectedTab === \"journal\" && styles.activeTabText\r\n          ]}>\r\n            Trip Journal\r\n          </Text>\r\n        </Pressable>\r\n      </View>\r\n\r\n      <View style={styles.content}>\r\n        {selectedTab === \"achievements\" ? (\r\n          <>\r\n            {unlockedAchievements.length > 0 && (\r\n              <>\r\n                <Text style={styles.sectionTitle}>Unlocked Achievements</Text>\r\n                <View style={styles.achievementsGrid}>\r\n                  {unlockedAchievements.map(achievement => (\r\n                    <AchievementBadge\r\n                      key={achievement.id}\r\n                      achievement={achievement}\r\n                      size=\"large\"\r\n                    />\r\n                  ))}\r\n                </View>\r\n              </>\r\n            )}\r\n\r\n            {lockedAchievements.length > 0 && (\r\n              <>\r\n                <Text style={styles.sectionTitle}>Coming Soon</Text>\r\n                <View style={styles.achievementsGrid}>\r\n                  {lockedAchievements.map(achievement => (\r\n                    <AchievementBadge\r\n                      key={achievement.id}\r\n                      achievement={achievement}\r\n                      size=\"medium\"\r\n                    />\r\n                  ))}\r\n                </View>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {tripJournal.length > 0 ? (\r\n              <View style={styles.journalContainer}>\r\n                {tripJournal\r\n                  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n                  .map(item => (\r\n                    <View key={item.id}>\r\n                      {renderJournalEntry({ item })}\r\n                    </View>\r\n                  ))}\r\n              </View>\r\n            ) : (\r\n              <View style={styles.emptyState}>\r\n                <Target size={40} color={Colors.textLight} />\r\n                <Text style={styles.emptyText}>\r\n                  Start your first trip to begin your journey journal!\r\n                </Text>\r\n              </View>\r\n            )}\r\n          </>\r\n        )}\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  achievementsGrid: {\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    gap: 16,\r\n    justifyContent: Platform.select({\r\n      web: screenWidth > 768 ? \"space-around\" : \"center\",\r\n      default: \"space-around\",\r\n    }),\r\n    marginBottom: 24,\r\n  },\r\n  activeTab: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  activeTabText: {\r\n    color: \"#FFFFFF\",\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    minHeight: 200,\r\n    padding: 16,\r\n  },\r\n  emptyState: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    minHeight: 300,\r\n    padding: 32,\r\n  },\r\n  emptyText: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    marginTop: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  funFact: {\r\n    color: Colors.text,\r\n    fontSize: 12,\r\n    marginBottom: 2,\r\n  },\r\n  funFactsContainer: {\r\n    backgroundColor: \"#F0FFF4\",\r\n    borderRadius: 8,\r\n    padding: 12,\r\n  },\r\n  funFactsTitle: {\r\n    color: Colors.secondary,\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  journalContainer: {\r\n    gap: 12,\r\n  },\r\n  journalDate: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n  journalEntry: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  journalHeader: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 8,\r\n  },\r\n  journalList: {\r\n    paddingBottom: 16,\r\n  },\r\n  journalNotes: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontStyle: \"italic\",\r\n    marginBottom: 8,\r\n  },\r\n  journalRoute: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n  },\r\n  ratingContainer: {\r\n    flexDirection: \"row\",\r\n    gap: 2,\r\n  },\r\n  scrollContent: {\r\n    flexGrow: 1,\r\n    paddingBottom: 32,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  tab: {\r\n    alignItems: \"center\",\r\n    borderRadius: 8,\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    justifyContent: \"center\",\r\n    paddingVertical: 12,\r\n  },\r\n  tabContainer: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    margin: 16,\r\n    padding: 4,\r\n  },\r\n  tabText: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\tabs\\index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ListRenderItem' is defined but never used.","line":3,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":69},{"ruleId":"import/order","severity":1,"message":"`@/components/WeatherCard` import should occur after import of `@/components/UserStatsCard`","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":52,"fix":{"range":[217,967],"text":"import AIJourneyCompanion from \"@/components/AIJourneyCompanion\";\r\nimport CategoryButton from \"@/components/CategoryButton\";\r\nimport VirtualPetCompanion from \"@/components/VirtualPetCompanion\";\r\n\r\nimport EmptyState from \"@/components/EmptyState\";\r\nimport FeatureErrorBoundary from \"@/components/FeatureErrorBoundary\";\r\nimport PlaceCard from \"@/components/PlaceCard\";\r\nimport PullToRefresh from \"@/components/PullToRefresh\";\r\nimport RegionalFunFactCard from \"@/components/RegionalFunFactCard\";\r\nimport SearchWithSuggestions from \"@/components/SearchWithSuggestions\";\r\nimport SmartRouteSuggestions from \"@/components/SmartRouteSuggestions\";\r\nimport UserStatsCard from \"@/components/UserStatsCard\";\r\nimport WeatherCard from \"@/components/WeatherCard\";\r\n"}},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":68,"fix":{"range":[465,467],"text":""}},{"ruleId":"import/order","severity":1,"message":"`@/components/VirtualPetCompanion` import should occur after import of `@/components/UserStatsCard`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":68,"fix":{"range":[396,967],"text":"\r\nimport EmptyState from \"@/components/EmptyState\";\r\nimport FeatureErrorBoundary from \"@/components/FeatureErrorBoundary\";\r\nimport PlaceCard from \"@/components/PlaceCard\";\r\nimport PullToRefresh from \"@/components/PullToRefresh\";\r\nimport RegionalFunFactCard from \"@/components/RegionalFunFactCard\";\r\nimport SearchWithSuggestions from \"@/components/SearchWithSuggestions\";\r\nimport SmartRouteSuggestions from \"@/components/SmartRouteSuggestions\";\r\nimport UserStatsCard from \"@/components/UserStatsCard\";\r\nimport VirtualPetCompanion from \"@/components/VirtualPetCompanion\";\r\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatters' is assigned a value but never used.","line":57,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSearch' is assigned a value but never used.","line":135,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { MapPin, Navigation } from \"lucide-react-native\";\r\nimport React, { useState, useCallback, useMemo } from \"react\";\r\nimport { StyleSheet, Text, View, FlatList, Pressable, ListRenderItem } from \"react-native\";\n\r\nimport WeatherCard from \"@/components/WeatherCard\";\r\nimport AIJourneyCompanion from \"@/components/AIJourneyCompanion\";\r\nimport CategoryButton from \"@/components/CategoryButton\";\r\nimport VirtualPetCompanion from \"@/components/VirtualPetCompanion\";\r\n\r\nimport EmptyState from \"@/components/EmptyState\";\r\nimport FeatureErrorBoundary from \"@/components/FeatureErrorBoundary\";\r\nimport PlaceCard from \"@/components/PlaceCard\";\r\nimport PullToRefresh from \"@/components/PullToRefresh\";\r\nimport RegionalFunFactCard from \"@/components/RegionalFunFactCard\";\r\nimport SearchWithSuggestions from \"@/components/SearchWithSuggestions\";\r\nimport SmartRouteSuggestions from \"@/components/SmartRouteSuggestions\";\r\nimport UserStatsCard from \"@/components/UserStatsCard\";\r\nimport Colors from \"@/constants/colors\";\r\nimport useLocation from \"@/hooks/useLocation\";\r\nimport { useRegionalData } from \"@/hooks/useRegionalData\";\r\nimport SafetyPanel from \"@/modules/safety/components/SafetyPanel\";\r\nimport { SafeZoneIndicator } from \"@/modules/safety/components/SafeZoneIndicator\";\r\nimport { nav } from \"@/shared/navigation/nav\";\r\nimport { useCategoryStore } from \"@/stores/categoryStore\";\r\nimport { useGamificationStore } from \"@/stores/gamificationStore\";\r\nimport { useNavigationStore } from \"@/stores/navigationStore\";\r\nimport { PlaceCategory, Place } from \"@/types/navigation\";\r\nimport { trackScreenView, trackUserAction } from \"@/utils/analytics\";\r\n\r\ntype SearchSuggestion = {\r\n  id: string;\r\n  text: string;\r\n  type: \"recent\" | \"popular\" | \"place\";\r\n  place?: Place;\r\n};\r\n\r\n\r\n\r\nexport default function HomeScreen() {\r\n  const { location, hasLocation } = useLocation();\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [showFunFact, setShowFunFact] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [selectedPlace, setSelectedPlace] = useState<Place | undefined>(undefined);\r\n  const [showPetCompanion, setShowPetCompanion] = useState(false);\r\n  const [isNavigating, setIsNavigating] = useState(false);\r\n  const [selectedDestination, setSelectedDestination] = useState<Place | undefined>(undefined);\r\n  \r\n  const { \r\n    favorites, \r\n    setDestination,\r\n    addToRecentSearches,\r\n    recentSearches\r\n  } = useNavigationStore();\r\n\r\n  const { userStats, completeTrip } = useGamificationStore();\r\n  const { formatters, regionalContent, currentRegion } = useRegionalData();\r\n  const { getApprovedCategories } = useCategoryStore();\r\n  \r\n  const approvedCategories = getApprovedCategories();\r\n\r\n  React.useEffect(() => {\r\n    trackScreenView('home');\r\n  }, []);\r\n\r\n  // Mock weather data with regional formatting\r\n  const mockWeather = {\r\n    condition: \"Sunny\",\r\n    temperature: 72,\r\n    recommendation: `Perfect weather for exploring ${currentRegion.name}! Don't forget sunscreen.`\r\n  };\r\n\r\n  // Generate search suggestions\r\n  const suggestions: SearchSuggestion[] = React.useMemo(() => {\r\n    if (!searchQuery.trim()) return [];\r\n    \r\n    const searchSuggestions: SearchSuggestion[] = [];\r\n    \r\n    // Add recent searches\r\n    recentSearches.forEach(place => {\r\n      if (place.name.toLowerCase().includes(searchQuery.toLowerCase())) {\r\n        searchSuggestions.push({\r\n          id: `recent-${place.id}`,\r\n          text: place.name,\r\n          type: \"recent\",\r\n          place,\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Add favorites\r\n    favorites.forEach(place => {\r\n      if (place.name.toLowerCase().includes(searchQuery.toLowerCase())) {\r\n        searchSuggestions.push({\r\n          id: `favorite-${place.id}`,\r\n          text: place.name,\r\n          type: \"place\",\r\n          place,\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Add regional popular places\r\n    regionalContent.popularPlaces.forEach((place, index) => {\r\n      if (place.name.toLowerCase().includes(searchQuery.toLowerCase())) {\r\n        searchSuggestions.push({\r\n          id: `popular-${index}`,\r\n          text: place.name,\r\n          type: \"popular\",\r\n          place: {\r\n            id: `popular-${index}`,\r\n            name: place.name,\r\n            address: place.description,\r\n            category: place.category as PlaceCategory,\r\n            coordinates: {\r\n              latitude: currentRegion.coordinates.latitude + (Math.random() - 0.5) * 0.01,\r\n              longitude: currentRegion.coordinates.longitude + (Math.random() - 0.5) * 0.01,\r\n            }\r\n          },\r\n        });\r\n      }\r\n    });\r\n    \r\n    return searchSuggestions;\r\n  }, [searchQuery, recentSearches, favorites, regionalContent.popularPlaces, currentRegion]);\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true);\r\n    // Simulate refresh delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    setRefreshing(false);\r\n    trackUserAction('pull_to_refresh', { screen: 'home' });\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (searchQuery.trim()) {\r\n      trackUserAction('search', { query: searchQuery });\r\n  nav.push(\"/search\");\r\n    }\r\n  };\r\n\r\n  const handlePlaceSelect = (place: Place) => {\r\n    setDestination(place);\r\n    setSelectedDestination(place);\r\n    setIsNavigating(true);\r\n    addToRecentSearches(place);\r\n    completeTrip(\"Current Location\", place.name);\r\n    trackUserAction('select_place', { place_name: place.name, place_category: place.category });\r\n  nav.push(\"/map\");\r\n  };\r\n\r\n  const handleSuggestionSelect = (suggestion: SearchSuggestion) => {\r\n    if (suggestion.place) {\r\n      handlePlaceSelect(suggestion.place);\r\n    }\r\n  };\r\n\r\n  const handleCategorySelect = (categoryId: PlaceCategory | string) => {\r\n    trackUserAction('select_category', { category: categoryId });\r\n  nav.push(\"/search\", { category: String(categoryId) });\r\n  };\r\n\r\n  const handleCurrentLocation = () => {\r\n    if (!hasLocation) return; // Guard against unavailable location\r\n    const currentPlace = {\r\n      id: \"current-location\",\r\n      name: \"Current Location\",\r\n      address: \"Your current position\",\r\n      category: \"other\" as PlaceCategory,\r\n      coordinates: {\r\n        latitude: location.latitude,\r\n        longitude: location.longitude\r\n      }\r\n    };\r\n    trackUserAction('use_current_location');\r\n    handlePlaceSelect(currentPlace);\r\n  };\r\n\r\n  return (\r\n    <PullToRefresh onRefresh={handleRefresh} refreshing={refreshing}>\r\n      <View style={styles.container}>\r\n        <UserStatsCard \r\n          stats={userStats} \r\n          onPetClick={() => setShowPetCompanion(true)}\r\n        />\r\n        \r\n        <SafeZoneIndicator />\r\n        \r\n        <WeatherCard weather={mockWeather} />\r\n        \r\n        {showFunFact && (\r\n          <RegionalFunFactCard \r\n            onDismiss={() => setShowFunFact(false)}\r\n          />\r\n        )}\r\n\r\n        <AIJourneyCompanion \r\n          currentLocation={location}\r\n          destination={selectedDestination}\r\n          isNavigating={isNavigating}\r\n        />\r\n\r\n        {selectedDestination && (\r\n          <SmartRouteSuggestions\r\n            destination={selectedDestination}\r\n            currentLocation={location}\r\n            timeOfDay={new Date().getHours() < 12 ? 'morning' : new Date().getHours() < 18 ? 'afternoon' : 'evening'}\r\n            onSelectRoute={(suggestion) => {\r\n              console.log('Selected route:', suggestion);\r\n              trackUserAction('select_smart_route', { route_type: suggestion.type });\r\n            }}\r\n          />\r\n        )}\r\n\r\n        <FeatureErrorBoundary>\r\n          <SafetyPanel \r\n            currentLocation={location} \r\n            currentPlace={selectedPlace ? {\r\n              id: selectedPlace.id,\r\n              name: selectedPlace.name\r\n            } : undefined}\r\n          />\r\n        </FeatureErrorBoundary>\r\n\r\n        <View style={styles.searchContainer}>\r\n          <SearchWithSuggestions\r\n            value={searchQuery}\r\n            onChangeText={setSearchQuery}\r\n            onSelectSuggestion={handleSuggestionSelect}\r\n            suggestions={suggestions}\r\n            placeholder={`Where do you want to go in ${currentRegion.name}?`}\r\n          />\r\n          <Pressable \r\n            style={styles.currentLocationButton}\r\n            onPress={handleCurrentLocation}\r\n          >\r\n            <Navigation size={20} color={Colors.primary} />\r\n            <Text style={styles.currentLocationText}>Use my location</Text>\r\n          </Pressable>\r\n        </View>\r\n\r\n        <Text style={styles.sectionTitle}>Categories</Text>\r\n        <View style={styles.categoriesContainer}>\r\n          {approvedCategories.map((category) => (\r\n            <CategoryButton\r\n              key={category.id}\r\n              customCategory={category}\r\n              onPress={handleCategorySelect}\r\n              size=\"large\"\r\n            />\r\n          ))}\r\n        </View>\r\n\r\n        <Text style={styles.sectionTitle}>Favorites</Text>\r\n        {favorites.length > 0 ? (\r\n          <FlatList\r\n            data={favorites}\r\n            keyExtractor={(item) => item.id}\r\n            renderItem={({ item }) => (\r\n              <PlaceCard\r\n                place={item}\r\n                onPress={(selectedPlace) => {\r\n                  setSelectedPlace(selectedPlace);\r\n                  handlePlaceSelect(selectedPlace);\r\n                }}\r\n              />\r\n            )}\r\n            ItemSeparatorComponent={() => <View style={styles.favoriteSeparator} />}\r\n            initialNumToRender={6}\r\n            windowSize={8}\r\n            removeClippedSubviews\r\n            contentContainerStyle={styles.favoritesListContent}\r\n            testID=\"favorites-list\"\r\n          />\r\n        ) : (\r\n          <EmptyState\r\n            icon={MapPin}\r\n            title=\"No favorites yet\"\r\n            description={`Add places you visit often in ${currentRegion.name} to see them here`}\r\n            actionText=\"Search Places\"\r\n            onAction={() => nav.push(\"/search\")}\r\n          />\r\n        )}\r\n\r\n        <VirtualPetCompanion \r\n          visible={showPetCompanion}\r\n          onClose={() => setShowPetCompanion(false)}\r\n        />\r\n      </View>\r\n    </PullToRefresh>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  categoriesContainer: {\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 24,\r\n    paddingHorizontal: 16,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  currentLocationButton: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginTop: 12,\r\n    paddingVertical: 8,\r\n  },\r\n  currentLocationText: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n    marginLeft: 8,\r\n  },\r\n  favoriteSeparator: {\r\n    height: 12,\r\n  },\r\n  favoritesListContent: {\r\n    paddingBottom: 32,\r\n    paddingHorizontal: 16,\r\n  },\r\n  searchContainer: {\r\n    marginBottom: 24,\r\n    paddingHorizontal: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n    paddingHorizontal: 16,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\tabs\\map.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screenWidth' is assigned a value but never used.","line":19,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setOrigin'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [hasLocation, location.latitude, location.longitude, origin, setOrigin]","fix":{"range":[1959,2019],"text":"[hasLocation, location.latitude, location.longitude, origin, setOrigin]"}}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":119,"column":40,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":119,"endColumn":56},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":138,"column":36,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":138,"endColumn":52},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":179,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":179,"endColumn":28},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.loadingText","line":193,"column":3,"nodeType":"Property","endLine":197,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":194,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":194,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":199,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":199,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":240,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":240,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":249,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":249,"endColumn":28},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.routesContainer","line":251,"column":3,"nodeType":"Property","endLine":253,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":260,"column":21,"nodeType":"ObjectExpression","endLine":264,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Navigation, MapPin, Search } from \"lucide-react-native\";\r\nimport React, { useEffect, useCallback, useMemo, useRef } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable, Dimensions, Platform, FlatList, ListRenderItem } from \"react-native\";\n\r\nimport FeatureErrorBoundary from \"@/components/FeatureErrorBoundary\";\r\nimport LoadingSpinner from '@/components/LoadingSpinner';\r\nimport MapPlaceholder from \"@/components/MapPlaceholder\";\r\nimport RouteCard from \"@/components/RouteCard\";\r\nimport TravelModeSelector from \"@/components/TravelModeSelector\";\r\nimport Colors from \"@/constants/colors\";\r\nimport useLocation from \"@/hooks/useLocation\";\r\nimport { useRoutesQuery } from '@/hooks/useRoutesQuery';\r\nimport SafetyPanel from \"@/modules/safety/components/SafetyPanel\";\r\nimport { nav } from \"@/shared/navigation/nav\";\r\nimport { useNavigationStore } from \"@/stores/navigationStore\";\r\nimport { Route } from \"@/types/navigation\";\r\nimport { mark, measure } from \"@/utils/performanceMarks\";\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\r\n\r\nexport default function MapScreen() {\r\n  const { location, hasLocation } = useLocation();\r\n  \r\n  const { \r\n    origin,\r\n    destination,\r\n    selectedRoute,\r\n    selectedTravelMode,\r\n    setOrigin,\r\n    selectRoute,\r\n    setTravelMode\r\n  } = useNavigationStore();\r\n\r\n  const { data: queryRoutes = [], isFetching } = useRoutesQuery(origin, destination, selectedTravelMode, { travelMode: selectedTravelMode, avoidHighways: false, avoidTolls: false, accessibilityMode: false });\r\n\r\n  useEffect(() => {\r\n    // If no origin is set, use current location\r\n    if (!origin && hasLocation) {\r\n      setOrigin({\r\n        id: \"current-location\",\r\n        name: \"Current Location\",\r\n        address: \"Your current position\",\r\n        category: \"other\",\r\n        coordinates: {\r\n          latitude: location.latitude,\r\n          longitude: location.longitude\r\n        }\r\n      });\r\n    }\r\n  }, [hasLocation, location.latitude, location.longitude, origin]);\r\n\r\n  const routesToShow = destination ? queryRoutes : [];\r\n  const firstPaintDone = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!firstPaintDone.current && destination && routesToShow.length > 0) {\r\n      firstPaintDone.current = true;\r\n      const keyId = `${origin?.id || 'origin'}->${destination.id}:${selectedTravelMode}`;\r\n      mark(`routes_first_paint:${keyId}`);\r\n      measure(`routes_time_to_first_paint:${keyId}`, `routes_fetch_start:${keyId}`, `routes_first_paint:${keyId}`);\r\n    }\r\n  }, [routesToShow.length, destination, origin?.id, selectedTravelMode]);\r\n\r\n  const handleRouteSelect = useCallback((route: Route) => {\r\n    selectRoute(route);\r\n    nav.push(\"/route/:id\", { id: route.id });\r\n  }, [selectRoute]);\r\n\r\n  const handleSearchPress = useCallback(() => {\r\n    nav.push(\"/search\");\r\n  }, []);\r\n\r\n  const renderRoute: ListRenderItem<Route> = useCallback(({ item }) => (\r\n    <RouteCard\r\n      route={item}\r\n      onPress={handleRouteSelect}\r\n      isSelected={selectedRoute?.id === item.id}\r\n    />\r\n  ), [handleRouteSelect, selectedRoute?.id]);\r\n\r\n  const listHeader = useMemo(() => (\r\n    <>\r\n      <View style={styles.mapContainer}>\r\n        <MapPlaceholder \r\n          message={\r\n            destination \r\n              ? `Map showing route to ${destination.name}` \r\n              : \"Select a destination to see the route\"\r\n          } \r\n        />\r\n      </View>\r\n      <FeatureErrorBoundary>\r\n        <SafetyPanel \r\n          currentLocation={location} \r\n          currentPlace={destination ? { id: destination.id, name: destination.name } : undefined}\r\n        />\r\n      </FeatureErrorBoundary>\r\n      <View style={styles.locationBar}>\r\n        <View style={styles.locationPins}>\r\n          <View style={[styles.locationPin, styles.originPin]}>\r\n            <Navigation size={16} color=\"#FFFFFF\" />\r\n          </View>\r\n            <View style={styles.locationConnector} />\r\n          <View style={[styles.locationPin, styles.destinationPin]}>\r\n            <MapPin size={16} color=\"#FFFFFF\" />\r\n          </View>\r\n        </View>\r\n        <View style={styles.locationTexts}>\r\n          <Pressable style={styles.locationButton}>\r\n            <Text style={styles.locationText} numberOfLines={1}>\r\n              {origin?.name || \"Select starting point\"}\r\n            </Text>\r\n          </Pressable>\r\n          <Pressable style={styles.locationButton} onPress={handleSearchPress}>\r\n            <Text style={[styles.locationText, !destination && styles.placeholderText]} numberOfLines={1}>\r\n              {destination?.name || \"Where to?\"}\r\n            </Text>\r\n            {!destination && (\r\n              <Search size={16} color={Colors.textLight} style={styles.searchIcon} />\r\n            )}\r\n          </Pressable>\r\n        </View>\r\n      </View>\r\n      {destination && (\r\n        <>\r\n          <TravelModeSelector selectedMode={selectedTravelMode} onModeChange={setTravelMode} />\r\n          <Text style={styles.sectionTitle}>Available Routes</Text>\r\n          {isFetching && routesToShow.length === 0 && (\r\n            <View style={styles.loadingContainer}><LoadingSpinner size=\"small\" /></View>\r\n          )}\r\n          {!isFetching && routesToShow.length === 0 && (\r\n            <Text style={styles.noRoutesText}>No routes found. Try a different travel mode.</Text>\r\n          )}\r\n        </>\r\n      )}\r\n      {!destination && (\r\n        <View style={styles.emptyStateContainer}>\r\n          <MapPin size={40} color={Colors.textLight} />\r\n          <Text style={styles.emptyStateText}>Select a destination to see available routes</Text>\r\n          <Pressable style={styles.searchButton} onPress={handleSearchPress}>\r\n            <Text style={styles.searchButtonText}>Search Places</Text>\r\n          </Pressable>\r\n        </View>\r\n      )}\r\n    </>\r\n  ), [destination, location, origin, selectedTravelMode, setTravelMode, handleSearchPress, routesToShow.length, isFetching]);\r\n\r\n  return (\r\n    <FlatList\r\n      data={destination ? routesToShow : []}\r\n      keyExtractor={(item) => item.id}\r\n      renderItem={renderRoute}\r\n      ListHeaderComponent={listHeader}\r\n      contentContainerStyle={styles.listContent}\r\n      style={styles.container}\r\n      testID=\"routes-list\"\r\n      initialNumToRender={5}\r\n      windowSize={7}\r\n      removeClippedSubviews\r\n    />\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  destinationPin: {\r\n    backgroundColor: Colors.secondary,\r\n  },\r\n  emptyStateContainer: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    minHeight: 200,\r\n    padding: 32,\r\n  },\r\n  emptyStateText: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    marginBottom: 24,\r\n    marginTop: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  listContent: {\r\n    minHeight: screenHeight,\r\n    paddingBottom: 32,\r\n    paddingHorizontal: 16,\r\n  },\r\n  loadingContainer: {\r\n    paddingVertical: 8,\r\n  },\r\n  loadingText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    paddingVertical: 8,\r\n  },\r\n  locationBar: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    marginBottom: 16,\r\n    padding: 16,\r\n  },\r\n  locationButton: {\r\n    justifyContent: \"center\",\r\n    paddingVertical: 8,\r\n  },\r\n  locationConnector: {\r\n    backgroundColor: Colors.border,\r\n    height: 24,\r\n    width: 2,\r\n  },\r\n  locationPin: {\r\n    alignItems: \"center\",\r\n    borderRadius: 14,\r\n    height: 28,\r\n    justifyContent: \"center\",\r\n    width: 28,\r\n  },\r\n  locationPins: {\r\n    alignItems: \"center\",\r\n    marginRight: 16,\r\n  },\r\n  locationText: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n  },\r\n  locationTexts: {\r\n    flex: 1,\r\n  },\r\n  mapContainer: {\r\n    height: Platform.select({\r\n      web: Math.min(screenHeight * 0.4, 400),\r\n      default: Math.min(screenHeight * 0.35, 300),\r\n    }),\r\n    minHeight: 250,\r\n  },\r\n  noRoutesText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    fontStyle: 'italic',\r\n    paddingVertical: 8,\r\n  },\r\n  originPin: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  placeholderText: {\r\n    color: Colors.textLight,\r\n  },\r\n  routesContainer: {\r\n    gap: 12,\r\n  },\r\n  searchButton: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    paddingHorizontal: 24,\r\n    paddingVertical: 12,\r\n  },\r\n  searchButtonText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  searchIcon: {\r\n    position: \"absolute\",\r\n    right: 0,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\tabs\\settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authenticateParentMode' is assigned a value but never used.","line":48,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":47},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":76,"column":38,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":76,"endColumn":54},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":364,"column":19,"nodeType":"ObjectExpression","endLine":366,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":390,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":390,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#EAEAEA' }","line":396,"column":20,"nodeType":"ObjectExpression","endLine":399,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":412,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":412,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":428,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":428,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":446,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":446,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":449,"column":16,"nodeType":"ObjectExpression","endLine":457,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":460,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":460,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":480,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":480,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":495,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":495,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bell, Shield, MapPin, Clock, HelpCircle, Info, ChevronRight, Eye, Globe, Settings, RefreshCw, Palette, Lock, Camera } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Switch, ScrollView, Pressable } from \"react-native\";\n\r\nimport AccessibilitySettings from \"@/components/AccessibilitySettings\";\r\nimport CategoryManagement from \"@/components/CategoryManagement\";\r\nimport CityManagement from \"@/components/CityManagement\";\r\nimport NotificationStatusCard from \"@/components/NotificationStatusCard\";\r\nimport PhotoCheckInHistory from \"@/components/PhotoCheckInHistory\";\r\nimport PinAuthentication from \"@/components/PinAuthentication\";\r\nimport RegionalTransitCard from \"@/components/RegionalTransitCard\";\r\nimport RegionSwitcher from \"@/components/RegionSwitcher\";\r\nimport SystemHealthMonitor from \"@/components/SystemHealthMonitor\";\r\nimport Colors from \"@/constants/colors\";\r\nimport ParentDashboard from \"@/modules/safety/components/ParentDashboard\";\r\nimport { useParentalStore } from \"@/modules/safety/stores/parentalStore\";\r\nimport { useRegionStore } from \"@/stores/regionStore\";\r\nimport { transitDataUpdater } from \"@/utils/transitDataUpdater\";\r\n\r\ntype SettingItemProps = {\r\n  icon: React.ReactNode;\r\n  title: string;\r\n  description: string;\r\n  value: boolean;\r\n  onValueChange: (value: boolean) => void;\r\n};\r\n\r\ntype LinkItemProps = {\r\n  icon: React.ReactNode;\r\n  title: string;\r\n  onPress: () => void;\r\n};\r\n\r\nexport default function SettingsScreen() {\r\n  const [notificationsEnabled, setNotificationsEnabled] = React.useState(true);\r\n  const [safetyAlertsEnabled, setSafetyAlertsEnabled] = React.useState(true);\r\n  const [locationHistoryEnabled, setLocationHistoryEnabled] = React.useState(false);\r\n  const [simplifiedDirections, setSimplifiedDirections] = React.useState(true);\r\n  const [showAccessibility, setShowAccessibility] = React.useState(false);\r\n  const [showCityManagement, setShowCityManagement] = React.useState(false);\r\n  const [showCategoryManagement, setShowCategoryManagement] = React.useState(false);\r\n  const [showPhotoHistory, setShowPhotoHistory] = React.useState(false);\r\n  const [userMode, setUserMode] = React.useState<'parent' | 'child'>('child');\r\n  const [showPinAuth, setShowPinAuth] = React.useState(false);\r\n  const [showParentDashboard, setShowParentDashboard] = React.useState(false);\r\n  \r\n  const { currentRegion, userPreferences, updatePreferences } = useRegionStore();\r\n  const { isParentMode, authenticateParentMode, exitParentMode } = useParentalStore();\r\n\r\n  const SettingItem: React.FC<SettingItemProps> = ({ icon, title, description, value, onValueChange }) => (\r\n    <View style={styles.settingItem}>\r\n      <View style={styles.settingIcon}>{icon}</View>\r\n      <View style={styles.settingContent}>\r\n        <Text style={styles.settingTitle}>{title}</Text>\r\n        <Text style={styles.settingDescription}>{description}</Text>\r\n      </View>\r\n      <Switch\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        trackColor={{ false: \"#E0E0E0\", true: Colors.primary }}\r\n        thumbColor=\"#FFFFFF\"\r\n      />\r\n    </View>\r\n  );\r\n\r\n  const LinkItem: React.FC<LinkItemProps> = ({ icon, title, onPress }) => (\r\n    <Pressable \r\n      style={({ pressed }) => [\r\n        styles.linkItem,\r\n        pressed && styles.linkItemPressed\r\n      ]}\r\n      onPress={onPress}\r\n    >\r\n      <View style={styles.settingIcon}>{icon}</View>\r\n      <Text style={styles.linkTitle}>{title}</Text>\r\n      <ChevronRight size={20} color={Colors.textLight} />\r\n    </Pressable>\r\n  );\r\n\r\n  const handleTransitDataUpdate = async () => {\r\n    try {\r\n      console.log('Starting transit data update for all regions...');\r\n      const results = await transitDataUpdater.updateAllRegions();\r\n      \r\n      const successCount = results.filter(r => r.success).length;\r\n      const totalCount = results.length;\r\n      \r\n      if (successCount === totalCount) {\r\n        console.log(`Successfully updated transit data for all ${totalCount} regions`);\r\n      } else {\r\n        console.log(`Updated ${successCount}/${totalCount} regions successfully`);\r\n        results.filter(r => !r.success).forEach(result => {\r\n          console.error(`Failed to update ${result.regionId}: ${result.message}`);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update transit data:', error);\r\n    }\r\n  };\r\n\r\n  const handleParentModeToggle = () => {\r\n    if (isParentMode) {\r\n      exitParentMode();\r\n      setShowParentDashboard(false);\r\n    } else {\r\n      setShowPinAuth(true);\r\n    }\r\n  };\r\n\r\n  const handlePinAuthenticated = async () => {\r\n    setShowPinAuth(false);\r\n    setShowParentDashboard(true);\r\n  };\r\n\r\n  const handleExitParentDashboard = () => {\r\n    setShowParentDashboard(false);\r\n    exitParentMode();\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      {showPinAuth ? (\r\n        <PinAuthentication\r\n          onAuthenticated={handlePinAuthenticated}\r\n          onCancel={() => setShowPinAuth(false)}\r\n        />\r\n      ) : showParentDashboard ? (\r\n        <ParentDashboard onExit={handleExitParentDashboard} />\r\n      ) : showAccessibility ? (\r\n        <AccessibilitySettings onBack={() => setShowAccessibility(false)} />\r\n      ) : showCityManagement ? (\r\n        <CityManagement onBack={() => setShowCityManagement(false)} />\r\n      ) : showCategoryManagement ? (\r\n        <CategoryManagement onBack={() => setShowCategoryManagement(false)} userMode={userMode} />\r\n      ) : showPhotoHistory ? (\r\n        <View style={styles.fullScreenContainer}>\r\n          <View style={styles.backHeader}>\r\n            <Pressable \r\n              style={styles.backButton}\r\n              onPress={() => setShowPhotoHistory(false)}\r\n            >\r\n              <Text style={styles.backButtonText}>ΓåÉ Back</Text>\r\n            </Pressable>\r\n          </View>\r\n          <PhotoCheckInHistory />\r\n        </View>\r\n      ) : (\r\n        <>\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Region & Location</Text>\r\n            <View style={styles.regionContainer}>\r\n              <RegionSwitcher />\r\n            </View>\r\n            \r\n            <LinkItem\r\n              icon={<Settings size={24} color={Colors.primary} />}\r\n              title=\"Manage Cities\"\r\n              onPress={() => setShowCityManagement(true)}\r\n            />\r\n            \r\n            <LinkItem\r\n              icon={<RefreshCw size={24} color={Colors.primary} />}\r\n              title=\"Update Transit Data\"\r\n              onPress={handleTransitDataUpdate}\r\n            />\r\n          </View>\r\n\r\n          <RegionalTransitCard />\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Parental Controls</Text>\r\n            \r\n            <LinkItem\r\n              icon={<Lock size={24} color={Colors.primary} />}\r\n              title={isParentMode ? \"Exit Parent Mode\" : \"Parent Dashboard\"}\r\n              onPress={handleParentModeToggle}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>User Mode</Text>\r\n            <View style={styles.preferenceItem}>\r\n              <Settings size={24} color={Colors.primary} />\r\n              <View style={styles.preferenceContent}>\r\n                <Text style={styles.preferenceTitle}>Current Mode</Text>\r\n                <View style={styles.unitsToggle}>\r\n                  <Pressable\r\n                    style={[\r\n                      styles.unitButton,\r\n                      userMode === \"child\" && styles.activeUnit\r\n                    ]}\r\n                    onPress={() => setUserMode(\"child\")}\r\n                  >\r\n                    <Text style={[\r\n                      styles.unitText,\r\n                      userMode === \"child\" && styles.activeUnitText\r\n                    ]}>\r\n                      Child\r\n                    </Text>\r\n                  </Pressable>\r\n                  <Pressable\r\n                    style={[\r\n                      styles.unitButton,\r\n                      userMode === \"parent\" && styles.activeUnit\r\n                    ]}\r\n                    onPress={() => setUserMode(\"parent\")}\r\n                  >\r\n                    <Text style={[\r\n                      styles.unitText,\r\n                      userMode === \"parent\" && styles.activeUnitText\r\n                    ]}>\r\n                      Parent\r\n                    </Text>\r\n                  </Pressable>\r\n                </View>\r\n              </View>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Categories</Text>\r\n            \r\n            <LinkItem\r\n              icon={<Palette size={24} color={Colors.primary} />}\r\n              title=\"Manage Categories\"\r\n              onPress={() => setShowCategoryManagement(true)}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Safety & Check-ins</Text>\r\n            \r\n            <LinkItem\r\n              icon={<Camera size={24} color={Colors.primary} />}\r\n              title=\"Photo Check-in History\"\r\n              onPress={() => setShowPhotoHistory(true)}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>App Settings</Text>\r\n            \r\n            <NotificationStatusCard testId=\"notification-status\" />\r\n            \r\n            <SettingItem\r\n              icon={<Bell size={24} color={Colors.primary} />}\r\n              title=\"Notifications\"\r\n              description=\"Get alerts about transit delays and updates\"\r\n              value={notificationsEnabled}\r\n              onValueChange={setNotificationsEnabled}\r\n            />\r\n            \r\n            <SettingItem\r\n              icon={<Shield size={24} color={Colors.primary} />}\r\n              title=\"Safety Alerts\"\r\n              description=\"Receive important safety information\"\r\n              value={safetyAlertsEnabled}\r\n              onValueChange={setSafetyAlertsEnabled}\r\n            />\r\n            \r\n            <SettingItem\r\n              icon={<MapPin size={24} color={Colors.primary} />}\r\n              title=\"Save Location History\"\r\n              description=\"Store places you've visited\"\r\n              value={locationHistoryEnabled}\r\n              onValueChange={setLocationHistoryEnabled}\r\n            />\r\n            \r\n            <SettingItem\r\n              icon={<Clock size={24} color={Colors.primary} />}\r\n              title=\"Simplified Directions\"\r\n              description=\"Show easier-to-follow directions\"\r\n              value={simplifiedDirections}\r\n              onValueChange={setSimplifiedDirections}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Regional Preferences</Text>\r\n            \r\n            <View style={styles.preferenceItem}>\r\n              <Globe size={24} color={Colors.primary} />\r\n              <View style={styles.preferenceContent}>\r\n                <Text style={styles.preferenceTitle}>Units</Text>\r\n                <View style={styles.unitsToggle}>\r\n                  <Pressable\r\n                    style={[\r\n                      styles.unitButton,\r\n                      userPreferences.preferredUnits === \"imperial\" && styles.activeUnit\r\n                    ]}\r\n                    onPress={() => updatePreferences({ preferredUnits: \"imperial\" })}\r\n                  >\r\n                    <Text style={[\r\n                      styles.unitText,\r\n                      userPreferences.preferredUnits === \"imperial\" && styles.activeUnitText\r\n                    ]}>\r\n                      Imperial\r\n                    </Text>\r\n                  </Pressable>\r\n                  <Pressable\r\n                    style={[\r\n                      styles.unitButton,\r\n                      userPreferences.preferredUnits === \"metric\" && styles.activeUnit\r\n                    ]}\r\n                    onPress={() => updatePreferences({ preferredUnits: \"metric\" })}\r\n                  >\r\n                    <Text style={[\r\n                      styles.unitText,\r\n                      userPreferences.preferredUnits === \"metric\" && styles.activeUnitText\r\n                    ]}>\r\n                      Metric\r\n                    </Text>\r\n                  </Pressable>\r\n                </View>\r\n              </View>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>System Status</Text>\r\n            <SystemHealthMonitor testId=\"system-health\" />\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Help & Information</Text>\r\n            \r\n            <LinkItem\r\n              icon={<HelpCircle size={24} color={Colors.primary} />}\r\n              title=\"Help Center\"\r\n              onPress={() => {}}\r\n            />\r\n            \r\n            <LinkItem\r\n              icon={<Info size={24} color={Colors.primary} />}\r\n              title=\"About KidMap\"\r\n              onPress={() => {}}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Accessibility</Text>\r\n            \r\n            <LinkItem\r\n              icon={<Eye size={24} color={Colors.primary} />}\r\n              title=\"Accessibility Settings\"\r\n              onPress={() => setShowAccessibility(true)}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.versionContainer}>\r\n            <Text style={styles.versionText}>KidMap v1.0.0</Text>\r\n            <Text style={styles.regionText}>Configured for {currentRegion.name}</Text>\r\n          </View>\r\n        </>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  activeUnit: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  activeUnitText: {\r\n    color: \"#FFFFFF\",\r\n  },\r\n  backButton: {\r\n    alignSelf: 'flex-start',\r\n  },\r\n  backButtonText: {\r\n    color: Colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  },\r\n  backHeader: {\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    padding: 16,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  fullScreenContainer: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  linkItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  linkItemPressed: {\r\n    backgroundColor: \"#EAEAEA\",\r\n    opacity: 0.8,\r\n  },\r\n  linkTitle: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  preferenceContent: {\r\n    flex: 1,\r\n    marginLeft: 16,\r\n  },\r\n  preferenceItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  preferenceTitle: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n  },\r\n  regionContainer: {\r\n    alignItems: \"flex-start\",\r\n  },\r\n  regionText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginTop: 4,\r\n  },\r\n  section: {\r\n    marginBottom: 16,\r\n    padding: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  settingContent: {\r\n    flex: 1,\r\n  },\r\n  settingDescription: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  settingIcon: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderRadius: 20,\r\n    height: 40,\r\n    justifyContent: \"center\",\r\n    marginRight: 16,\r\n    width: 40,\r\n  },\r\n  settingItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  settingTitle: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  unitButton: {\r\n    alignItems: \"center\",\r\n    borderRadius: 6,\r\n    flex: 1,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n  },\r\n  unitText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n  unitsToggle: {\r\n    backgroundColor: Colors.border,\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    padding: 2,\r\n  },\r\n  versionContainer: {\r\n    alignItems: \"center\",\r\n    padding: 24,\r\n  },\r\n  versionText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\app\\tabs\\transit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'screenHeight' is assigned a value but never used.","line":11,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":49},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":69,"column":23,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":69,"endColumn":39},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":173,"column":37,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":173,"endColumn":53},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFF9E6' }","line":220,"column":19,"nodeType":"ObjectExpression","endLine":226,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":254,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":254,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":261,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":261,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":267,"column":13,"nodeType":"ObjectExpression","endLine":271,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":280,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":280,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":286,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":286,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":335,"column":30,"nodeType":"ObjectExpression","endLine":337,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":339,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":339,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":354,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":354,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":382,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":382,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":396,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":396,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":401,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":401,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":404,"column":14,"nodeType":"ObjectExpression","endLine":417,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, MapPin, AlertCircle, Bell } from \"lucide-react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, ScrollView, Pressable, Dimensions, Platform } from \"react-native\";\n\r\nimport LiveArrivalsCard from \"@/components/LiveArrivalsCard\";\r\nimport SearchBar from \"@/components/SearchBar\";\r\nimport Colors from \"@/constants/colors\";\r\nimport { mockLiveArrivals, nearbyStations } from \"@/mocks/liveArrivals\";\r\nimport { subwayLines } from \"@/mocks/transit\";\r\n\r\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\r\n\r\ntype SubwayStatus = {\r\n  id: string;\r\n  name: string;\r\n  status: string;\r\n  message: string;\r\n};\r\n\r\nexport default function TransitScreen() {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [selectedLine, setSelectedLine] = useState<string | null>(null);\r\n  const [selectedStation, setSelectedStation] = useState<string | null>(\"main-st-station\");\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const [lastRefresh, setLastRefresh] = useState(new Date());\r\n\r\n  // Auto-refresh arrivals every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      handleRefreshArrivals();\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleRefreshArrivals = () => {\r\n    setIsRefreshing(true);\r\n    setLastRefresh(new Date());\r\n    \r\n    // Simulate API call delay\r\n    setTimeout(() => {\r\n      setIsRefreshing(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const getTimeAgo = (date: Date) => {\r\n    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);\r\n    if (seconds < 60) return `${seconds} sec ago`;\r\n    const minutes = Math.floor(seconds / 60);\r\n    return `${minutes} min ago`;\r\n  };\r\n\r\n  // Mock subway status data\r\n  const subwayStatus: SubwayStatus[] = [\r\n    { id: \"a\", name: \"A\", status: \"normal\", message: \"Good service\" },\r\n    { id: \"b\", name: \"B\", status: \"delayed\", message: \"Delays of 10-15 minutes\" },\r\n    { id: \"c\", name: \"C\", status: \"normal\", message: \"Good service\" },\r\n    { id: \"d\", name: \"D\", status: \"normal\", message: \"Good service\" },\r\n    { id: \"e\", name: \"E\", status: \"alert\", message: \"Service changes this weekend\" },\r\n    { id: \"f\", name: \"F\", status: \"normal\", message: \"Good service\" },\r\n    { id: \"g\", name: \"G\", status: \"normal\", message: \"Good service\" },\r\n  ];\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"normal\": return Colors.success;\r\n      case \"delayed\": return Colors.warning;\r\n      case \"alert\": return Colors.error;\r\n      default: return Colors.textLight;\r\n    }\r\n  };\r\n\r\n  const renderStationButton = (station: typeof nearbyStations[0]) => (\r\n    <Pressable\r\n      key={station.id}\r\n      style={[\r\n        styles.stationButton,\r\n        selectedStation === station.id && styles.selectedStationButton\r\n      ]}\r\n      onPress={() => setSelectedStation(station.id)}\r\n    >\r\n      <Text style={[\r\n        styles.stationButtonText,\r\n        selectedStation === station.id && styles.selectedStationButtonText\r\n      ]}>\r\n        {station.name}\r\n      </Text>\r\n      <Text style={styles.stationDistance}>{station.distance}</Text>\r\n    </Pressable>\r\n  );\r\n\r\n  const renderLineItem = (item: typeof subwayLines[0]) => {\r\n    const status = subwayStatus.find(s => s.id === item.id);\r\n    \r\n    return (\r\n      <Pressable\r\n        key={item.id}\r\n        style={[\r\n          styles.lineItem,\r\n          selectedLine === item.id && styles.selectedLine\r\n        ]}\r\n        onPress={() => setSelectedLine(item.id)}\r\n      >\r\n        <View style={[styles.lineCircle, { backgroundColor: item.color }]}>\r\n          <Text style={styles.lineText}>{item.name}</Text>\r\n        </View>\r\n        <View style={styles.statusContainer}>\r\n          <View style={[styles.statusDot, { backgroundColor: getStatusColor(status?.status || 'normal') }]} />\r\n          <Text style={styles.statusText}>{status?.message || 'No information available'}</Text>\r\n        </View>\r\n      </Pressable>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ScrollView \r\n      style={styles.container}\r\n      contentContainerStyle={styles.scrollContent}\r\n      showsVerticalScrollIndicator={false}\r\n      bounces={true}\r\n    >\r\n      <View style={styles.searchContainer}>\r\n        <SearchBar\r\n          value={searchQuery}\r\n          onChangeText={setSearchQuery}\r\n          onClear={() => setSearchQuery(\"\")}\r\n          placeholder=\"Search for subway or train lines\"\r\n        />\r\n      </View>\r\n\r\n      <Text style={styles.sectionTitle}>Live Arrivals</Text>\r\n      <ScrollView \r\n        horizontal \r\n        showsHorizontalScrollIndicator={false}\r\n        style={styles.stationsScroll}\r\n        contentContainerStyle={styles.stationsContainer}\r\n      >\r\n        {nearbyStations.map(renderStationButton)}\r\n      </ScrollView>\r\n\r\n      {selectedStation && (\r\n        <LiveArrivalsCard\r\n          stationName={nearbyStations.find(s => s.id === selectedStation)?.name || \"Station\"}\r\n          arrivals={mockLiveArrivals[selectedStation] || []}\r\n          lastUpdated={getTimeAgo(lastRefresh)}\r\n          onRefresh={handleRefreshArrivals}\r\n          isRefreshing={isRefreshing}\r\n        />\r\n      )}\r\n\r\n      <View style={styles.quickActionsContainer}>\r\n        <Text style={styles.sectionTitle}>Quick Actions</Text>\r\n        <View style={styles.quickActions}>\r\n          <Pressable style={styles.quickActionButton}>\r\n            <Bell size={20} color={Colors.primary} />\r\n            <Text style={styles.quickActionText}>Set Alerts</Text>\r\n          </Pressable>\r\n          <Pressable style={styles.quickActionButton}>\r\n            <MapPin size={20} color={Colors.primary} />\r\n            <Text style={styles.quickActionText}>Find Station</Text>\r\n          </Pressable>\r\n          <Pressable style={styles.quickActionButton}>\r\n            <Clock size={20} color={Colors.primary} />\r\n            <Text style={styles.quickActionText}>Schedule</Text>\r\n          </Pressable>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.statusSummaryContainer}>\r\n        <View style={styles.statusHeader}>\r\n          <Text style={styles.sectionTitle}>Subway Status</Text>\r\n          <View style={styles.timeContainer}>\r\n            <Clock size={14} color={Colors.textLight} />\r\n            <Text style={styles.timeText}>Updated 5 min ago</Text>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.alertContainer}>\r\n          <AlertCircle size={20} color={Colors.warning} style={styles.alertIcon} />\r\n          <Text style={styles.alertText}>\r\n            Some lines are experiencing delays or service changes\r\n          </Text>\r\n        </View>\r\n      </View>\r\n\r\n      <Text style={styles.sectionTitle}>Subway Lines</Text>\r\n      <View style={styles.linesContainer}>\r\n        {subwayLines.map(renderLineItem)}\r\n      </View>\r\n\r\n      {selectedLine && (\r\n        <View style={styles.lineDetailsContainer}>\r\n          <Text style={styles.detailsTitle}>\r\n            Line {subwayLines.find(l => l.id === selectedLine)?.name} Details\r\n          </Text>\r\n          <View style={styles.nextTrainsContainer}>\r\n            <Text style={styles.nextTrainsTitle}>Next trains:</Text>\r\n            <View style={styles.trainTimesContainer}>\r\n              <View style={styles.trainTime}>\r\n                <Text style={styles.trainTimeText}>3 min</Text>\r\n                <Text style={styles.trainDirectionText}>Uptown</Text>\r\n              </View>\r\n              <View style={styles.trainTime}>\r\n                <Text style={styles.trainTimeText}>7 min</Text>\r\n                <Text style={styles.trainDirectionText}>Downtown</Text>\r\n              </View>\r\n              <View style={styles.trainTime}>\r\n                <Text style={styles.trainTimeText}>12 min</Text>\r\n                <Text style={styles.trainDirectionText}>Uptown</Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  alertContainer: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#FFF9E6\",\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    padding: 12,\r\n  },\r\n  alertIcon: {\r\n    marginRight: 8,\r\n  },\r\n  alertText: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  detailsTitle: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 12,\r\n  },\r\n  lineCircle: {\r\n    alignItems: \"center\",\r\n    borderRadius: 18,\r\n    height: 36,\r\n    justifyContent: \"center\",\r\n    marginRight: 16,\r\n    width: 36,\r\n  },\r\n  lineDetailsContainer: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    marginTop: 8,\r\n    padding: 16,\r\n  },\r\n  lineItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  lineText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 16,\r\n    fontWeight: \"700\",\r\n  },\r\n  linesContainer: {\r\n    gap: 12,\r\n    marginBottom: 16,\r\n  },\r\n  nextTrainsContainer: {\r\n    marginTop: 8,\r\n  },\r\n  nextTrainsTitle: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    marginBottom: 8,\r\n  },\r\n  quickActionButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flex: Platform.select({\r\n      web: screenWidth > 768 ? 1 : undefined,\r\n      default: 1,\r\n    }),\r\n    gap: 8,\r\n    minHeight: 80,\r\n    padding: 16,\r\n  },\r\n  quickActionText: {\r\n    color: Colors.text,\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n    textAlign: \"center\",\r\n  },\r\n  quickActions: {\r\n    flexDirection: Platform.select({\r\n      web: screenWidth > 768 ? \"row\" : \"column\",\r\n      default: \"row\",\r\n    }),\r\n    gap: 12,\r\n    justifyContent: \"space-between\",\r\n  },\r\n  quickActionsContainer: {\r\n    marginBottom: 16,\r\n  },\r\n  scrollContent: {\r\n    flexGrow: 1,\r\n    padding: 16,\r\n    paddingBottom: 32,\r\n  },\r\n  searchContainer: {\r\n    marginBottom: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  selectedLine: {\r\n    borderColor: Colors.primary,\r\n    borderWidth: 2,\r\n  },\r\n  selectedStationButton: {\r\n    backgroundColor: Colors.primary,\r\n    borderColor: Colors.primary,\r\n  },\r\n  selectedStationButtonText: {\r\n    color: \"#FFFFFF\",\r\n  },\r\n  stationButton: {\r\n    backgroundColor: Colors.card,\r\n    borderColor: Colors.border,\r\n    borderRadius: 12,\r\n    borderWidth: 1,\r\n    minWidth: 140,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 12,\r\n  },\r\n  stationButtonText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  stationDistance: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  stationsContainer: {\r\n    gap: 12,\r\n    paddingHorizontal: 4,\r\n  },\r\n  stationsScroll: {\r\n    marginBottom: 16,\r\n  },\r\n  statusContainer: {\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  statusDot: {\r\n    borderRadius: 5,\r\n    height: 10,\r\n    marginRight: 8,\r\n    width: 10,\r\n  },\r\n  statusHeader: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 12,\r\n  },\r\n  statusSummaryContainer: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    marginBottom: 24,\r\n    padding: 16,\r\n  },\r\n  statusText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n  },\r\n  timeContainer: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  timeText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginLeft: 4,\r\n  },\r\n  trainDirectionText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  trainTime: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderRadius: 8,\r\n    flex: Platform.select({\r\n      web: screenWidth > 600 ? 1 : undefined,\r\n      default: 1,\r\n    }),\r\n    minWidth: Platform.select({\r\n      web: screenWidth > 600 ? 80 : \"100%\",\r\n      default: 80,\r\n    }),\r\n    padding: 12,\r\n  },\r\n  trainTimeText: {\r\n    color: Colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: \"700\",\r\n    marginBottom: 4,\r\n  },\r\n  trainTimesContainer: {\r\n    flexDirection: Platform.select({\r\n      web: screenWidth > 600 ? \"row\" : \"column\",\r\n      default: \"row\",\r\n    }),\r\n    gap: 8,\r\n    justifyContent: \"space-between\",\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\babel.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = function (api) {\r\n    api.cache(true);\r\n    return {\r\n        presets: ['babel-preset-expo'],\r\n        plugins: [\r\n            'react-native-reanimated/plugin',\r\n        ],\r\n    };\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\AIJourneyCompanion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentLocation' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messages' is assigned a value but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateJourneyContent' and 'startCompanionAnimation'. Either include them or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [isNavigating, destination, generateJourneyContent, startCompanionAnimation]","fix":{"range":[1266,1293],"text":"[isNavigating, destination, generateJourneyContent, startCompanionAnimation]"}}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":184,"column":39,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":184,"endColumn":55},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFFFFF', shadowColor: '#000' }","line":261,"column":14,"nodeType":"ObjectExpression","endLine":270,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bot, Volume2, VolumeX, Sparkles } from 'lucide-react-native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Pressable, Animated } from 'react-native';\n\r\nimport Colors from '@/constants/colors';\r\nimport { Place } from '@/types/navigation';\r\n\r\ntype AIJourneyCompanionProps = {\r\n  currentLocation: { latitude: number; longitude: number };\r\n  destination?: Place;\r\n  isNavigating: boolean;\r\n};\r\n\r\ntype CompanionMessage = {\r\n  id: string;\r\n  text: string;\r\n  type: 'story' | 'quiz' | 'encouragement' | 'safety';\r\n  timestamp: Date;\r\n};\r\n\r\nconst AIJourneyCompanion: React.FC<AIJourneyCompanionProps> = ({\r\n  currentLocation,\r\n  destination,\r\n  isNavigating\r\n}) => {\r\n  const [messages, setMessages] = useState<CompanionMessage[]>([]);\r\n  const [currentMessage, setCurrentMessage] = useState<CompanionMessage | null>(null);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\r\n  const [companionMood, setCompanionMood] = useState<'happy' | 'excited' | 'curious'>('happy');\r\n  const pulseAnim = new Animated.Value(1);\r\n\r\n  useEffect(() => {\r\n    if (isNavigating && destination) {\r\n      generateJourneyContent();\r\n      startCompanionAnimation();\r\n    }\r\n  }, [isNavigating, destination]);\r\n\r\n  const startCompanionAnimation = () => {\r\n    Animated.loop(\r\n      Animated.sequence([\r\n        Animated.timing(pulseAnim, {\r\n          toValue: 1.2,\r\n          duration: 1000,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(pulseAnim, {\r\n          toValue: 1,\r\n          duration: 1000,\r\n          useNativeDriver: true,\r\n        }),\r\n      ])\r\n    ).start();\r\n  };\r\n\r\n  const generateJourneyContent = async () => {\r\n    if (!destination) return;\r\n\r\n    try {\r\n      const response = await fetch('https://toolkit.rork.com/text/llm/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: `You are Buddy, a friendly AI companion for kids using a navigation app. Create engaging, educational, and safe content for a journey to ${destination.name}. Keep responses short (1-2 sentences), age-appropriate, and encouraging. Focus on interesting facts, safety reminders, or fun observations about the area.`\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: `I'm traveling to ${destination.name} in ${destination.address}. Tell me something interesting about this area or give me a fun fact to make the journey more exciting!`\r\n            }\r\n          ]\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      const newMessage: CompanionMessage = {\r\n        id: Date.now().toString(),\r\n        text: data.completion,\r\n        type: 'story',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, newMessage]);\r\n      setCurrentMessage(newMessage);\r\n      setCompanionMood('excited');\r\n    } catch (error) {\r\n      console.log('AI companion error:', error);\r\n      // Fallback to predefined messages\r\n      const fallbackMessage: CompanionMessage = {\r\n        id: Date.now().toString(),\r\n        text: `Great choice going to ${destination.name}! I bet you'll discover something amazing there. Stay safe and enjoy your adventure! ≡ƒîƒ`,\r\n        type: 'encouragement',\r\n        timestamp: new Date()\r\n      };\r\n      setCurrentMessage(fallbackMessage);\r\n    }\r\n  };\r\n\r\n  const generateQuiz = async () => {\r\n    if (!destination) return;\r\n\r\n    try {\r\n      const response = await fetch('https://toolkit.rork.com/text/llm/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          messages: [\r\n            {\r\n              role: 'system',\r\n              content: 'Create a simple, fun quiz question for kids about the area they\\'re visiting. Make it educational but easy to understand. Include the answer.'\r\n            },\r\n            {\r\n              role: 'user',\r\n              content: `Create a quiz question about ${destination.name} or the ${destination.category} category in general.`\r\n            }\r\n          ]\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      const quizMessage: CompanionMessage = {\r\n        id: Date.now().toString(),\r\n        text: `≡ƒºá Quiz Time! ${data.completion}`,\r\n        type: 'quiz',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, quizMessage]);\r\n      setCurrentMessage(quizMessage);\r\n      setCompanionMood('curious');\r\n    } catch (error) {\r\n      console.log('Quiz generation error:', error);\r\n    }\r\n  };\r\n\r\n  const getMoodEmoji = () => {\r\n    switch (companionMood) {\r\n      case 'excited': return '≡ƒñ⌐';\r\n      case 'curious': return '≡ƒñö';\r\n      default: return '≡ƒÿè';\r\n    }\r\n  };\r\n\r\n  if (!isNavigating || !currentMessage) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Pressable \r\n        style={styles.companionButton}\r\n        onPress={() => setIsExpanded(!isExpanded)}\r\n      >\r\n        <Animated.View \r\n          style={[styles.avatar, { transform: [{ scale: pulseAnim }] }]}\r\n        >\r\n          <Text style={styles.avatarEmoji}>{getMoodEmoji()}</Text>\r\n          <Bot size={16} color={'#FFFFFF'} style={styles.botIcon} />\r\n        </Animated.View>\r\n        \r\n        <View style={styles.messagePreview}>\r\n          <Text style={styles.companionName}>Buddy</Text>\r\n          <Text style={styles.messageText} numberOfLines={1}>\r\n            {currentMessage.text}\r\n          </Text>\r\n        </View>\r\n\r\n        <Pressable \r\n          style={styles.voiceButton}\r\n          onPress={() => setVoiceEnabled(!voiceEnabled)}\r\n        >\r\n          {voiceEnabled ? (\r\n            <Volume2 size={16} color={Colors.primary} />\r\n          ) : (\r\n            <VolumeX size={16} color={Colors.textLight} />\r\n          )}\r\n        </Pressable>\r\n      </Pressable>\r\n\r\n      {isExpanded && (\r\n        <View style={styles.expandedContent}>\r\n          <Text style={styles.fullMessage}>{currentMessage.text}</Text>\r\n          \r\n          <View style={styles.actionButtons}>\r\n            <Pressable style={styles.actionButton} onPress={generateQuiz}>\r\n              <Sparkles size={16} color={Colors.primary} />\r\n              <Text style={styles.actionButtonText}>Quiz Me!</Text>\r\n            </Pressable>\r\n            \r\n            <Pressable style={styles.actionButton} onPress={generateJourneyContent}>\r\n              <Bot size={16} color={Colors.primary} />\r\n              <Text style={styles.actionButtonText}>Tell Me More</Text>\r\n            </Pressable>\r\n          </View>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    flex: 1,\r\n  flexDirection: 'row',\r\n    gap: 6,\r\n    justifyContent: 'center',\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 12,\r\n  },\r\n  actionButtonText: {\r\n    color: Colors.primary,\r\n    fontSize: 12,\r\n    fontWeight: '600',\r\n  },\r\n  actionButtons: {\r\n    flexDirection: 'row',\r\n    gap: 12,\r\n  },\r\n  avatar: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 24,\r\n    height: 48,\r\n    justifyContent: 'center',\r\n    marginRight: 12,\r\n    position: 'relative',\r\n    width: 48,\r\n  },\r\n  avatarEmoji: {\r\n    fontSize: 20,\r\n    position: 'absolute',\r\n    right: -4,\r\n    top: -4,\r\n  },\r\n  botIcon: {\r\n    opacity: 0.8,\r\n  },\r\n  companionButton: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    padding: 16,\r\n  },\r\n  companionName: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    marginBottom: 2,\r\n  },\r\n  container: {\r\n    backgroundColor: '#FFFFFF',\r\n  borderRadius: 16,\r\n    elevation: 4,\r\n    margin: 16,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 8,\r\n  },\r\n  expandedContent: {\r\n    borderTopColor: Colors.border,\r\n    borderTopWidth: 1,\r\n    paddingBottom: 16,\r\n    paddingHorizontal: 16,\r\n  },\r\n  fullMessage: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n    marginBottom: 16,\r\n  },\r\n  messagePreview: {\r\n    flex: 1,\r\n  },\r\n  messageText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    lineHeight: 18,\r\n  },\r\n  voiceButton: {\r\n    padding: 8,\r\n  },\r\n});\r\n\r\nexport default AIJourneyCompanion;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\AccessibilitySettings.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":133,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":133,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":136,"column":16,"nodeType":"ObjectExpression","endLine":144,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":147,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":147,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Eye, Volume2, Zap, Settings, ArrowLeft } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Switch, ScrollView, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useNavigationStore } from \"@/stores/navigationStore\";\r\n\r\ntype AccessibilitySettingsProps = {\r\n  onBack?: () => void;\r\n};\r\n\r\nconst AccessibilitySettings: React.FC<AccessibilitySettingsProps> = ({ onBack }) => {\r\n  const { accessibilitySettings, updateAccessibilitySettings } = useNavigationStore();\r\n\r\n  const SettingItem = ({ \r\n    icon, \r\n    title, \r\n    description, \r\n    value, \r\n    onValueChange \r\n  }: {\r\n    icon: React.ReactNode;\r\n    title: string;\r\n    description: string;\r\n    value: boolean;\r\n    onValueChange: (value: boolean) => void;\r\n  }) => (\r\n    <View style={styles.settingItem}>\r\n      <View style={styles.settingIcon}>{icon}</View>\r\n      <View style={styles.settingContent}>\r\n        <Text style={[styles.settingTitle, accessibilitySettings.largeText && styles.largeText]}>\r\n          {title}\r\n        </Text>\r\n        <Text style={[styles.settingDescription, accessibilitySettings.largeText && styles.largeDescription]}>\r\n          {description}\r\n        </Text>\r\n      </View>\r\n      <Switch\r\n        value={value}\r\n        onValueChange={onValueChange}\r\n        trackColor={{ false: \"#E0E0E0\", true: Colors.primary }}\r\n        thumbColor=\"#FFFFFF\"\r\n      />\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      {onBack && (\r\n        <Pressable style={styles.backButton} onPress={onBack}>\r\n          <ArrowLeft size={20} color={Colors.primary} />\r\n          <Text style={styles.backText}>Back to Settings</Text>\r\n        </Pressable>\r\n      )}\r\n      \r\n      <Text style={[styles.sectionTitle, accessibilitySettings.largeText && styles.largeSectionTitle]}>\r\n        Accessibility Settings\r\n      </Text>\r\n      \r\n      <SettingItem\r\n        icon={<Eye size={24} color={Colors.primary} />}\r\n        title=\"Large Text\"\r\n        description=\"Make text bigger and easier to read\"\r\n        value={accessibilitySettings.largeText}\r\n        onValueChange={(value) => updateAccessibilitySettings({ largeText: value })}\r\n      />\r\n      \r\n      <SettingItem\r\n        icon={<Settings size={24} color={Colors.primary} />}\r\n        title=\"High Contrast\"\r\n        description=\"Use colors that are easier to see\"\r\n        value={accessibilitySettings.highContrast}\r\n        onValueChange={(value) => updateAccessibilitySettings({ highContrast: value })}\r\n      />\r\n      \r\n      <SettingItem\r\n        icon={<Volume2 size={24} color={Colors.primary} />}\r\n        title=\"Voice Descriptions\"\r\n        description=\"Hear descriptions of what's on screen\"\r\n        value={accessibilitySettings.voiceDescriptions}\r\n        onValueChange={(value) => updateAccessibilitySettings({ voiceDescriptions: value })}\r\n      />\r\n      \r\n      <SettingItem\r\n        icon={<Zap size={24} color={Colors.primary} />}\r\n        title=\"Simplified Mode\"\r\n        description=\"Show only the most important features\"\r\n        value={accessibilitySettings.simplifiedMode}\r\n        onValueChange={(value) => updateAccessibilitySettings({ simplifiedMode: value })}\r\n      />\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  backButton: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 16,\r\n    paddingHorizontal: 4,\r\n    paddingVertical: 12,\r\n  },\r\n  backText: {\r\n    color: Colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginLeft: 8,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  largeDescription: {\r\n    fontSize: 16,\r\n  },\r\n  largeSectionTitle: {\r\n    fontSize: 24,\r\n  },\r\n  largeText: {\r\n    fontSize: 20,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  settingContent: {\r\n    flex: 1,\r\n  },\r\n  settingDescription: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  settingIcon: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderRadius: 20,\r\n    height: 40,\r\n    justifyContent: \"center\",\r\n    marginRight: 16,\r\n    width: 40,\r\n  },\r\n  settingItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  settingTitle: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n});\r\n\r\nexport default AccessibilitySettings;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\AccessibleButton.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: 'transparent' }","line":94,"column":18,"nodeType":"ObjectExpression","endLine":98,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":110,"column":16,"nodeType":"ObjectExpression","endLine":114,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":118,"column":18,"nodeType":"ObjectExpression","endLine":122,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\r\nimport { Pressable, Text, StyleSheet, ViewStyle, TextStyle } from \"react-native\";\n\r\nimport { theme } from \"@/constants/theme\";\r\nimport { getAccessibilityLabel, getAccessibilityHint } from \"@/utils/accessibility\";\r\nimport { auditTouchTarget } from \"@/utils/touchTargetAudit\";\r\n\r\ntype AccessibleButtonProps = {\r\n  title: string;\r\n  onPress: () => void;\r\n  style?: ViewStyle;\r\n  textStyle?: TextStyle;\r\n  disabled?: boolean;\r\n  accessibilityLabel?: string;\r\n  accessibilityHint?: string;\r\n  variant?: \"primary\" | \"secondary\" | \"outline\";\r\n};\r\n\r\nconst AccessibleButton: React.FC<AccessibleButtonProps> = ({\r\n  title,\r\n  onPress,\r\n  style,\r\n  textStyle,\r\n  disabled = false,\r\n  accessibilityLabel,\r\n  accessibilityHint,\r\n  variant = \"primary\",\r\n}) => {\r\n  const getButtonStyle = () => {\r\n    switch (variant) {\r\n      case \"primary\":\r\n        return styles.primaryButton;\r\n      case \"secondary\":\r\n        return styles.secondaryButton;\r\n      case \"outline\":\r\n        return styles.outlineButton;\r\n    }\r\n  };\r\n\r\n  const getTextStyle = () => {\r\n    switch (variant) {\r\n      case \"primary\":\r\n        return styles.primaryText;\r\n      case \"secondary\":\r\n        return styles.secondaryText;\r\n      case \"outline\":\r\n        return styles.outlineText;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    auditTouchTarget({ name: 'AccessibleButton', minHeight: 48 });\r\n  }, []);\r\n\r\n  return (\r\n    <Pressable\r\n      style={({ pressed }) => [\r\n        styles.button,\r\n        getButtonStyle(),\r\n        disabled && styles.disabled,\r\n        pressed && styles.pressed,\r\n        style,\r\n      ]}\r\n      onPress={onPress}\r\n      disabled={disabled}\r\n      accessible={true}\r\n      accessibilityRole=\"button\"\r\n      accessibilityLabel={accessibilityLabel || getAccessibilityLabel(title)}\r\n      accessibilityHint={accessibilityHint || getAccessibilityHint(\"activate\")}\r\n      accessibilityState={{ disabled }}\r\n    >\r\n      <Text style={[getTextStyle(), disabled && styles.disabledText, textStyle]}>\r\n        {title}\r\n      </Text>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    alignItems: \"center\",\r\n    borderRadius: 8,\r\n    justifyContent: \"center\",\r\n    minHeight: 48,\r\n    paddingHorizontal: 24,\r\n  paddingVertical: 12, // Updated to meet recommended 48x48 minimum\r\n  },\r\n  disabled: {\r\n    opacity: 0.5,\r\n  },\r\n  disabledText: {\r\n    color: theme.colors.textSecondary || '#888888',\r\n  },\r\n  outlineButton: {\r\n    backgroundColor: \"transparent\",\r\n    borderColor: theme.colors.primary,\r\n    borderWidth: 2,\r\n  },\r\n  outlineText: {\r\n    color: theme.colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  pressed: {\r\n    opacity: 0.8,\r\n  },\r\n  primaryButton: {\r\n    backgroundColor: theme.colors.primary,\r\n  },\r\n  primaryText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  secondaryButton: {\r\n    backgroundColor: theme.colors.secondary,\r\n  },\r\n  secondaryText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default AccessibleButton;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\AchievementBadge.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'View' is defined but never used.","line":3,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":32},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":51,"column":32,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":51,"endColumn":48},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":75,"column":14,"nodeType":"ObjectExpression","endLine":87,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":92,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":92,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Star, Lock } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { Achievement } from \"@/types/gamification\";\r\n\r\ntype AchievementBadgeProps = {\r\n  achievement: Achievement;\r\n  onPress?: () => void;\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n};\r\n\r\nconst AchievementBadge: React.FC<AchievementBadgeProps> = ({ \r\n  achievement, \r\n  onPress,\r\n  size = \"medium\" \r\n}) => {\r\n  const getDimensions = () => {\r\n    switch (size) {\r\n      case \"small\": return { width: 60, height: 60, fontSize: 20, textSize: 10 };\r\n      case \"medium\": return { width: 80, height: 80, fontSize: 28, textSize: 12 };\r\n      case \"large\": return { width: 100, height: 100, fontSize: 36, textSize: 14 };\r\n    }\r\n  };\r\n\r\n  const dimensions = getDimensions();\r\n\r\n  return (\r\n    <Pressable\r\n      style={({ pressed }) => [\r\n        styles.container,\r\n        {\r\n          width: dimensions.width,\r\n          height: dimensions.height,\r\n          backgroundColor: achievement.unlocked ? Colors.secondary : Colors.border\r\n        },\r\n        pressed && styles.pressed\r\n      ]}\r\n      onPress={onPress}\r\n      disabled={!achievement.unlocked}\r\n    >\r\n      {achievement.unlocked ? (\r\n        <>\r\n          <Text style={[styles.icon, { fontSize: dimensions.fontSize }]}>\r\n            {achievement.icon}\r\n          </Text>\r\n          <Star size={16} color=\"#FFD700\" style={styles.star} />\r\n        </>\r\n      ) : (\r\n        <Lock size={24} color={Colors.textLight} />\r\n      )}\r\n      \r\n      <Text \r\n        style={[\r\n          styles.title, \r\n          { fontSize: dimensions.textSize },\r\n          !achievement.unlocked && styles.lockedText\r\n        ]} \r\n        numberOfLines={2}\r\n      >\r\n        {achievement.title}\r\n      </Text>\r\n      \r\n      {achievement.unlocked && (\r\n        <Text style={[styles.points, { fontSize: dimensions.textSize - 2 }]}>\r\n          +{achievement.points}\r\n        </Text>\r\n      )}\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    borderRadius: 16,\r\n    elevation: 3,\r\n    justifyContent: \"center\",\r\n    margin: 4,\r\n    padding: 8,\r\n    position: \"relative\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n  },\r\n  icon: {\r\n    marginBottom: 4,\r\n  },\r\n  lockedText: {\r\n    color: Colors.textLight,\r\n  },\r\n  points: {\r\n    color: Colors.primary,\r\n    fontWeight: \"700\",\r\n  },\r\n  pressed: {\r\n    opacity: 0.8,\r\n    transform: [{ scale: 0.95 }],\r\n  },\r\n  star: {\r\n    position: \"absolute\",\r\n    right: 4,\r\n    top: 4,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontWeight: \"600\",\r\n    marginBottom: 2,\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default AchievementBadge;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\ArrivalAlert.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":50,"column":31,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":50,"endColumn":47},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFF9E6', shadowColor: '#000' }","line":68,"column":14,"nodeType":"ObjectExpression","endLine":79,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":92,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":92,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bell, X } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport { LiveArrival } from \"./LiveArrivalsCard\";\r\nimport TransitStepIndicator from \"./TransitStepIndicator\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype ArrivalAlertProps = {\r\n  arrival: LiveArrival;\r\n  onDismiss: () => void;\r\n};\r\n\r\nconst ArrivalAlert: React.FC<ArrivalAlertProps> = ({ arrival, onDismiss }) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.content}>\r\n        <View style={styles.iconContainer}>\r\n          <Bell size={20} color={Colors.warning} />\r\n        </View>\r\n        \r\n        <View style={styles.alertInfo}>\r\n          <View style={styles.trainInfo}>\r\n            <TransitStepIndicator \r\n              step={{\r\n                id: arrival.id,\r\n                type: arrival.type,\r\n                line: arrival.line,\r\n                color: arrival.color,\r\n                from: \"\",\r\n                to: \"\",\r\n                duration: 0\r\n              }}\r\n              size=\"small\"\r\n            />\r\n            <Text style={styles.alertText}>\r\n              Line {arrival.line} to {arrival.destination} is arriving now!\r\n            </Text>\r\n          </View>\r\n          \r\n          {arrival.platform && (\r\n            <Text style={styles.platformText}>\r\n              Platform {arrival.platform}\r\n            </Text>\r\n          )}\r\n        </View>\r\n        \r\n        <Pressable style={styles.dismissButton} onPress={onDismiss}>\r\n          <X size={16} color={Colors.textLight} />\r\n        </Pressable>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  alertInfo: {\r\n    flex: 1,\r\n  },\r\n  alertText: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n    marginLeft: 8,\r\n  },\r\n  container: {\r\n    backgroundColor: \"#FFF9E6\",\r\n    borderLeftColor: Colors.warning,\r\n    borderLeftWidth: 4,\r\n    borderRadius: 8,\r\n    elevation: 3,\r\n    margin: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n  },\r\n  content: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    padding: 16,\r\n  },\r\n  dismissButton: {\r\n    padding: 4,\r\n  },\r\n  iconContainer: {\r\n    marginRight: 12,\r\n  },\r\n  platformText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginLeft: 32,\r\n  },\r\n  trainInfo: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 4,\r\n  },\r\n});\r\n\r\nexport default ArrivalAlert;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\CategoryButton.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":2,"message":"Inline style: { fontSize: \"size === 'small' ? 12 : size === 'medium' ? 14 : 16\" }","line":138,"column":34,"nodeType":"ObjectExpression","endLine":138,"endColumn":99},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":150,"column":14,"nodeType":"ObjectExpression","endLine":160,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFF', textShadowColor: 'rgba(0,0,0,0.3)' }","line":168,"column":9,"nodeType":"ObjectExpression","endLine":175,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \r\n  Home, GraduationCap, BookOpen, Trees, ShoppingBag, Pizza, Users, Heart, MapPin,\r\n  Car, Bike, Bus, Train, Plane, Hospital, Church, Building, Gamepad2, Music,\r\n  Camera, Gift, Coffee, Apple, Dumbbell, Palette, Star, Sun, Moon, Cloud,\r\n  Umbrella, Flower\r\n} from \"lucide-react-native\";\r\nimport React, { useEffect } from \"react\";\r\nimport { StyleSheet, Text, Pressable, View } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { PlaceCategory, CustomCategory } from \"@/types/navigation\";\r\nimport { auditTouchTarget } from \"@/utils/touchTargetAudit\";\r\n\r\ntype CategoryButtonProps = {\r\n  category?: PlaceCategory;\r\n  customCategory?: CustomCategory;\r\n  onPress: (category: PlaceCategory | string) => void;\r\n  size?: 'small' | 'medium' | 'large';\r\n};\r\n\r\nconst CategoryButtonComponent: React.FC<CategoryButtonProps> = ({ \r\n  category, \r\n  customCategory, \r\n  onPress, \r\n  size = 'large' \r\n}) => {\r\n  const getIcon = (iconName: string, iconSize: number) => {\r\n    const iconProps = { size: iconSize, color: \"#FFF\" };\r\n    \r\n    switch (iconName) {\r\n      case \"Home\": return <Home {...iconProps} />;\r\n      case \"GraduationCap\": return <GraduationCap {...iconProps} />;\r\n      case \"BookOpen\": return <BookOpen {...iconProps} />;\r\n      case \"Trees\": return <Trees {...iconProps} />;\r\n      case \"ShoppingBag\": return <ShoppingBag {...iconProps} />;\r\n      case \"Pizza\": return <Pizza {...iconProps} />;\r\n      case \"Users\": return <Users {...iconProps} />;\r\n      case \"Heart\": return <Heart {...iconProps} />;\r\n      case \"Car\": return <Car {...iconProps} />;\r\n      case \"Bike\": return <Bike {...iconProps} />;\r\n      case \"Bus\": return <Bus {...iconProps} />;\r\n      case \"Train\": return <Train {...iconProps} />;\r\n      case \"Plane\": return <Plane {...iconProps} />;\r\n      case \"Hospital\": return <Hospital {...iconProps} />;\r\n      case \"Church\": return <Church {...iconProps} />;\r\n      case \"Building\": return <Building {...iconProps} />;\r\n      case \"Gamepad2\": return <Gamepad2 {...iconProps} />;\r\n      case \"Music\": return <Music {...iconProps} />;\r\n      case \"Camera\": return <Camera {...iconProps} />;\r\n      case \"Gift\": return <Gift {...iconProps} />;\r\n      case \"Coffee\": return <Coffee {...iconProps} />;\r\n      case \"Apple\": return <Apple {...iconProps} />;\r\n      case \"Dumbbell\": return <Dumbbell {...iconProps} />;\r\n      case \"Palette\": return <Palette {...iconProps} />;\r\n      case \"Star\": return <Star {...iconProps} />;\r\n      case \"Sun\": return <Sun {...iconProps} />;\r\n      case \"Moon\": return <Moon {...iconProps} />;\r\n      case \"Cloud\": return <Cloud {...iconProps} />;\r\n      case \"Umbrella\": return <Umbrella {...iconProps} />;\r\n      case \"Flower\": return <Flower {...iconProps} />;\r\n      default: return <MapPin {...iconProps} />;\r\n    }\r\n  };\r\n\r\n  const getSizeStyles = () => {\r\n    switch (size) {\r\n      case 'small':\r\n        return { width: 80, height: 80, iconSize: 24 };\r\n      case 'medium':\r\n        return { width: 100, height: 100, iconSize: 28 };\r\n      case 'large':\r\n        return { width: 120, height: 120, iconSize: 36 };\r\n      default:\r\n        return { width: 120, height: 120, iconSize: 36 };\r\n    }\r\n  };\r\n\r\n  const sizeStyles = getSizeStyles();\r\n  \r\n  // Use custom category data if provided, otherwise fall back to default category\r\n  const displayName = customCategory ? customCategory.name : (category ? category.charAt(0).toUpperCase() + category.slice(1) : 'Other');\r\n  const iconName = customCategory ? customCategory.icon : getDefaultIcon(category || 'other');\r\n  const backgroundColor = customCategory ? customCategory.color : getDefaultColor(category || 'other');\r\n  const categoryId = customCategory ? customCategory.id : category;\r\n\r\n  function getDefaultIcon(cat: PlaceCategory): string {\r\n    switch (cat) {\r\n      case \"home\": return \"Home\";\r\n      case \"school\": return \"GraduationCap\";\r\n      case \"library\": return \"BookOpen\";\r\n      case \"park\": return \"Trees\";\r\n      case \"store\": return \"ShoppingBag\";\r\n      case \"restaurant\": return \"Pizza\";\r\n      case \"friend\": return \"Users\";\r\n      case \"family\": return \"Heart\";\r\n      default: return \"MapPin\";\r\n    }\r\n  }\r\n\r\n  function getDefaultColor(cat: PlaceCategory): string {\r\n    switch (cat) {\r\n      case \"home\": return Colors.primary;\r\n      case \"school\": return \"#FF9500\";\r\n      case \"library\": return \"#9C27B0\";\r\n      case \"park\": return Colors.secondary;\r\n      case \"store\": return \"#4285F4\";\r\n      case \"restaurant\": return \"#FF6B6B\";\r\n      case \"friend\": return \"#00BCD4\";\r\n      case \"family\": return \"#FF4081\";\r\n      default: return Colors.primary;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    auditTouchTarget({ name: 'CategoryButton', width: sizeStyles.width, height: sizeStyles.height, hitSlop: 8 });\r\n  }, [sizeStyles.width, sizeStyles.height]);\r\n\r\n  return (\r\n    <Pressable\r\n      accessibilityRole=\"button\"\r\n      accessibilityLabel={`${displayName} category button`}\r\n      hitSlop={8}\r\n      style={({ pressed }) => [\r\n        styles.container,\r\n        {\r\n          backgroundColor,\r\n          width: sizeStyles.width,\r\n          height: sizeStyles.height,\r\n        },\r\n        pressed && styles.pressed\r\n      ]}\r\n      onPress={() => onPress(categoryId || 'other')}\r\n      testID={`category-button-${categoryId}`}\r\n    >\r\n      <View style={styles.iconContainer}>\r\n        {getIcon(iconName, sizeStyles.iconSize)}\r\n      </View>\r\n      <Text style={[styles.text, { fontSize: size === 'small' ? 12 : size === 'medium' ? 14 : 16 }]}>\r\n        {displayName}\r\n      </Text>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst CategoryButton = React.memo(CategoryButtonComponent, (prev, next) => {\r\n  return prev.customCategory === next.customCategory && prev.category === next.category && prev.size === next.size;\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    borderRadius: 20,\r\n    elevation: 6,\r\n    justifyContent: \"center\",\r\n    margin: 8,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 4 },\r\n    shadowOpacity: 0.15,\r\n    shadowRadius: 8,\r\n  },\r\n  iconContainer: {\r\n    marginBottom: 8,\r\n  },\r\n  pressed: {\r\n    opacity: 0.8,\r\n    transform: [{ scale: 0.95 }],\r\n  },\r\n  text: {\r\n    color: \"#FFF\",\r\n    fontWeight: \"700\",\r\n    textAlign: \"center\",\r\n    textShadowColor: \"rgba(0,0,0,0.3)\",\r\n    textShadowOffset: { width: 0, height: 1 },\r\n    textShadowRadius: 2,\r\n  },\r\n});\r\n\r\nexport default CategoryButton;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\CategoryManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'categories' is assigned a value but never used.","line":22,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":83,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":131,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":144,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":19},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#34C759' }","line":386,"column":18,"nodeType":"ObjectExpression","endLine":388,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":402,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":402,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":409,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":409,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderColor: 'transparent' }","line":424,"column":16,"nodeType":"ObjectExpression","endLine":430,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FF3B30' }","line":438,"column":17,"nodeType":"ObjectExpression","endLine":440,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderColor: 'transparent' }","line":452,"column":15,"nodeType":"ObjectExpression","endLine":457,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":496,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":496,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":513,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":513,"endColumn":33}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ArrowLeft, Plus, Edit3, Trash2, Check, X } from 'lucide-react-native';\r\nimport React, { useState } from 'react';\r\nimport { StyleSheet, Text, View, ScrollView, Pressable, TextInput, Modal, Alert } from 'react-native';\n\r\nimport CategoryButton from './CategoryButton';\r\nimport Toast from './Toast';\n\r\nimport Colors from '@/constants/colors';\r\nimport { CategoryCreateSchema, CategoryUpdateSchema, safeParseWithToast } from '@/core/validation';\r\nimport { useToast } from '@/hooks/useToast';\nimport { useCategoryManagement } from '@/stores/categoryStore';\r\nimport { CustomCategory } from '@/types/navigation';\r\n\r\n\r\ntype CategoryManagementProps = {\r\n  onBack: () => void;\r\n  userMode: 'parent' | 'child';\r\n};\r\n\r\nconst CategoryManagement: React.FC<CategoryManagementProps> = ({ onBack, userMode }) => {\r\n  const {\r\n    categories,\r\n    settings,\r\n    getApprovedCategories,\r\n    getPendingCategories,\r\n    addCategory,\r\n    updateCategory,\r\n    deleteCategory,\r\n    approveCategory,\r\n    getAvailableIcons,\r\n    getAvailableColors,\r\n    canCreateCategory,\r\n    needsApproval,\r\n  } = useCategoryManagement();\r\n\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [editingCategory, setEditingCategory] = useState<CustomCategory | null>(null);\r\n  const [newCategoryName, setNewCategoryName] = useState('');\r\n  const [selectedIcon, setSelectedIcon] = useState('MapPin');\r\n  const [selectedColor, setSelectedColor] = useState('#007AFF');\r\n\r\n  const approvedCategories = getApprovedCategories();\r\n  const { toast, showToast, hideToast } = useToast();\r\n  const pendingCategories = getPendingCategories();\r\n  const availableIcons = getAvailableIcons();\r\n  const availableColors = getAvailableColors();\r\n\r\n  const handleCreateCategory = async () => {\r\n    if (!newCategoryName.trim()) {\r\n      showToast('Please enter a category name', 'error');\r\n      return;\r\n    }\r\n\r\n    if (!canCreateCategory(userMode)) {\r\n      showToast(`Limit reached: max ${settings.maxCustomCategories} custom categories`, 'warning');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const isApproved = !needsApproval(userMode);\r\n      \r\n      const parsed = safeParseWithToast(CategoryCreateSchema, {\r\n        name: newCategoryName.trim(),\r\n        icon: selectedIcon,\r\n        color: selectedColor,\r\n        isDefault: false,\r\n        createdBy: userMode,\r\n        isApproved,\r\n      }, showToast);\r\n      if (!parsed) return;\r\n      await addCategory(parsed);\r\n\r\n      setShowCreateModal(false);\r\n      setNewCategoryName('');\r\n      setSelectedIcon('MapPin');\r\n      setSelectedColor('#007AFF');\r\n\r\n      if (needsApproval(userMode)) {\r\n        showToast('Category created; awaiting approval', 'info');\r\n      } else {\r\n        showToast('Category created', 'success');\r\n      }\r\n    } catch (error) {\r\n      showToast('Failed to create category', 'error');\r\n    }\r\n  };\r\n\r\n  const handleEditCategory = async () => {\r\n    if (!editingCategory || !newCategoryName.trim()) {\r\n      showToast('Please enter a category name', 'error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const parsed = safeParseWithToast(CategoryUpdateSchema, {\r\n        name: newCategoryName.trim(),\r\n        icon: selectedIcon,\r\n        color: selectedColor,\r\n      }, showToast);\r\n      if (!parsed) return;\r\n      await updateCategory(editingCategory.id, parsed);\r\n\r\n      setEditingCategory(null);\r\n      setNewCategoryName('');\r\n      setSelectedIcon('MapPin');\r\n      setSelectedColor('#007AFF');\r\n  showToast('Category updated', 'success');\r\n    } catch (error) {\r\n  showToast('Failed to update category', 'error');\r\n    }\r\n  };\r\n\r\n  const handleDeleteCategory = (category: CustomCategory) => {\r\n    if (category.isDefault) {\r\n      showToast('Default categories cannot be deleted', 'warning');\r\n      return;\r\n    }\r\n\r\n    Alert.alert(\r\n      'Delete Category',\r\n      `Are you sure you want to delete \"${category.name}\"?`,\r\n      [\r\n        { text: 'Cancel', style: 'cancel' },\r\n        {\r\n          text: 'Delete',\r\n          style: 'destructive',\r\n          onPress: async () => {\r\n            try {\r\n              await deleteCategory(category.id);\r\n              showToast('Category deleted', 'success');\r\n            } catch (error) {\r\n              showToast('Failed to delete category', 'error');\r\n            }\r\n          },\r\n        },\r\n      ]\r\n    );\r\n  };\r\n\r\n  const handleApproveCategory = async (categoryId: string) => {\r\n    try {\r\n      await approveCategory(categoryId);\r\n  showToast('Category approved', 'success');\r\n    } catch (error) {\r\n  showToast('Failed to approve category', 'error');\r\n    }\r\n  };\r\n\r\n  const openCreateModal = () => {\r\n    setNewCategoryName('');\r\n    setSelectedIcon('MapPin');\r\n    setSelectedColor('#007AFF');\r\n    setEditingCategory(null);\r\n    setShowCreateModal(true);\r\n  };\r\n\r\n  const openEditModal = (category: CustomCategory) => {\r\n    setNewCategoryName(category.name);\r\n    setSelectedIcon(category.icon);\r\n    setSelectedColor(category.color);\r\n    setEditingCategory(category);\r\n    setShowCreateModal(true);\r\n  };\r\n\r\n  const CategoryModal = () => (\r\n    <Modal\r\n      visible={showCreateModal}\r\n      animationType=\"slide\"\r\n      presentationStyle=\"pageSheet\"\r\n    >\r\n      <View style={styles.modalContainer}>\r\n        <View style={styles.modalHeader}>\r\n          <Pressable onPress={() => setShowCreateModal(false)} style={styles.modalButton}>\r\n            <X size={24} color={Colors.text} />\r\n          </Pressable>\r\n          <Text style={styles.modalTitle}>\r\n            {editingCategory ? 'Edit Category' : 'Create Category'}\r\n          </Text>\r\n          <Pressable \r\n            onPress={editingCategory ? handleEditCategory : handleCreateCategory}\r\n            style={styles.modalButton}\r\n          >\r\n            <Check size={24} color={Colors.primary} />\r\n          </Pressable>\r\n        </View>\r\n\r\n        <ScrollView style={styles.modalContent}>\r\n          <View style={styles.previewContainer}>\r\n            <Text style={styles.sectionTitle}>Preview</Text>\r\n            <CategoryButton\r\n              customCategory={{\r\n                id: 'preview',\r\n                name: newCategoryName || 'Category Name',\r\n                icon: selectedIcon,\r\n                color: selectedColor,\r\n                isDefault: false,\r\n                createdBy: userMode,\r\n                isApproved: true,\r\n                createdAt: Date.now(),\r\n              }}\r\n              onPress={() => {}}\r\n              size=\"medium\"\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.inputSection}>\r\n            <Text style={styles.sectionTitle}>Category Name</Text>\r\n            <TextInput\r\n              style={styles.textInput}\r\n              value={newCategoryName}\r\n              onChangeText={setNewCategoryName}\r\n              placeholder=\"Enter category name\"\r\n              maxLength={20}\r\n            />\r\n          </View>\r\n\r\n          <View style={styles.inputSection}>\r\n            <Text style={styles.sectionTitle}>Choose Icon</Text>\r\n            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.iconScroll}>\r\n              {availableIcons.map((icon) => (\r\n                <Pressable\r\n                  key={icon}\r\n                  style={[\r\n                    styles.iconOption,\r\n                    selectedIcon === icon && styles.selectedIconOption,\r\n                  ]}\r\n                  onPress={() => setSelectedIcon(icon)}\r\n                >\r\n                  <CategoryButton\r\n                    customCategory={{\r\n                      id: 'temp',\r\n                      name: '',\r\n                      icon,\r\n                      color: selectedColor,\r\n                      isDefault: false,\r\n                      createdBy: userMode,\r\n                      isApproved: true,\r\n                      createdAt: Date.now(),\r\n                    }}\r\n                    onPress={() => setSelectedIcon(icon)}\r\n                    size=\"small\"\r\n                  />\r\n                </Pressable>\r\n              ))}\r\n            </ScrollView>\r\n          </View>\r\n\r\n          <View style={styles.inputSection}>\r\n            <Text style={styles.sectionTitle}>Choose Color</Text>\r\n            <View style={styles.colorGrid}>\r\n              {availableColors.map((color) => (\r\n                <Pressable\r\n                  key={color}\r\n                  style={[\r\n                    styles.colorOption,\r\n                    { backgroundColor: color },\r\n                    selectedColor === color && styles.selectedColorOption,\r\n                  ]}\r\n                  onPress={() => setSelectedColor(color)}\r\n                />\r\n              ))}\r\n            </View>\r\n          </View>\r\n        </ScrollView>\r\n      </View>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Pressable onPress={onBack} style={styles.backButton}>\r\n          <ArrowLeft size={24} color={Colors.text} />\r\n        </Pressable>\r\n        <Text style={styles.title}>Manage Categories</Text>\r\n        {canCreateCategory(userMode) && (\r\n          <Pressable onPress={openCreateModal} style={styles.addButton}>\r\n            <Plus size={24} color={Colors.primary} />\r\n          </Pressable>\r\n        )}\r\n      </View>\r\n\r\n      <ScrollView style={styles.content}>\r\n        {userMode === 'parent' && pendingCategories.length > 0 && (\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Pending Approval</Text>\r\n            <Text style={styles.sectionDescription}>\r\n              Categories created by your child that need approval\r\n            </Text>\r\n            {pendingCategories.map((category) => (\r\n              <View key={category.id} style={styles.categoryItem}>\r\n                <CategoryButton\r\n                  customCategory={category}\r\n                  onPress={() => {}}\r\n                  size=\"small\"\r\n                />\r\n                <View style={styles.categoryInfo}>\r\n                  <Text style={styles.categoryName}>{category.name}</Text>\r\n                  <Text style={styles.categoryMeta}>\r\n                    Created {new Date(category.createdAt).toLocaleDateString()}\r\n                  </Text>\r\n                </View>\r\n                <View style={styles.categoryActions}>\r\n                  <Pressable\r\n                    onPress={() => handleApproveCategory(category.id)}\r\n                    style={[styles.actionButton, styles.approveButton]}\r\n                  >\r\n                    <Check size={20} color=\"#FFF\" />\r\n                  </Pressable>\r\n                  <Pressable\r\n                    onPress={() => handleDeleteCategory(category)}\r\n                    style={[styles.actionButton, styles.deleteButton]}\r\n                  >\r\n                    <X size={20} color=\"#FFF\" />\r\n                  </Pressable>\r\n                </View>\r\n              </View>\r\n            ))}\r\n          </View>\r\n        )}\r\n\r\n        <View style={styles.section}>\r\n          <Text style={styles.sectionTitle}>All Categories</Text>\r\n          <Text style={styles.sectionDescription}>\r\n            {userMode === 'parent' \r\n              ? 'Manage all categories available to your child'\r\n              : 'Your available categories'\r\n            }\r\n          </Text>\r\n          {approvedCategories.map((category) => (\r\n            <View key={category.id} style={styles.categoryItem}>\r\n              <CategoryButton\r\n                customCategory={category}\r\n                onPress={() => {}}\r\n                size=\"small\"\r\n              />\r\n              <View style={styles.categoryInfo}>\r\n                <Text style={styles.categoryName}>{category.name}</Text>\r\n                <Text style={styles.categoryMeta}>\r\n                  {category.isDefault ? 'Default' : `Created by ${category.createdBy}`}\r\n                </Text>\r\n              </View>\r\n              {!category.isDefault && (userMode === 'parent' || category.createdBy === userMode) && (\r\n                <View style={styles.categoryActions}>\r\n                  <Pressable\r\n                    onPress={() => openEditModal(category)}\r\n                    style={[styles.actionButton, styles.editButton]}\r\n                  >\r\n                    <Edit3 size={20} color=\"#FFF\" />\r\n                  </Pressable>\r\n                  <Pressable\r\n                    onPress={() => handleDeleteCategory(category)}\r\n                    style={[styles.actionButton, styles.deleteButton]}\r\n                  >\r\n                    <Trash2 size={20} color=\"#FFF\" />\r\n                  </Pressable>\r\n                </View>\r\n              )}\r\n            </View>\r\n          ))}\r\n        </View>\r\n      </ScrollView>\r\n\r\n      <CategoryModal />\r\n      <Toast \r\n        message={toast.message}\r\n        type={toast.type}\r\n        visible={toast.visible}\r\n        onHide={hideToast}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignItems: 'center',\r\n    borderRadius: 18,\r\n    height: 36,\r\n    justifyContent: 'center',\r\n    width: 36,\r\n  },\r\n  addButton: {\r\n    padding: 8,\r\n  },\r\n  approveButton: {\r\n    backgroundColor: '#34C759',\r\n  },\r\n  backButton: {\r\n    padding: 8,\r\n  },\r\n  categoryActions: {\r\n    flexDirection: 'row',\r\n    gap: 8,\r\n  },\r\n  categoryInfo: {\r\n    flex: 1,\r\n    marginLeft: 16,\r\n  },\r\n  categoryItem: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: 'row',\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  categoryMeta: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginTop: 2,\r\n  },\r\n  categoryName: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  },\r\n  colorGrid: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    gap: 12,\r\n    marginTop: 8,\r\n  },\r\n  colorOption: {\r\n    borderColor: 'transparent',\r\n    borderRadius: 20,\r\n    borderWidth: 3,\r\n    height: 40,\r\n    width: 40,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n  },\r\n  deleteButton: {\r\n    backgroundColor: '#FF3B30',\r\n  },\r\n  editButton: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  header: {\r\n    alignItems: 'center',\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: 16,\r\n  },\r\n  iconOption: {\r\n    borderColor: 'transparent',\r\n    borderRadius: 12,\r\n    borderWidth: 2,\r\n    marginRight: 8,\r\n  },\r\n  iconScroll: {\r\n    marginTop: 8,\r\n  },\r\n  inputSection: {\r\n    marginBottom: 24,\r\n  },\r\n  modalButton: {\r\n    padding: 8,\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  modalContent: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  modalHeader: {\r\n    alignItems: 'center',\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    padding: 16,\r\n  },\r\n  modalTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: '700',\r\n  },\r\n  previewContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 24,\r\n  },\r\n  section: {\r\n    padding: 16,\r\n  },\r\n  sectionDescription: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    marginBottom: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    marginBottom: 8,\r\n  },\r\n  selectedColorOption: {\r\n    borderColor: Colors.text,\r\n  },\r\n  selectedIconOption: {\r\n    borderColor: Colors.primary,\r\n  },\r\n  textInput: {\r\n    backgroundColor: Colors.card,\r\n    borderColor: Colors.border,\r\n    borderRadius: 8,\r\n    borderWidth: 1,\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    padding: 12,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: '700',\r\n  },\r\n});\r\n\r\nexport default CategoryManagement;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\CityManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'regionId' is defined but never used. Allowed unused args must match /^_/u.","line":61,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":44},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":99,"column":39,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":99,"endColumn":55},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":103,"column":39,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":103,"endColumn":55},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":107,"column":39,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":107,"endColumn":55},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":178,"column":34,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":178,"endColumn":50},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":184,"column":33,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":184,"endColumn":49},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":206,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping &quot;Update Transit\".\r\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping &ldquo;Update Transit\".\r\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping &#34;Update Transit\".\r\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping &rdquo;Update Transit\".\r\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":206,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping \"Update Transit&quot;.\r\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping \"Update Transit&ldquo;.\r\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping \"Update Transit&#34;.\r\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7005,7192],"text":"\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping \"Update Transit&rdquo;.\r\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":328,"column":17,"nodeType":"ObjectExpression","endLine":336,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":351,"column":18,"nodeType":"ObjectExpression","endLine":355,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":374,"column":21,"nodeType":"ObjectExpression","endLine":378,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFF0F0' }","line":383,"column":17,"nodeType":"ObjectExpression","endLine":385,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":392,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":392,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":396,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":396,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":423,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":423,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":429,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":429,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":448,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":448,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":481,"column":19,"nodeType":"ObjectExpression","endLine":484,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":487,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":487,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":515,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":515,"endColumn":28}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Search, Plus, MapPin, Trash2, Edit3, Globe, Clock, Phone } from \"lucide-react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View, ScrollView, Pressable, TextInput, Alert } from \"react-native\";\n\r\nimport Toast from './Toast';\n\nimport Colors from \"@/constants/colors\";\r\nimport { useToast } from '@/hooks/useToast';\nimport { useRegionStore } from \"@/stores/regionStore\";\r\nimport { RegionConfig } from \"@/types/region\";\r\n\r\ntype CityManagementProps = {\r\n  onBack: () => void;\r\n};\r\n\r\nexport default function CityManagement({ onBack }: CityManagementProps) {\r\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\r\n  const [showAddForm, setShowAddForm] = useState<boolean>(false);\r\n  const [editingRegion, setEditingRegion] = useState<RegionConfig | null>(null);\r\n  \r\n  const { \r\n    availableRegions, \r\n    currentRegion, \r\n    setRegion, \r\n    addCustomRegion, \r\n    removeRegion, \r\n    updateRegionTransitData,\r\n    searchRegions,\r\n    getRegionsByCountry \r\n  } = useRegionStore();\r\n\r\n  const filteredRegions = searchQuery \r\n    ? searchRegions(searchQuery)\r\n    : availableRegions;\r\n\r\n  const usRegions = getRegionsByCountry(\"United States\");\r\n  const internationalRegions = availableRegions.filter(r => r.country !== \"United States\");\r\n\r\n  const { toast, showToast, hideToast } = useToast();\r\n\r\n  const handleDeleteRegion = (regionId: string) => {\r\n    if (regionId === currentRegion.id) {\r\n      showToast('Cannot delete the currently selected region', 'error');\r\n      return;\r\n    }\r\n    \r\n    Alert.alert(\r\n      \"Delete Region\",\r\n      \"Are you sure you want to delete this region? This action cannot be undone.\",\r\n      [\r\n        { text: \"Cancel\", style: \"cancel\" },\r\n        { \r\n          text: \"Delete\", \r\n          style: \"destructive\",\r\n          onPress: () => removeRegion(regionId)\r\n        }\r\n      ]\r\n    );\r\n  };\r\n\r\n  const handleUpdateTransitData = (regionId: string) => {\r\n    Alert.alert(\r\n      \"Update Transit Data\",\r\n      \"This would typically connect to the region's transit API to fetch the latest schedules and route information.\",\r\n      [\r\n        { text: \"Cancel\", style: \"cancel\" },\r\n        { \r\n          text: \"Update\", \r\n          onPress: () => {\r\n            // In a real app, this would make API calls to update transit data\r\n            showToast('Transit data updated', 'success');\r\n          }\r\n        }\r\n      ]\r\n    );\r\n  };\r\n\r\n  const RegionCard = ({ region }: { region: RegionConfig }) => (\r\n    <View style={[\r\n      styles.regionCard,\r\n      region.id === currentRegion.id && styles.currentRegionCard\r\n    ]}>\r\n      <Pressable\r\n        style={styles.regionHeader}\r\n        onPress={() => setRegion(region.id)}\r\n      >\r\n        <View style={styles.regionInfo}>\r\n          <View style={styles.regionTitleRow}>\r\n            <MapPin size={20} color={Colors.primary} />\r\n            <Text style={styles.regionName}>{region.name}</Text>\r\n            {region.id === currentRegion.id && (\r\n              <View style={styles.currentBadge}>\r\n                <Text style={styles.currentBadgeText}>Current</Text>\r\n              </View>\r\n            )}\r\n          </View>\r\n          <View style={styles.regionDetails}>\r\n            <View style={styles.detailItem}>\r\n              <Globe size={14} color={Colors.textLight} />\r\n              <Text style={styles.detailText}>{region.country}</Text>\r\n            </View>\r\n            <View style={styles.detailItem}>\r\n              <Clock size={14} color={Colors.textLight} />\r\n              <Text style={styles.detailText}>{region.timezone}</Text>\r\n            </View>\r\n            <View style={styles.detailItem}>\r\n              <Phone size={14} color={Colors.textLight} />\r\n              <Text style={styles.detailText}>{region.emergencyNumber}</Text>\r\n            </View>\r\n          </View>\r\n          <Text style={styles.transitCount}>\r\n            {region.transitSystems.length} transit system{region.transitSystems.length !== 1 ? 's' : ''}\r\n          </Text>\r\n        </View>\r\n      </Pressable>\r\n      \r\n      <View style={styles.regionActions}>\r\n        <Pressable\r\n          style={styles.actionButton}\r\n          onPress={() => handleUpdateTransitData(region.id)}\r\n        >\r\n          <Text style={styles.actionButtonText}>Update Transit</Text>\r\n        </Pressable>\r\n        <Pressable\r\n          style={styles.actionButton}\r\n          onPress={() => setEditingRegion(region)}\r\n        >\r\n          <Edit3 size={16} color={Colors.primary} />\r\n        </Pressable>\r\n        <Pressable\r\n          style={[styles.actionButton, styles.deleteButton]}\r\n          onPress={() => handleDeleteRegion(region.id)}\r\n        >\r\n          <Trash2 size={16} color=\"#FF4444\" />\r\n        </Pressable>\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  if (showAddForm || editingRegion) {\r\n    return (\r\n      <AddEditRegionForm\r\n        region={editingRegion}\r\n        onSave={(region) => {\r\n          if (editingRegion) {\r\n            updateRegionTransitData(region.id, region);\r\n          } else {\r\n            addCustomRegion(region);\r\n          }\r\n          setShowAddForm(false);\r\n          setEditingRegion(null);\r\n        }}\r\n        onCancel={() => {\r\n          setShowAddForm(false);\r\n          setEditingRegion(null);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Pressable style={styles.backButton} onPress={onBack}>\r\n          <Text style={styles.backButtonText}>ΓåÉ Back</Text>\r\n        </Pressable>\r\n        <Text style={styles.title}>City Management</Text>\r\n        <Pressable\r\n          style={styles.addButton}\r\n          onPress={() => setShowAddForm(true)}\r\n        >\r\n          <Plus size={20} color=\"#FFFFFF\" />\r\n          <Text style={styles.addButtonText}>Add City</Text>\r\n        </Pressable>\r\n      </View>\r\n\r\n      <View style={styles.searchContainer}>\r\n        <Search size={20} color={Colors.textLight} />\r\n        <TextInput\r\n          style={styles.searchInput}\r\n          placeholder=\"Search cities...\"\r\n          value={searchQuery}\r\n          onChangeText={setSearchQuery}\r\n          placeholderTextColor={Colors.textLight}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.section}>\r\n        <Text style={styles.sectionTitle}>United States ({usRegions.length})</Text>\r\n        {(searchQuery ? filteredRegions.filter(r => r.country === \"United States\") : usRegions).map((region) => (\r\n          <RegionCard key={region.id} region={region} />\r\n        ))}\r\n      </View>\r\n\r\n      <View style={styles.section}>\r\n        <Text style={styles.sectionTitle}>International ({internationalRegions.length})</Text>\r\n        {(searchQuery ? filteredRegions.filter(r => r.country !== \"United States\") : internationalRegions).map((region) => (\r\n          <RegionCard key={region.id} region={region} />\r\n        ))}\r\n      </View>\r\n\r\n  <View style={styles.infoSection}>\r\n        <Text style={styles.infoTitle}>Transit Data Updates</Text>\r\n        <Text style={styles.infoText}>\r\n          Transit schedules and route information are automatically updated when available. \r\n          You can manually refresh data for any city by tapping \"Update Transit\".\r\n        </Text>\r\n        <Text style={styles.infoText}>\r\n          Custom cities can be added with their own transit API endpoints for real-time data integration.\r\n        </Text>\r\n      </View>\r\n      <Toast \r\n        message={toast.message}\r\n        type={toast.type}\r\n        visible={toast.visible}\r\n        onHide={hideToast}\r\n      />\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\ntype AddEditRegionFormProps = {\r\n  region?: RegionConfig | null;\r\n  onSave: (region: RegionConfig) => void;\r\n  onCancel: () => void;\r\n};\r\n\r\nfunction AddEditRegionForm({ region, onSave, onCancel }: AddEditRegionFormProps) {\r\n  const [formData, setFormData] = useState<Partial<RegionConfig>>({\r\n    id: region?.id || \"\",\r\n    name: region?.name || \"\",\r\n    country: region?.country || \"United States\",\r\n    timezone: region?.timezone || \"America/New_York\",\r\n    currency: region?.currency || \"USD\",\r\n    language: region?.language || \"en\",\r\n    coordinates: region?.coordinates || { latitude: 0, longitude: 0 },\r\n    emergencyNumber: region?.emergencyNumber || \"911\",\r\n    transitApiEndpoint: region?.transitApiEndpoint || \"\",\r\n    mapStyle: region?.mapStyle || \"standard\",\r\n    transitSystems: region?.transitSystems || [],\r\n    safetyTips: region?.safetyTips || [],\r\n    funFacts: region?.funFacts || [],\r\n    popularPlaces: region?.popularPlaces || []\r\n  });\r\n\r\n  const handleSave = () => {\r\n    if (!formData.id || !formData.name || !formData.country) {\r\n      // Using toast from parent not directly available here; simple fallback Alert kept or lift state.\r\n      Alert.alert(\"Error\", \"Please fill in all required fields.\");\r\n      return;\r\n    }\r\n\r\n    onSave(formData as RegionConfig);\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Pressable style={styles.backButton} onPress={onCancel}>\r\n          <Text style={styles.backButtonText}>Cancel</Text>\r\n        </Pressable>\r\n        <Text style={styles.title}>{region ? \"Edit\" : \"Add\"} City</Text>\r\n        <Pressable style={styles.saveButton} onPress={handleSave}>\r\n          <Text style={styles.saveButtonText}>Save</Text>\r\n        </Pressable>\r\n      </View>\r\n\r\n      <View style={styles.formSection}>\r\n        <Text style={styles.formLabel}>City ID *</Text>\r\n        <TextInput\r\n          style={styles.formInput}\r\n          value={formData.id}\r\n          onChangeText={(text) => setFormData({ ...formData, id: text })}\r\n          placeholder=\"e.g., nyc, chicago\"\r\n          editable={!region}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.formSection}>\r\n        <Text style={styles.formLabel}>City Name *</Text>\r\n        <TextInput\r\n          style={styles.formInput}\r\n          value={formData.name}\r\n          onChangeText={(text) => setFormData({ ...formData, name: text })}\r\n          placeholder=\"e.g., New York City\"\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.formSection}>\r\n        <Text style={styles.formLabel}>Country *</Text>\r\n        <TextInput\r\n          style={styles.formInput}\r\n          value={formData.country}\r\n          onChangeText={(text) => setFormData({ ...formData, country: text })}\r\n          placeholder=\"e.g., United States\"\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.formSection}>\r\n        <Text style={styles.formLabel}>Transit API Endpoint</Text>\r\n        <TextInput\r\n          style={styles.formInput}\r\n          value={formData.transitApiEndpoint}\r\n          onChangeText={(text) => setFormData({ ...formData, transitApiEndpoint: text })}\r\n          placeholder=\"https://api.example.com/\"\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.formSection}>\r\n        <Text style={styles.formLabel}>Emergency Number</Text>\r\n        <TextInput\r\n          style={styles.formInput}\r\n          value={formData.emergencyNumber}\r\n          onChangeText={(text) => setFormData({ ...formData, emergencyNumber: text })}\r\n          placeholder=\"911\"\r\n        />\r\n      </View>\r\n\r\n      <Text style={styles.infoText}>\r\n        Additional configuration options like transit systems, coordinates, and local information \r\n        can be added through the advanced settings or by importing from a configuration file.\r\n      </Text>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 8,\r\n  },\r\n  actionButtonText: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n  addButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 8,\r\n  },\r\n  addButtonText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n  },\r\n  backButton: {\r\n    padding: 8,\r\n  },\r\n  backButtonText: {\r\n    color: Colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  currentBadge: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 12,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 4,\r\n  },\r\n  currentBadgeText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n  },\r\n  currentRegionCard: {\r\n    borderColor: Colors.primary,\r\n    borderWidth: 2,\r\n  },\r\n  deleteButton: {\r\n    backgroundColor: \"#FFF0F0\",\r\n  },\r\n  detailItem: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n  },\r\n  detailText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  formInput: {\r\n    backgroundColor: Colors.card,\r\n    borderColor: Colors.border,\r\n    borderRadius: 8,\r\n    borderWidth: 1,\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 12,\r\n  },\r\n  formLabel: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n  },\r\n  formSection: {\r\n    padding: 16,\r\n  },\r\n  header: {\r\n    alignItems: \"center\",\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    padding: 16,\r\n  },\r\n  infoSection: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    margin: 16,\r\n    padding: 16,\r\n  },\r\n  infoText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n    marginBottom: 8,\r\n  },\r\n  infoTitle: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n  },\r\n  regionActions: {\r\n    borderTopColor: Colors.border,\r\n    borderTopWidth: 1,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    padding: 12,\r\n  },\r\n  regionCard: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    marginBottom: 12,\r\n    overflow: \"hidden\",\r\n  },\r\n  regionDetails: {\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    gap: 16,\r\n  },\r\n  regionHeader: {\r\n    padding: 16,\r\n  },\r\n  regionInfo: {\r\n    gap: 8,\r\n  },\r\n  regionName: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n  },\r\n  regionTitleRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n  },\r\n  saveButton: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n  },\r\n  saveButtonText: {\r\n    color: \"#FFFFFF\",\r\n    fontWeight: \"600\",\r\n  },\r\n  searchContainer: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    gap: 12,\r\n    margin: 16,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 12,\r\n  },\r\n  searchInput: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n  },\r\n  section: {\r\n    padding: 16,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 20,\r\n    fontWeight: \"700\",\r\n  },\r\n  transitCount: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    fontStyle: \"italic\",\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\DevicePingHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\DevicePingHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\DirectionStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowRight' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":69,"column":37,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":69,"endColumn":53},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":116,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":116,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":122,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":122,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":151,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":151,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":159,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":159,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, ArrowRight } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\n\r\nimport TransitStepIndicator from \"./TransitStepIndicator\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { TransitStep } from \"@/types/navigation\";\r\n\r\ntype DirectionStepProps = {\r\n  step: TransitStep | null | undefined;\r\n  isLast: boolean;\r\n};\r\n\r\nconst DirectionStep: React.FC<DirectionStepProps> = ({ step, isLast }) => {\r\n  // Defensive guards & fallbacks to avoid runtime crashes on malformed data\r\n  if (!step) {\r\n    return (\r\n      <View style={styles.container} accessible accessibilityRole=\"summary\" accessibilityLabel=\"Unavailable step\">\r\n        <View style={styles.leftColumn}>\r\n          <View style={[styles.placeholderIndicator, { backgroundColor: Colors.border }]} />\r\n          {!isLast && <View style={styles.connector} />}\r\n        </View>\r\n        <View style={styles.rightColumn}>\r\n          <Text style={styles.stepType}>Step unavailable</Text>\r\n          <Text style={styles.locationText}>Data missing</Text>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const typeLabel = step.type\r\n    ? step.type.charAt(0).toUpperCase() + step.type.slice(1)\r\n    : \"Step\";\r\n  const durationLabel = Number.isFinite(step.duration) ? `${step.duration} min` : \"--\";\r\n  const fromText = step.from || \"Unknown start\";\r\n  const toText = step.to || \"Unknown destination\";\r\n\r\n  return (\r\n    <View style={styles.container} accessibilityRole=\"summary\" accessibilityLabel={`${typeLabel} step from ${fromText} to ${toText}`}>\r\n      <View style={styles.leftColumn}>\r\n        <TransitStepIndicator step={step as TransitStep} size=\"large\" />\r\n        {!isLast && <View style={styles.connector} />}\r\n      </View>\r\n\r\n      <View style={styles.rightColumn}>\r\n        <View style={styles.headerRow}>\r\n          <Text style={styles.stepType}>\r\n            {typeLabel}\r\n            {step.line && ` Line ${step.line}`}\r\n          </Text>\r\n          <Text style={styles.duration}>{durationLabel}</Text>\r\n        </View>\r\n\r\n        <View style={styles.locationContainer}>\r\n          <View style={styles.locationRow}>\r\n            <Text style={styles.locationLabel}>From:</Text>\r\n            <Text style={styles.locationText}>{fromText}</Text>\r\n          </View>\r\n\r\n            <View style={styles.locationRow}>\r\n            <Text style={styles.locationLabel}>To:</Text>\r\n            <Text style={styles.locationText}>{toText}</Text>\r\n          </View>\r\n        </View>\r\n\r\n        {step.departureTime && step.arrivalTime && (\r\n          <View style={styles.timeContainer}>\r\n            <Clock size={14} color={Colors.textLight} style={styles.clockIcon} />\r\n            <Text style={styles.timeText}>\r\n              {step.departureTime} - {step.arrivalTime}\r\n            </Text>\r\n            {step.stops !== undefined && (\r\n              <Text style={styles.stopsText}>\r\n                {step.stops} {step.stops === 1 ? \"stop\" : \"stops\"}\r\n              </Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  clockIcon: {\r\n    marginRight: 4,\r\n  },\r\n  connector: {\r\n    backgroundColor: Colors.border,\r\n    flex: 1,\r\n    marginBottom: -8,\r\n    marginTop: 8,\r\n    width: 2,\r\n  },\r\n  container: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 16,\r\n  },\r\n  duration: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n  },\r\n  headerRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 8,\r\n  },\r\n  leftColumn: {\r\n    alignItems: \"center\",\r\n    marginRight: 16,\r\n  },\r\n  locationContainer: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 8,\r\n    marginBottom: 8,\r\n    padding: 12,\r\n  },\r\n  locationLabel: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    width: 50,\r\n  },\r\n  locationRow: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 4,\r\n  },\r\n  locationText: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n  placeholderIndicator: {\r\n    borderRadius: 20,\r\n    height: 40,\r\n    opacity: 0.5,\r\n    width: 40,\r\n  },\r\n  rightColumn: {\r\n    flex: 1,\r\n  },\r\n  stepType: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  stopsText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  timeContainer: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  timeText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    marginRight: 8,\r\n  },\r\n});\r\n\r\nexport default DirectionStep;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\EmptyState.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":25,"column":32,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":25,"endColumn":48},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":45,"column":15,"nodeType":"ObjectExpression","endLine":49,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":57,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":57,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":65,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":65,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LucideIcon } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype EmptyStateProps = {\r\n  icon: LucideIcon;\r\n  title: string;\r\n  description: string;\r\n  actionText?: string;\r\n  onAction?: () => void;\r\n};\r\n\r\nconst EmptyState: React.FC<EmptyStateProps> = ({\r\n  icon: Icon,\r\n  title,\r\n  description,\r\n  actionText,\r\n  onAction,\r\n}) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.iconContainer}>\r\n        <Icon size={48} color={Colors.textLight} />\r\n      </View>\r\n      <Text style={styles.title}>{title}</Text>\r\n      <Text style={styles.description}>{description}</Text>\r\n      {actionText && onAction && (\r\n        <Pressable style={styles.actionButton} onPress={onAction}>\r\n          <Text style={styles.actionText}>{actionText}</Text>\r\n        </Pressable>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    paddingHorizontal: 24,\r\n    paddingVertical: 12,\r\n  },\r\n  actionText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  container: {\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 32,\r\n  },\r\n  description: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    lineHeight: 24,\r\n    marginBottom: 24,\r\n    textAlign: \"center\",\r\n  },\r\n  iconContainer: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 48,\r\n    height: 96,\r\n    justifyContent: \"center\",\r\n    marginBottom: 24,\r\n    width: 96,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 20,\r\n    fontWeight: \"700\",\r\n    marginBottom: 8,\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default EmptyState;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":70,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":70,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":85,"column":14,"nodeType":"ObjectExpression","endLine":89,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertTriangle, RefreshCw } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype ErrorBoundaryState = {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n};\r\n\r\ntype ErrorBoundaryProps = {\r\n  children: React.ReactNode;\r\n  fallback?: React.ComponentType<{ error: Error; retry: () => void }>;\r\n};\r\n\r\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    console.error(\"Error caught by boundary:\", error, errorInfo);\r\n  }\r\n\r\n  retry = () => {\r\n    this.setState({ hasError: false, error: null });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      if (this.props.fallback) {\r\n        const FallbackComponent = this.props.fallback;\r\n        return <FallbackComponent error={this.state.error!} retry={this.retry} />;\r\n      }\r\n\r\n      return (\r\n        <View style={styles.container}>\r\n          <AlertTriangle size={48} color={Colors.error} />\r\n          <Text style={styles.title}>Oops! Something went wrong</Text>\r\n          <Text style={styles.message}>\r\n            {this.state.error?.message || \"An unexpected error occurred\"}\r\n          </Text>\r\n          <Pressable style={styles.retryButton} onPress={this.retry}>\r\n            <RefreshCw size={20} color=\"#FFFFFF\" />\r\n            <Text style={styles.retryText}>Try Again</Text>\r\n          </Pressable>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 32,\r\n  },\r\n  message: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    lineHeight: 24,\r\n    marginBottom: 24,\r\n    textAlign: \"center\",\r\n  },\r\n  retryButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    paddingHorizontal: 24,\r\n    paddingVertical: 12,\r\n  },\r\n  retryText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 20,\r\n    fontWeight: \"700\",\r\n    marginBottom: 8,\r\n    marginTop: 16,\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default ErrorBoundary;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\FeatureErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\FunFactCard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":25,"column":33,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":25,"endColumn":49},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0FFF4', shadowColor: '#000' }","line":36,"column":14,"nodeType":"ObjectExpression","endLine":48,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Lightbulb, X } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype FunFactCardProps = {\r\n  fact: string;\r\n  location?: string;\r\n  onDismiss?: () => void;\r\n};\r\n\r\nconst FunFactCard: React.FC<FunFactCardProps> = ({ fact, location, onDismiss }) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <View style={styles.iconContainer}>\r\n          <Lightbulb size={20} color={Colors.secondary} />\r\n        </View>\r\n        <Text style={styles.title}>\r\n          {location ? `Fun Fact about ${location}` : \"Did You Know?\"}\r\n        </Text>\r\n        {onDismiss && (\r\n          <Pressable style={styles.dismissButton} onPress={onDismiss}>\r\n            <X size={16} color={Colors.textLight} />\r\n          </Pressable>\r\n        )}\r\n      </View>\r\n      \r\n      <Text style={styles.factText}>{fact}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"#F0FFF4\",\r\n    borderLeftColor: Colors.secondary,\r\n    borderLeftWidth: 4,\r\n    borderRadius: 12,\r\n    elevation: 2,\r\n    margin: 16,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n  },\r\n  dismissButton: {\r\n    padding: 4,\r\n  },\r\n  factText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n  },\r\n  header: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 8,\r\n  },\r\n  iconContainer: {\r\n    marginRight: 8,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default FunFactCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\LiveArrivalsCard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'alertedArrivals'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [alertedArrivals, arrivals]","fix":{"range":[1194,1204],"text":"[alertedArrivals, arrivals]"}}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":105,"column":37,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":105,"endColumn":53},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: 'transparent' }","line":149,"column":16,"nodeType":"ObjectExpression","endLine":156,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":166,"column":14,"nodeType":"ObjectExpression","endLine":176,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":167,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":167,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":188,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":188,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":206,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":206,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":243,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":243,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFF9E6' }","line":247,"column":18,"nodeType":"ObjectExpression","endLine":251,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, MapPin, RefreshCw, Bell } from \"lucide-react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, FlatList, Pressable } from \"react-native\";\n\r\nimport TransitStepIndicator from \"./TransitStepIndicator\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\nexport type LiveArrival = {\r\n  id: string;\r\n  line: string;\r\n  color: string;\r\n  destination: string;\r\n  arrivalTime: number; // minutes\r\n  platform?: string;\r\n  type: \"subway\" | \"train\" | \"bus\";\r\n};\r\n\r\ntype LiveArrivalsCardProps = {\r\n  stationName: string;\r\n  arrivals: LiveArrival[];\r\n  lastUpdated?: string;\r\n  onRefresh?: () => void;\r\n  isRefreshing?: boolean;\r\n};\r\n\r\nconst LiveArrivalsCard: React.FC<LiveArrivalsCardProps> = ({ \r\n  stationName, \r\n  arrivals, \r\n  lastUpdated = \"Just now\",\r\n  onRefresh,\r\n  isRefreshing = false\r\n}) => {\r\n  const [alertedArrivals, setAlertedArrivals] = useState<Set<string>>(new Set());\r\n\r\n  // Alert for trains arriving soon\r\n  useEffect(() => {\r\n    arrivals.forEach(arrival => {\r\n      if (arrival.arrivalTime <= 1 && !alertedArrivals.has(arrival.id)) {\r\n        setAlertedArrivals(prev => new Set([...prev, arrival.id]));\r\n      }\r\n    });\r\n  }, [arrivals]);\r\n\r\n  const getArrivalTimeColor = (minutes: number) => {\r\n    if (minutes === 0) return Colors.error;\r\n    if (minutes <= 2) return Colors.warning;\r\n    return Colors.primary;\r\n  };\r\n\r\n  const getArrivalTimeText = (minutes: number) => {\r\n    if (minutes === 0) return \"Arriving\";\r\n    if (minutes === 1) return \"1 min\";\r\n    return `${minutes} min`;\r\n  };\r\n\r\n  const renderArrival = ({ item }: { item: LiveArrival }) => (\r\n    <View style={[\r\n      styles.arrivalItem,\r\n      item.arrivalTime <= 1 && styles.urgentArrival\r\n    ]}>\r\n      <TransitStepIndicator \r\n        step={{\r\n          id: item.id,\r\n          type: item.type,\r\n          line: item.line,\r\n          color: item.color,\r\n          from: \"\",\r\n          to: \"\",\r\n          duration: 0\r\n        }}\r\n        size=\"medium\"\r\n      />\r\n      <View style={styles.arrivalInfo}>\r\n        <Text style={styles.destinationText} numberOfLines={1}>\r\n          {item.destination}\r\n        </Text>\r\n        {item.platform && (\r\n          <Text style={styles.platformText}>Platform {item.platform}</Text>\r\n        )}\r\n      </View>\r\n      <View style={styles.timeContainer}>\r\n        {item.arrivalTime <= 1 && (\r\n          <Bell size={14} color={Colors.warning} style={styles.alertIcon} />\r\n        )}\r\n        <Text style={[\r\n          styles.arrivalTime,\r\n          { color: getArrivalTimeColor(item.arrivalTime) }\r\n        ]}>\r\n          {getArrivalTimeText(item.arrivalTime)}\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <View style={styles.stationInfo}>\r\n          <MapPin size={20} color={Colors.primary} style={styles.stationIcon} />\r\n          <Text style={styles.stationName}>{stationName}</Text>\r\n        </View>\r\n        <View style={styles.headerActions}>\r\n          <View style={styles.updateInfo}>\r\n            <Clock size={14} color={Colors.textLight} />\r\n            <Text style={styles.updateText}>{lastUpdated}</Text>\r\n          </View>\r\n          {onRefresh && (\r\n            <Pressable \r\n              style={styles.refreshButton}\r\n              onPress={onRefresh}\r\n              disabled={isRefreshing}\r\n            >\r\n              <RefreshCw \r\n                size={16} \r\n                color={Colors.primary} \r\n                style={[styles.refreshIcon, isRefreshing && styles.spinning]}\r\n              />\r\n            </Pressable>\r\n          )}\r\n        </View>\r\n      </View>\r\n\r\n      {arrivals.length > 0 ? (\r\n        <FlatList\r\n          data={arrivals.sort((a, b) => a.arrivalTime - b.arrivalTime)}\r\n          renderItem={renderArrival}\r\n          keyExtractor={item => item.id}\r\n          scrollEnabled={false}\r\n          contentContainerStyle={styles.arrivalsList}\r\n        />\r\n      ) : (\r\n        <View style={styles.emptyState}>\r\n          <Text style={styles.emptyText}>No arrivals scheduled</Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  alertIcon: {\r\n    // Alert icon styles\r\n  },\r\n  arrivalInfo: {\r\n    flex: 1,\r\n    marginLeft: 12,\r\n  },\r\n  arrivalItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"transparent\",\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 12,\r\n  },\r\n  arrivalTime: {\r\n    fontSize: 16,\r\n    fontWeight: \"700\",\r\n    minWidth: 50,\r\n    textAlign: \"right\",\r\n  },\r\n  arrivalsList: {\r\n    gap: 8,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    elevation: 2,\r\n    marginBottom: 16,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n  },\r\n  destinationText: {\r\n    color: Colors.text,\r\n    fontSize: 15,\r\n    fontWeight: \"600\",\r\n    marginBottom: 2,\r\n  },\r\n  emptyState: {\r\n    alignItems: \"center\",\r\n    paddingVertical: 24,\r\n  },\r\n  emptyText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  header: {\r\n    alignItems: \"center\",\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 16,\r\n    paddingBottom: 12,\r\n  },\r\n  headerActions: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 12,\r\n  },\r\n  platformText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    fontWeight: \"500\",\r\n  },\r\n  refreshButton: {\r\n    padding: 4,\r\n  },\r\n  refreshIcon: {\r\n    // Add spinning animation styles if needed\r\n  },\r\n  spinning: {\r\n    // Animation styles for spinning refresh icon\r\n  },\r\n  stationIcon: {\r\n    marginRight: 8,\r\n  },\r\n  stationInfo: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    flex: 1,\r\n  },\r\n  stationName: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  timeContainer: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n  },\r\n  updateInfo: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  updateText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginLeft: 4,\r\n  },\r\n  urgentArrival: {\r\n    backgroundColor: \"#FFF9E6\",\r\n    borderLeftColor: Colors.warning,\r\n    borderLeftWidth: 3,\r\n  },\r\n});\r\n\r\nexport default LiveArrivalsCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\MapPlaceholder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Dimensions' is defined but never used.","line":3,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":44},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFFFFF', shadowColor: '#000' }","line":33,"column":18,"nodeType":"ObjectExpression","endLine":46,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MapPin } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, View, Text, Dimensions } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype MapPlaceholderProps = {\r\n  message?: string;\r\n};\r\n\r\nconst MapPlaceholder: React.FC<MapPlaceholderProps> = ({ \r\n  message = \"Map will appear here\" \r\n}) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.iconContainer}>\r\n        <MapPin size={40} color={Colors.primary} />\r\n      </View>\r\n      <Text style={styles.message}>{message}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.mapWater,\r\n    borderRadius: 12,\r\n    height: 300,\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  iconContainer: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#FFFFFF\",\r\n    borderRadius: 40,\r\n    elevation: 3,\r\n    height: 80,\r\n    justifyContent: \"center\",\r\n    marginBottom: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    width: 80,\r\n  },\r\n  message: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n  },\r\n});\r\n\r\nexport default MapPlaceholder;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\NetworkStatusBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wifi' is defined but never used.","line":1,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":45,"column":9,"nodeType":"ObjectExpression","endLine":51,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WifiOff, Wifi, RefreshCw } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useNetworkStatus } from \"@/hooks/useNetworkStatus\";\r\n\r\ntype NetworkStatusBarProps = {\r\n  onRetry?: () => void;\r\n};\r\n\r\nconst NetworkStatusBar: React.FC<NetworkStatusBarProps> = ({ onRetry }) => {\r\n  const { isConnected, isInternetReachable } = useNetworkStatus();\r\n\r\n  if (isConnected && isInternetReachable) return null;\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <WifiOff size={16} color=\"#FFFFFF\" />\r\n      <Text style={styles.text}>\r\n        {!isConnected ? \"No connection\" : \"Limited connectivity\"}\r\n      </Text>\r\n      {onRetry && (\r\n        <Pressable style={styles.retryButton} onPress={onRetry}>\r\n          <RefreshCw size={14} color=\"#FFFFFF\" />\r\n        </Pressable>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.error,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    justifyContent: \"center\",\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n  },\r\n  retryButton: {\r\n    padding: 4,\r\n  },\r\n  text: {\r\n    color: \"#FFFFFF\",\r\n    flex: 1,\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default NetworkStatusBar;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\NotificationStatusCard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.androidRipple' is restricted from being used. Use Platform.select ripple logic; avoid androidRipple.","line":87,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":87,"endColumn":42},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":101,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":101,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":111,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":111,"endColumn":28},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.good","line":115,"column":3,"nodeType":"Property","endLine":118,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.androidRipple' is restricted from being used. Use Platform.select ripple logic; avoid androidRipple.","line":126,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":126,"endColumn":42},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.androidRipple' is restricted from being used. Use Platform.select ripple logic; avoid androidRipple.","line":134,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":134,"endColumn":42},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":140,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":140,"endColumn":28},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.warning","line":150,"column":3,"nodeType":"Property","endLine":153,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bell, AlertTriangle, ExternalLink, CheckCircle } from 'lucide-react-native';\r\nimport React from 'react';\r\nimport { StyleSheet, Text, View, Pressable, Platform } from 'react-native';\n\r\nimport { showDevelopmentBuildRecommendation } from '../utils/notification';\n\r\nimport Colors from '@/constants/colors';\n\r\n\r\ntype NotificationStatusCardProps = {\r\n  testId?: string;\r\n};\r\n\r\nconst NotificationStatusCard: React.FC<NotificationStatusCardProps> = ({ testId }) => {\r\n  const isExpoGo = __DEV__ && Platform.OS !== 'web';\r\n  const isWeb = Platform.OS === 'web';\r\n  \r\n  const getStatusInfo = () => {\r\n    if (isWeb) {\r\n      return {\r\n        icon: <Bell size={20} color={Colors.primary} />,\r\n        title: 'Web Notifications Active',\r\n        description: 'Browser notifications are working normally',\r\n        status: 'good' as const,\r\n        showAction: false,\r\n      };\r\n    }\r\n    \r\n    if (isExpoGo) {\r\n      return {\r\n        icon: <AlertTriangle size={20} color={Colors.warning} />,\r\n        title: 'Limited Notifications',\r\n        description: 'Running in Expo Go - notifications shown as alerts only',\r\n        status: 'warning' as const,\r\n        showAction: true,\r\n      };\r\n    }\r\n    \r\n    return {\r\n      icon: <CheckCircle size={20} color={Colors.success} />,\r\n      title: 'Full Notifications Available',\r\n      description: 'Push notifications are working normally',\r\n      status: 'good' as const,\r\n      showAction: false,\r\n    };\r\n  };\r\n  \r\n  const statusInfo = getStatusInfo();\r\n  \r\n  const handleLearnMore = () => {\r\n    showDevelopmentBuildRecommendation();\r\n  };\r\n  \r\n  return (\r\n    <View style={[styles.card, styles[statusInfo.status]]} testID={testId}>\r\n      <View style={styles.header}>\r\n        <View style={styles.iconContainer}>\r\n          {statusInfo.icon}\r\n        </View>\r\n        <View style={styles.content}>\r\n          <Text style={styles.title}>{statusInfo.title}</Text>\r\n          <Text style={styles.description}>{statusInfo.description}</Text>\r\n        </View>\r\n      </View>\r\n      \r\n      {statusInfo.showAction && (\r\n        <Pressable style={styles.actionButton} onPress={handleLearnMore}>\r\n          <ExternalLink size={16} color={Colors.primary} />\r\n          <Text style={styles.actionText}>Learn About Development Builds</Text>\r\n        </Pressable>\r\n      )}\r\n      \r\n      {isExpoGo && (\r\n        <View style={styles.infoBox}>\r\n          <Text style={styles.infoText}>\r\n            ≡ƒÆí For production apps, use a development build for full notification support\r\n          </Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.androidRipple,\r\n    borderRadius: 8,\r\n    flexDirection: 'row',\r\n    gap: 8,\r\n    marginTop: 8,\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 8,\r\n  },\r\n  actionText: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: '500',\r\n  },\r\n  card: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    borderWidth: 1,\r\n    marginVertical: 8,\r\n    padding: 16,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n  },\r\n  description: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n  },\r\n  good: {\r\n    backgroundColor: Colors.success + '10',\r\n    borderColor: Colors.success + '30',\r\n  },\r\n  header: {\r\n    alignItems: 'flex-start',\r\n    flexDirection: 'row',\r\n    marginBottom: 12,\r\n  },\r\n  iconContainer: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.androidRipple,\r\n    borderRadius: 20,\r\n    height: 40,\r\n    justifyContent: 'center',\r\n    marginRight: 12,\r\n    width: 40,\r\n  },\r\n  infoBox: {\r\n    backgroundColor: Colors.androidRipple,\r\n    borderRadius: 8,\r\n    marginTop: 12,\r\n    padding: 12,\r\n  },\r\n  infoText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    lineHeight: 16,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    marginBottom: 4,\r\n  },\r\n  warning: {\r\n    backgroundColor: Colors.warning + '10',\r\n    borderColor: Colors.warning + '30',\r\n  },\r\n});\r\n\r\nexport default NotificationStatusCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\OfflineIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wifi' is defined but never used.","line":1,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":42,"column":9,"nodeType":"ObjectExpression","endLine":46,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WifiOff, Wifi } from \"lucide-react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\nconst OfflineIndicator: React.FC = () => {\r\n  const [isOnline, setIsOnline] = useState(true);\r\n\r\n  // Simulate network status checking\r\n  useEffect(() => {\r\n    // In a real app, you'd use NetInfo or similar\r\n    const checkConnection = () => {\r\n      // Mock offline detection\r\n      setIsOnline(Math.random() > 0.1); // 90% chance of being online\r\n    };\r\n\r\n    const interval = setInterval(checkConnection, 10000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  if (isOnline) return null;\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <WifiOff size={16} color=\"#FFFFFF\" />\r\n      <Text style={styles.text}>Offline Mode - Limited features available</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.warning,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    justifyContent: \"center\",\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n  },\r\n  text: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default OfflineIndicator;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\OnboardingFlow.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":52,"column":12,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1471,1624],"text":"\r\n        KidMap helps kids navigate public transportation safely and confidently. \r\n        Let&apos;s set up your app for your city and preferences.\r\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1471,1624],"text":"\r\n        KidMap helps kids navigate public transportation safely and confidently. \r\n        Let&lsquo;s set up your app for your city and preferences.\r\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1471,1624],"text":"\r\n        KidMap helps kids navigate public transportation safely and confidently. \r\n        Let&#39;s set up your app for your city and preferences.\r\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1471,1624],"text":"\r\n        KidMap helps kids navigate public transportation safely and confidently. \r\n        Let&rsquo;s set up your app for your city and preferences.\r\n      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":189,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6626,6641],"text":"You&apos;re All Set!"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6626,6641],"text":"You&lsquo;re All Set!"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6626,6641],"text":"You&#39;re All Set!"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6626,6641],"text":"You&rsquo;re All Set!"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":218,"column":15,"nodeType":"ObjectExpression","endLine":222,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderColor: 'transparent' }","line":242,"column":17,"nodeType":"ObjectExpression","endLine":250,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":244,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":244,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":288,"column":19,"nodeType":"ObjectExpression","endLine":291,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0FFF4' }","line":296,"column":19,"nodeType":"ObjectExpression","endLine":299,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":306,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":306,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderColor: 'transparent' }","line":319,"column":17,"nodeType":"ObjectExpression","endLine":328,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":321,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":321,"endColumn":33}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MapPin, Settings, Shield, CheckCircle } from \"lucide-react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable, ScrollView } from \"react-native\";\n\r\nimport RegionSelector from \"./RegionSelector\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useRegionStore } from \"@/stores/regionStore\";\r\n\r\ntype OnboardingStep = \"welcome\" | \"region\" | \"preferences\" | \"safety\" | \"complete\";\r\n\r\ntype OnboardingFlowProps = {\r\n  onComplete: () => void;\r\n};\r\n\r\nconst OnboardingFlow: React.FC<OnboardingFlowProps> = ({ onComplete }) => {\r\n  const [currentStep, setCurrentStep] = useState<OnboardingStep>(\"welcome\");\r\n  const {\r\n    availableRegions,\r\n    userPreferences,\r\n    setRegion,\r\n    updatePreferences,\r\n    completeOnboarding,\r\n  } = useRegionStore();\r\n\r\n  const handleRegionSelect = (regionId: string) => {\r\n    setRegion(regionId);\r\n    setCurrentStep(\"preferences\");\r\n  };\r\n\r\n  const handlePreferencesComplete = () => {\r\n    setCurrentStep(\"safety\");\r\n  };\r\n\r\n  const handleSafetyComplete = () => {\r\n    setCurrentStep(\"complete\");\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    completeOnboarding();\r\n    onComplete();\r\n  };\r\n\r\n  const renderWelcome = () => (\r\n    <View style={styles.stepContainer}>\r\n      <View style={styles.iconContainer}>\r\n        <MapPin size={48} color={Colors.primary} />\r\n      </View>\r\n      <Text style={styles.stepTitle}>Welcome to KidMap!</Text>\r\n      <Text style={styles.stepDescription}>\r\n        KidMap helps kids navigate public transportation safely and confidently. \r\n        Let's set up your app for your city and preferences.\r\n      </Text>\r\n      <Pressable style={styles.primaryButton} onPress={() => setCurrentStep(\"region\")}>\r\n        <Text style={styles.buttonText}>Get Started</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n\r\n  const renderRegionSelection = () => (\r\n    <RegionSelector\r\n      regions={availableRegions}\r\n      selectedRegion={userPreferences.selectedRegion}\r\n      onSelectRegion={handleRegionSelect}\r\n    />\r\n  );\r\n\r\n  const renderPreferences = () => (\r\n    <ScrollView style={styles.scrollContainer} contentContainerStyle={styles.scrollContentContainer}>\r\n      <View style={styles.iconContainer}>\r\n        <Settings size={48} color={Colors.primary} />\r\n      </View>\r\n      <Text style={styles.stepTitle}>Customize Your Experience</Text>\r\n      <Text style={styles.stepDescription}>\r\n        Set your preferences to make KidMap work best for you.\r\n      </Text>\r\n\r\n      <View style={styles.preferenceSection}>\r\n        <Text style={styles.sectionTitle}>Units</Text>\r\n        <View style={styles.optionRow}>\r\n          <Pressable\r\n            style={[\r\n              styles.optionButton,\r\n              userPreferences.preferredUnits === \"imperial\" && styles.selectedOption\r\n            ]}\r\n            onPress={() => updatePreferences({ preferredUnits: \"imperial\" })}\r\n          >\r\n            <Text style={[\r\n              styles.optionText,\r\n              userPreferences.preferredUnits === \"imperial\" && styles.selectedOptionText\r\n            ]}>\r\n              Imperial (miles, ┬░F)\r\n            </Text>\r\n          </Pressable>\r\n          <Pressable\r\n            style={[\r\n              styles.optionButton,\r\n              userPreferences.preferredUnits === \"metric\" && styles.selectedOption\r\n            ]}\r\n            onPress={() => updatePreferences({ preferredUnits: \"metric\" })}\r\n          >\r\n            <Text style={[\r\n              styles.optionText,\r\n              userPreferences.preferredUnits === \"metric\" && styles.selectedOptionText\r\n            ]}>\r\n              Metric (km, ┬░C)\r\n            </Text>\r\n          </Pressable>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.preferenceSection}>\r\n        <Text style={styles.sectionTitle}>Accessibility</Text>\r\n        <Pressable\r\n          style={[\r\n            styles.toggleOption,\r\n            userPreferences.accessibilityMode && styles.selectedToggle\r\n          ]}\r\n          onPress={() => updatePreferences({ \r\n            accessibilityMode: !userPreferences.accessibilityMode \r\n          })}\r\n        >\r\n          <Text style={styles.toggleText}>Enable accessibility features</Text>\r\n          {userPreferences.accessibilityMode && (\r\n            <CheckCircle size={20} color={Colors.success} />\r\n          )}\r\n        </Pressable>\r\n      </View>\r\n\r\n      <Pressable style={styles.primaryButton} onPress={handlePreferencesComplete}>\r\n        <Text style={styles.buttonText}>Continue</Text>\r\n      </Pressable>\r\n    </ScrollView>\r\n  );\r\n\r\n  const renderSafety = () => (\r\n    <ScrollView style={styles.scrollContainer} contentContainerStyle={styles.scrollContentContainer}>\r\n      <View style={styles.iconContainer}>\r\n        <Shield size={48} color={Colors.primary} />\r\n      </View>\r\n      <Text style={styles.stepTitle}>Safety First</Text>\r\n      <Text style={styles.stepDescription}>\r\n        KidMap includes safety features to help you travel confidently.\r\n      </Text>\r\n\r\n      <View style={styles.safetyFeatures}>\r\n        <View style={styles.featureItem}>\r\n          <Shield size={24} color={Colors.success} />\r\n          <Text style={styles.featureText}>Emergency contact buttons</Text>\r\n        </View>\r\n        <View style={styles.featureItem}>\r\n          <MapPin size={24} color={Colors.success} />\r\n          <Text style={styles.featureText}>Location sharing with parents</Text>\r\n        </View>\r\n        <View style={styles.featureItem}>\r\n          <CheckCircle size={24} color={Colors.success} />\r\n          <Text style={styles.featureText}>Safe arrival notifications</Text>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.preferenceSection}>\r\n        <Pressable\r\n          style={[\r\n            styles.toggleOption,\r\n            userPreferences.parentalControls && styles.selectedToggle\r\n          ]}\r\n          onPress={() => updatePreferences({ \r\n            parentalControls: !userPreferences.parentalControls \r\n          })}\r\n        >\r\n          <Text style={styles.toggleText}>Enable parental controls</Text>\r\n          {userPreferences.parentalControls && (\r\n            <CheckCircle size={20} color={Colors.success} />\r\n          )}\r\n        </Pressable>\r\n      </View>\r\n\r\n      <Pressable style={styles.primaryButton} onPress={handleSafetyComplete}>\r\n        <Text style={styles.buttonText}>Continue</Text>\r\n      </Pressable>\r\n    </ScrollView>\r\n  );\r\n\r\n  const renderComplete = () => (\r\n    <View style={styles.stepContainer}>\r\n      <View style={styles.iconContainer}>\r\n        <CheckCircle size={48} color={Colors.success} />\r\n      </View>\r\n      <Text style={styles.stepTitle}>You're All Set!</Text>\r\n      <Text style={styles.stepDescription}>\r\n        KidMap is now configured for your region and preferences. \r\n        Start exploring your city safely!\r\n      </Text>\r\n      <Pressable style={styles.primaryButton} onPress={handleComplete}>\r\n        <Text style={styles.buttonText}>Start Using KidMap</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n\r\n  const renderCurrentStep = () => {\r\n    switch (currentStep) {\r\n      case \"welcome\": return renderWelcome();\r\n      case \"region\": return renderRegionSelection();\r\n      case \"preferences\": return renderPreferences();\r\n      case \"safety\": return renderSafety();\r\n      case \"complete\": return renderComplete();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {renderCurrentStep()}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  buttonText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  featureItem: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 12,\r\n    marginBottom: 16,\r\n  },\r\n  featureText: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n  },\r\n  iconContainer: {\r\n    alignItems: \"center\",\r\n    marginBottom: 24,\r\n  },\r\n  optionButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderColor: \"transparent\",\r\n    borderRadius: 8,\r\n    borderWidth: 2,\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  optionRow: {\r\n    flexDirection: \"row\",\r\n    gap: 12,\r\n  },\r\n  optionText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n  preferenceSection: {\r\n    marginBottom: 24,\r\n  },\r\n  primaryButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 12,\r\n    marginTop: 24,\r\n    paddingHorizontal: 32,\r\n    paddingVertical: 16,\r\n  },\r\n  safetyFeatures: {\r\n    marginBottom: 24,\r\n  },\r\n  scrollContainer: {\r\n    flex: 1,\r\n  },\r\n  scrollContentContainer: {\r\n    flexGrow: 1,\r\n    justifyContent: \"center\",\r\n    padding: 24,\r\n  },\r\n  sectionTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n    marginBottom: 12,\r\n  },\r\n  selectedOption: {\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderColor: Colors.primary,\r\n  },\r\n  selectedOptionText: {\r\n    color: Colors.primary,\r\n    fontWeight: \"600\",\r\n  },\r\n  selectedToggle: {\r\n    backgroundColor: \"#F0FFF4\",\r\n    borderColor: Colors.success,\r\n  },\r\n  stepContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 24,\r\n  },\r\n  stepDescription: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    lineHeight: 24,\r\n    marginBottom: 32,\r\n    textAlign: \"center\",\r\n  },\r\n  stepTitle: {\r\n    color: Colors.text,\r\n    fontSize: 28,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  toggleOption: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderColor: \"transparent\",\r\n    borderRadius: 8,\r\n    borderWidth: 2,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    padding: 16,\r\n  },\r\n  toggleText: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n  },\r\n});\r\n\r\nexport default OnboardingFlow;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\OptimizedImage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[320,323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[320,323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":43,"column":36,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":43,"endColumn":52},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":77,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":77,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Image } from \"expo-image\";\r\nimport { ImageOff } from \"lucide-react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, View, ActivityIndicator } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\n\r\n\r\ntype OptimizedImageProps = {\r\n  source: { uri: string } | number;\r\n  style?: any;\r\n  placeholder?: string;\r\n  contentFit?: \"cover\" | \"contain\" | \"fill\" | \"none\" | \"scale-down\";\r\n  onLoad?: () => void;\r\n  onError?: () => void;\r\n};\r\n\r\nconst OptimizedImage: React.FC<OptimizedImageProps> = ({\r\n  source,\r\n  style,\r\n  placeholder,\r\n  contentFit = \"cover\",\r\n  onLoad,\r\n  onError,\r\n}) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleLoad = () => {\r\n    setLoading(false);\r\n    onLoad?.();\r\n  };\r\n\r\n  const handleError = () => {\r\n    setLoading(false);\r\n    setError(true);\r\n    onError?.();\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <View style={[styles.errorContainer, style]}>\r\n        <ImageOff size={24} color={Colors.textLight} />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={style}>\r\n      <Image\r\n        source={source}\r\n        style={StyleSheet.absoluteFill}\r\n        contentFit={contentFit}\r\n        placeholder={placeholder}\r\n        onLoad={handleLoad}\r\n        onError={handleError}\r\n        cachePolicy=\"memory-disk\"\r\n      />\r\n      {loading && (\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator size=\"small\" color={Colors.primary} />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  errorContainer: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.border,\r\n    justifyContent: \"center\",\r\n  },\r\n  loadingContainer: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n\r\nexport default OptimizedImage;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\ParentDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\PhotoCheckInButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'View' is defined but never used.","line":4,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":126,"column":14,"nodeType":"ObjectExpression","endLine":140,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":147,"column":9,"nodeType":"ObjectExpression","endLine":151,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as ImagePicker from \"expo-image-picker\";\nimport { Camera, MapPin } from \"lucide-react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable, Alert, Platform } from \"react-native\";\n\r\nimport Toast from './Toast';\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { PhotoCheckInSchema, safeParseWithToast } from '@/core/validation';\r\nimport { useToast } from '@/hooks/useToast';\nimport { useNavigationStore } from \"@/stores/navigationStore\";\r\n\r\n\r\ntype PhotoCheckInButtonProps = {\r\n  placeName: string;\r\n  placeId: string;\r\n};\r\n\r\nconst PhotoCheckInButton: React.FC<PhotoCheckInButtonProps> = ({ placeName, placeId }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { toast, showToast, hideToast } = useToast();\r\n  const { addPhotoCheckIn } = useNavigationStore();\r\n\r\n  const handlePhotoCheckIn = async () => {\r\n    if (Platform.OS === 'web') {\r\n      const data = {\r\n        placeId,\r\n        placeName,\r\n        photoUrl: \"https://via.placeholder.com/300x200?text=Check-in+Photo\",\r\n        timestamp: Date.now(),\r\n        notes: \"Checked in successfully!\"\r\n      };\r\n      const parsed = safeParseWithToast(PhotoCheckInSchema, data, showToast);\r\n      if (!parsed) return;\r\n      addPhotoCheckIn(parsed);\r\n      showToast(`Check-in recorded for ${placeName}`, 'success');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Android-specific permission handling\r\n      const permissionResult = await ImagePicker.requestCameraPermissionsAsync();\r\n      if (!permissionResult.granted) {\r\n        if (Platform.OS === 'android') {\r\n          Alert.alert(\r\n            \"Camera Permission\", \r\n            \"Camera permission is required for photo check-ins. Please enable camera access in your device settings.\",\r\n            [\r\n              { text: \"Cancel\", style: \"cancel\" },\r\n              { text: \"Settings\", onPress: () => {\r\n                Alert.alert(\"Enable Camera\", \"Go to Settings > Apps > KidMap > Permissions > Camera\");\r\n              }}\r\n            ]\r\n          );\r\n        } else {\r\n          Alert.alert(\"Permission needed\", \"Camera permission is required for photo check-ins\");\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Android-optimized camera options\r\n      const cameraOptions = Platform.OS === 'android' \r\n        ? {\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            aspect: [4, 3] as [number, number],\r\n            quality: 0.6, // Lower quality for Android to prevent memory issues\r\n            exif: false, // Disable EXIF data on Android for privacy\r\n          }\r\n        : {\r\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n            allowsEditing: true,\r\n            aspect: [4, 3] as [number, number],\r\n            quality: 0.7,\r\n          };\r\n\r\n      const result = await ImagePicker.launchCameraAsync(cameraOptions);\r\n\r\n      if (!result.canceled && result.assets[0]) {\r\n        const data = {\r\n          placeId,\r\n          placeName,\r\n          photoUrl: result.assets[0].uri,\r\n          timestamp: Date.now(),\r\n          notes: \"Safe arrival confirmed!\"\r\n        };\r\n        const parsed = safeParseWithToast(PhotoCheckInSchema, data, showToast);\r\n        if (!parsed) return;\r\n        addPhotoCheckIn(parsed);\r\n        showToast(`Arrived at ${placeName}!`, 'success');\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Camera error:\", error);\r\n      showToast('Could not take photo. Please try again.', 'error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Pressable \r\n        style={[styles.container, isLoading && styles.loading]}\r\n        onPress={handlePhotoCheckIn}\r\n        disabled={isLoading}\r\n      >\r\n        <Camera size={20} color=\"#FFFFFF\" />\r\n        <Text style={styles.text}>\r\n          {isLoading ? \"Taking Photo...\" : \"Photo Check-in\"}\r\n        </Text>\r\n        <MapPin size={16} color=\"#FFFFFF\" style={styles.locationIcon} />\r\n      </Pressable>\r\n      <Toast \r\n        message={toast.message} \r\n        type={toast.type} \r\n        visible={toast.visible} \r\n        onHide={hideToast} \r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.secondary,\r\n    borderRadius: 12,\r\n    elevation: 3,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    justifyContent: \"center\",\r\n    margin: 16,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n  },\r\n  loading: {\r\n    opacity: 0.7,\r\n  },\r\n  locationIcon: {\r\n    marginLeft: 4,\r\n  },\r\n  text: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default PhotoCheckInButton;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\PhotoCheckInHistory.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":20,"column":34,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":20,"endColumn":50},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":39,"column":41,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":39,"endColumn":57},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":74,"column":40,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":74,"endColumn":56},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":94,"column":16,"nodeType":"ObjectExpression","endLine":104,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":95,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":95,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":117,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":117,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":138,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":138,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":160,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":160,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FEE2E2' }","line":174,"column":20,"nodeType":"ObjectExpression","endLine":176,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#EF4444' }","line":177,"column":19,"nodeType":"ObjectExpression","endLine":179,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#DCFCE7' }","line":192,"column":18,"nodeType":"ObjectExpression","endLine":194,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#10B981' }","line":195,"column":17,"nodeType":"ObjectExpression","endLine":197,"endColumn":4}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CheckCircle, XCircle, MapPin, Clock } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, ScrollView, Image } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useNavigationStore } from \"@/stores/navigationStore\";\r\nimport { formatDistance, getLocationAccuracyDescription } from \"@/utils/locationUtils\";\r\n\r\nconst PhotoCheckInHistory: React.FC = () => {\r\n  const { photoCheckIns } = useNavigationStore();\r\n\r\n  const formatTimestamp = (timestamp: number) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  if (photoCheckIns.length === 0) {\r\n    return (\r\n      <View style={styles.emptyContainer}>\r\n        <MapPin size={40} color={Colors.textLight} />\r\n        <Text style={styles.emptyText}>No check-ins yet</Text>\r\n        <Text style={styles.emptySubtext}>\r\n          Take a photo check-in when you arrive at your destination!\r\n        </Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\r\n      <Text style={styles.title}>Photo Check-in History</Text>\r\n      \r\n      {photoCheckIns.map((checkIn) => (\r\n        <View key={checkIn.id} style={styles.checkInCard}>\r\n          <View style={styles.cardHeader}>\r\n            <View style={styles.headerLeft}>\r\n              <Text style={styles.placeName}>{checkIn.placeName}</Text>\r\n              <View style={styles.timestampRow}>\r\n                <Clock size={14} color={Colors.textLight} />\r\n                <Text style={styles.timestamp}>\r\n                  {formatTimestamp(checkIn.timestamp)}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            \r\n            {checkIn.isLocationVerified !== undefined && (\r\n              <View style={[\r\n                styles.verificationBadge,\r\n                checkIn.isLocationVerified ? styles.verifiedBadge : styles.unverifiedBadge\r\n              ]}>\r\n                {checkIn.isLocationVerified ? (\r\n                  <CheckCircle size={16} color=\"#10B981\" />\r\n                ) : (\r\n                  <XCircle size={16} color=\"#EF4444\" />\r\n                )}\r\n                <Text style={[\r\n                  styles.verificationText,\r\n                  checkIn.isLocationVerified ? styles.verifiedText : styles.unverifiedText\r\n                ]}>\r\n                  {checkIn.isLocationVerified ? \"Verified\" : \"Unverified\"}\r\n                </Text>\r\n              </View>\r\n            )}\r\n          </View>\r\n\r\n          <Image source={{ uri: checkIn.photoUrl }} style={styles.photo} />\r\n          \r\n          {checkIn.notes && (\r\n            <Text style={styles.notes}>{checkIn.notes}</Text>\r\n          )}\r\n          \r\n          {checkIn.distanceFromPlace !== undefined && (\r\n            <View style={styles.locationInfo}>\r\n              <MapPin size={14} color={Colors.textLight} />\r\n              <Text style={styles.locationText}>\r\n                {getLocationAccuracyDescription(checkIn.distanceFromPlace)} \r\n                ({formatDistance(checkIn.distanceFromPlace)} from destination)\r\n              </Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n      ))}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  cardHeader: {\r\n    alignItems: \"flex-start\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 12,\r\n  },\r\n  checkInCard: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    elevation: 3,\r\n    marginBottom: 16,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  emptyContainer: {\r\n    alignItems: \"center\",\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 32,\r\n  },\r\n  emptySubtext: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n    textAlign: \"center\",\r\n  },\r\n  emptyText: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n    marginTop: 16,\r\n  },\r\n  headerLeft: {\r\n    flex: 1,\r\n  },\r\n  locationInfo: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n  },\r\n  locationText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  notes: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontStyle: \"italic\",\r\n    marginBottom: 8,\r\n  },\r\n  photo: {\r\n    borderRadius: 8,\r\n    height: 200,\r\n    marginBottom: 12,\r\n    width: \"100%\",\r\n  },\r\n  placeName: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  timestamp: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  timestampRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 20,\r\n    fontWeight: \"700\",\r\n    marginBottom: 16,\r\n  },\r\n  unverifiedBadge: {\r\n    backgroundColor: \"#FEE2E2\",\r\n  },\r\n  unverifiedText: {\r\n    color: \"#EF4444\",\r\n  },\r\n  verificationBadge: {\r\n    alignItems: \"center\",\r\n    borderRadius: 12,\r\n    flexDirection: \"row\",\r\n    gap: 4,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 4,\r\n  },\r\n  verificationText: {\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n  },\r\n  verifiedBadge: {\r\n    backgroundColor: \"#DCFCE7\",\r\n  },\r\n  verifiedText: {\r\n    color: \"#10B981\",\r\n  },\r\n});\r\n\r\nexport default PhotoCheckInHistory;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\PinAuthentication.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":19},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":122,"column":40,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":122,"endColumn":56},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":124,"column":37,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":124,"endColumn":53},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":211,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":211,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":233,"column":18,"nodeType":"ObjectExpression","endLine":241,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":245,"column":17,"nodeType":"ObjectExpression","endLine":257,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":247,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":247,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: 'transparent' }","line":258,"column":22,"nodeType":"ObjectExpression","endLine":262,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":300,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":300,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":312,"column":21,"nodeType":"ObjectExpression","endLine":316,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":318,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":318,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Lock, Eye, EyeOff } from 'lucide-react-native';\r\nimport React, { useState } from 'react';\r\nimport { StyleSheet, Text, View, Pressable, TextInput } from 'react-native';\n\r\nimport Toast from './Toast';\n\r\nimport Colors from '@/constants/colors';\r\nimport { useToast } from '@/hooks/useToast';\n\r\n\r\ntype PinAuthenticationProps = {\r\n  onAuthenticated: () => void;\r\n  onCancel: () => void;\r\n  isSettingPin?: boolean;\r\n  title?: string;\r\n  subtitle?: string;\r\n};\r\n\r\nconst PinAuthentication: React.FC<PinAuthenticationProps> = ({\r\n  onAuthenticated,\r\n  onCancel,\r\n  isSettingPin = false,\r\n  title = 'Parent Mode',\r\n  subtitle = 'Enter your PIN to access parental controls',\r\n}) => {\r\n  const [pin, setPin] = useState('');\r\n  const [confirmPin, setConfirmPin] = useState('');\r\n  const [showPin, setShowPin] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [step, setStep] = useState<'enter' | 'confirm'>('enter');\r\n  const { toast, showToast, hideToast } = useToast();\r\n\r\n  const handlePinSubmit = async () => {\r\n    if (pin.length < 4) {\r\n      showToast('PIN must be at least 4 digits', 'error');\r\n      return;\r\n    }\r\n\r\n    if (isSettingPin) {\r\n      if (step === 'enter') {\r\n        setStep('confirm');\r\n        return;\r\n      }\r\n\r\n      if (pin !== confirmPin) {\r\n        showToast('PINs do not match', 'error');\r\n        setPin('');\r\n        setConfirmPin('');\r\n        setStep('enter');\r\n        return;\r\n      }\r\n    }\r\n\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // In a real app, this would validate against stored PIN\r\n      // For now, we'll simulate authentication\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      onAuthenticated();\r\n    } catch (error) {\r\n      showToast('Authentication failed', 'error');\r\n      setPin('');\r\n      setConfirmPin('');\r\n      setStep('enter');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleNumberPress = (number: string) => {\r\n    if (step === 'enter') {\r\n      if (pin.length < 6) {\r\n        setPin(prev => prev + number);\r\n      }\r\n    } else {\r\n      if (confirmPin.length < 6) {\r\n        setConfirmPin(prev => prev + number);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBackspace = () => {\r\n    if (step === 'enter') {\r\n      setPin(prev => prev.slice(0, -1));\r\n    } else {\r\n      setConfirmPin(prev => prev.slice(0, -1));\r\n    }\r\n  };\r\n\r\n  const currentPin = step === 'enter' ? pin : confirmPin;\r\n  const currentTitle = step === 'enter' ? title : 'Confirm PIN';\r\n  const currentSubtitle = step === 'enter' ? subtitle : 'Enter your PIN again to confirm';\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <View style={styles.iconContainer}>\r\n          <Lock size={32} color={Colors.primary} />\r\n        </View>\r\n        <Text style={styles.title}>{currentTitle}</Text>\r\n        <Text style={styles.subtitle}>{currentSubtitle}</Text>\r\n      </View>\r\n\r\n      <View style={styles.pinContainer}>\r\n        <View style={styles.pinInputContainer}>\r\n          <TextInput\r\n            style={styles.pinInput}\r\n            value={currentPin}\r\n            onChangeText={step === 'enter' ? setPin : setConfirmPin}\r\n            placeholder=\"Enter PIN\"\r\n            secureTextEntry={!showPin}\r\n            keyboardType=\"numeric\"\r\n            maxLength={6}\r\n            textAlign=\"center\"\r\n          />\r\n          <Pressable\r\n            style={styles.eyeButton}\r\n            onPress={() => setShowPin(!showPin)}\r\n          >\r\n            {showPin ? (\r\n              <EyeOff size={20} color={Colors.textLight} />\r\n            ) : (\r\n              <Eye size={20} color={Colors.textLight} />\r\n            )}\r\n          </Pressable>\r\n        </View>\r\n\r\n        <View style={styles.pinDots}>\r\n          {Array.from({ length: 6 }).map((_, index) => (\r\n            <View\r\n              key={index}\r\n              style={[\r\n                styles.pinDot,\r\n                index < currentPin.length && styles.pinDotFilled,\r\n              ]}\r\n            />\r\n          ))}\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.keypad}>\r\n        {[\r\n          ['1', '2', '3'],\r\n          ['4', '5', '6'],\r\n          ['7', '8', '9'],\r\n          ['', '0', 'Γî½'],\r\n        ].map((row, rowIndex) => (\r\n          <View key={rowIndex} style={styles.keypadRow}>\r\n            {row.map((key, keyIndex) => (\r\n              <Pressable\r\n                key={keyIndex}\r\n                style={[\r\n                  styles.keypadButton,\r\n                  key === '' && styles.keypadButtonEmpty,\r\n                ]}\r\n                onPress={() => {\r\n                  if (key === 'Γî½') {\r\n                    handleBackspace();\r\n                  } else if (key !== '') {\r\n                    handleNumberPress(key);\r\n                  }\r\n                }}\r\n                disabled={key === ''}\r\n              >\r\n                <Text style={styles.keypadButtonText}>{key}</Text>\r\n              </Pressable>\r\n            ))}\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      <View style={styles.actions}>\r\n        <Pressable\r\n          style={[styles.actionButton, styles.submitButton]}\r\n          onPress={handlePinSubmit}\r\n          disabled={isLoading || currentPin.length < 4}\r\n        >\r\n          <Text style={styles.submitButtonText}>\r\n            {isLoading ? 'Verifying...' : step === 'confirm' ? 'Confirm' : 'Submit'}\r\n          </Text>\r\n        </Pressable>\r\n\r\n        <Pressable\r\n          style={[styles.actionButton, styles.cancelButton]}\r\n          onPress={onCancel}\r\n        >\r\n          <Text style={styles.cancelButtonText}>Cancel</Text>\r\n        </Pressable>\r\n      </View>\r\n      <Toast \r\n        message={toast.message}\r\n        type={toast.type}\r\n        visible={toast.visible}\r\n        onHide={hideToast}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignItems: 'center',\r\n    borderRadius: 12,\r\n    paddingVertical: 16,\r\n  },\r\n  actions: {\r\n    gap: 12,\r\n  },\r\n  cancelButton: {\r\n    backgroundColor: Colors.card,\r\n    borderColor: Colors.border,\r\n    borderWidth: 1,\r\n  },\r\n  cancelButtonText: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    padding: 24,\r\n  },\r\n  eyeButton: {\r\n    padding: 4,\r\n  },\r\n  header: {\r\n    alignItems: 'center',\r\n    marginBottom: 40,\r\n  },\r\n  iconContainer: {\r\n    alignItems: 'center',\r\n    backgroundColor: '#F0F4FF',\r\n    borderRadius: 40,\r\n    height: 80,\r\n    justifyContent: 'center',\r\n    marginBottom: 16,\r\n    width: 80,\r\n  },\r\n  keypad: {\r\n    marginBottom: 40,\r\n  },\r\n  keypadButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 30,\r\n    elevation: 2,\r\n    height: 60,\r\n    justifyContent: 'center',\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    width: 60,\r\n  },\r\n  keypadButtonEmpty: {\r\n    backgroundColor: 'transparent',\r\n    elevation: 0,\r\n    shadowOpacity: 0,\r\n  },\r\n  keypadButtonText: {\r\n    color: Colors.text,\r\n    fontSize: 24,\r\n    fontWeight: '600',\r\n  },\r\n  keypadRow: {\r\n    flexDirection: 'row',\r\n    gap: 20,\r\n    justifyContent: 'center',\r\n    marginBottom: 16,\r\n  },\r\n  pinContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 40,\r\n  },\r\n  pinDot: {\r\n    backgroundColor: Colors.border,\r\n    borderRadius: 6,\r\n    height: 12,\r\n    width: 12,\r\n  },\r\n  pinDotFilled: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  pinDots: {\r\n    flexDirection: 'row',\r\n    gap: 12,\r\n  },\r\n  pinInput: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    letterSpacing: 4,\r\n  },\r\n  pinInputContainer: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.card,\r\n    borderColor: Colors.border,\r\n    borderRadius: 12,\r\n    borderWidth: 2,\r\n    flexDirection: 'row',\r\n    marginBottom: 20,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 12,\r\n  },\r\n  submitButton: {\r\n    backgroundColor: Colors.primary,\r\n  },\r\n  submitButtonText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  },\r\n  subtitle: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    lineHeight: 22,\r\n    textAlign: 'center',\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 24,\r\n    fontWeight: '700',\r\n    marginBottom: 8,\r\n  },\r\n});\r\n\r\nexport default PinAuthentication;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\PlaceCard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":62,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":62,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":65,"column":14,"nodeType":"ObjectExpression","endLine":77,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":67,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":67,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#EEF2FF' }","line":78,"column":18,"nodeType":"ObjectExpression","endLine":86,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#EAEAEA' }","line":93,"column":12,"nodeType":"ObjectExpression","endLine":96,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Home, School, BookOpen, Trees, Store, Utensils, Users, Heart, MapPin } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { Place } from \"@/types/navigation\";\r\n\r\ntype PlaceCardProps = {\r\n  place: Place;\r\n  onPress: (place: Place) => void;\r\n};\r\n\r\nconst PlaceCard: React.FC<PlaceCardProps> = ({ place, onPress }) => {\r\n  const getIcon = () => {\r\n    switch (place.category) {\r\n      case \"home\":\r\n        return <Home size={24} color={Colors.primary} />;\r\n      case \"school\":\r\n        return <School size={24} color={Colors.primary} />;\r\n      case \"library\":\r\n        return <BookOpen size={24} color={Colors.primary} />;\r\n      case \"park\":\r\n        return <Trees size={24} color={Colors.primary} />;\r\n      case \"store\":\r\n        return <Store size={24} color={Colors.primary} />;\r\n      case \"restaurant\":\r\n        return <Utensils size={24} color={Colors.primary} />;\r\n      case \"friend\":\r\n        return <Users size={24} color={Colors.primary} />;\r\n      case \"family\":\r\n        return <Heart size={24} color={Colors.primary} />;\r\n      default:\r\n        return <MapPin size={24} color={Colors.primary} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Pressable \r\n      accessibilityRole=\"button\"\r\n      accessibilityLabel={`Place ${place.name}`}\r\n      hitSlop={8}\r\n      style={({ pressed }) => [\r\n        styles.container,\r\n        pressed && styles.pressed\r\n      ]}\r\n      onPress={() => onPress(place)}\r\n      testID={`place-card-${place.id}`}\r\n    >\r\n      <View style={styles.iconContainer}>\r\n        {getIcon()}\r\n      </View>\r\n      <View style={styles.textContainer}>\r\n        <Text style={styles.name}>{place.name}</Text>\r\n        <Text style={styles.address} numberOfLines={1}>{place.address}</Text>\r\n      </View>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  address: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    elevation: 2,\r\n    flexDirection: \"row\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n  },\r\n  iconContainer: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#EEF2FF\",\r\n    borderRadius: 24,\r\n    height: 48,\r\n    justifyContent: \"center\",\r\n    marginRight: 16,\r\n    width: 48,\r\n  },\r\n  name: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  pressed: {\r\n    backgroundColor: \"#EAEAEA\",\r\n    opacity: 0.8,\r\n  },\r\n  textContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nexport default PlaceCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\PullToRefresh.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":36,"column":36,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":36,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport { ScrollView, RefreshControl, Platform } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype PullToRefreshProps = {\r\n  children: React.ReactNode;\r\n  onRefresh: () => Promise<void>;\r\n  refreshing?: boolean;\r\n};\r\n\r\nconst PullToRefresh: React.FC<PullToRefreshProps> = ({\r\n  children,\r\n  onRefresh,\r\n  refreshing = false,\r\n}) => {\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    try {\r\n      await onRefresh();\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ScrollView\r\n      refreshControl={\r\n        <RefreshControl\r\n          refreshing={refreshing || isRefreshing}\r\n          onRefresh={handleRefresh}\r\n          tintColor={Colors.primary}\r\n          colors={[Colors.primary]}\r\n          progressBackgroundColor={Colors.card}\r\n          // Android-specific styling\r\n          {...(Platform.OS === 'android' && {\r\n            progressViewOffset: 20,\r\n          })}\r\n        />\r\n      }\r\n    >\r\n      {children}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default PullToRefresh;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\RegionSelector.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":66,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":66,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":71,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":71,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderColor: 'transparent' }","line":79,"column":15,"nodeType":"ObjectExpression","endLine":89,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":81,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":81,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":103,"column":19,"nodeType":"ObjectExpression","endLine":106,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":108,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":108,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MapPin, Check } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, FlatList, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { RegionConfig } from \"@/types/region\";\r\n\r\ntype RegionSelectorProps = {\r\n  regions: RegionConfig[];\r\n  selectedRegion: string;\r\n  onSelectRegion: (regionId: string) => void;\r\n};\r\n\r\nconst RegionSelector: React.FC<RegionSelectorProps> = ({\r\n  regions,\r\n  selectedRegion,\r\n  onSelectRegion,\r\n}) => {\r\n  const renderRegion = ({ item }: { item: RegionConfig }) => (\r\n    <Pressable\r\n      style={[\r\n        styles.regionItem,\r\n        selectedRegion === item.id && styles.selectedRegion\r\n      ]}\r\n      onPress={() => onSelectRegion(item.id)}\r\n    >\r\n      <View style={styles.regionInfo}>\r\n        <MapPin size={24} color={Colors.primary} />\r\n        <View style={styles.regionText}>\r\n          <Text style={styles.regionName}>{item.name}</Text>\r\n          <Text style={styles.regionCountry}>{item.country}</Text>\r\n          <Text style={styles.regionDetails}>\r\n            {item.transitSystems.length} transit systems ΓÇó {item.currency}\r\n          </Text>\r\n        </View>\r\n      </View>\r\n      {selectedRegion === item.id && (\r\n        <Check size={24} color={Colors.success} />\r\n      )}\r\n    </Pressable>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Choose Your Region</Text>\r\n      <Text style={styles.subtitle}>\r\n        Select your city to get accurate transit information and local content.\r\n      </Text>\r\n      \r\n      <FlatList\r\n        data={regions}\r\n        renderItem={renderRegion}\r\n        keyExtractor={(item) => item.id}\r\n        contentContainerStyle={styles.regionsList}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  regionCountry: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    marginBottom: 2,\r\n  },\r\n  regionDetails: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  regionInfo: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    flex: 1,\r\n  },\r\n  regionItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderColor: \"transparent\",\r\n    borderRadius: 12,\r\n    borderWidth: 2,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 12,\r\n    padding: 16,\r\n  },\r\n  regionName: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  regionText: {\r\n    flex: 1,\r\n    marginLeft: 16,\r\n  },\r\n  regionsList: {\r\n    paddingBottom: 16,\r\n  },\r\n  selectedRegion: {\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderColor: Colors.primary,\r\n  },\r\n  subtitle: {\r\n    color: Colors.textLight,\r\n    fontSize: 16,\r\n    lineHeight: 22,\r\n    marginBottom: 24,\r\n    textAlign: \"center\",\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 24,\r\n    fontWeight: \"700\",\r\n    marginBottom: 8,\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default RegionSelector;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\RegionSwitcher.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":73,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":73,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Globe, X } from \"lucide-react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable, Modal } from \"react-native\";\n\r\nimport RegionSelector from \"./RegionSelector\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useRegionStore } from \"@/stores/regionStore\";\r\n\r\nconst RegionSwitcher: React.FC = () => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const { currentRegion, availableRegions, userPreferences, setRegion } = useRegionStore();\r\n\r\n  const handleRegionSelect = (regionId: string) => {\r\n    setRegion(regionId);\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Pressable style={styles.trigger} onPress={() => setShowModal(true)}>\r\n        <Globe size={20} color={Colors.primary} />\r\n        <Text style={styles.triggerText}>{currentRegion.name}</Text>\r\n      </Pressable>\r\n\r\n      <Modal\r\n        visible={showModal}\r\n        animationType=\"slide\"\r\n        presentationStyle=\"pageSheet\"\r\n      >\r\n        <View style={styles.modalContainer}>\r\n          <View style={styles.modalHeader}>\r\n            <Text style={styles.modalTitle}>Switch Region</Text>\r\n            <Pressable style={styles.closeButton} onPress={() => setShowModal(false)}>\r\n              <X size={24} color={Colors.text} />\r\n            </Pressable>\r\n          </View>\r\n          \r\n          <RegionSelector\r\n            regions={availableRegions}\r\n            selectedRegion={userPreferences.selectedRegion}\r\n            onSelectRegion={handleRegionSelect}\r\n          />\r\n        </View>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  closeButton: {\r\n    padding: 4,\r\n  },\r\n  modalContainer: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  modalHeader: {\r\n    alignItems: \"center\",\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    padding: 16,\r\n  },\r\n  modalTitle: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n  },\r\n  trigger: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 8,\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 8,\r\n  },\r\n  triggerText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n});\r\n\r\nexport default RegionSwitcher;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\RegionalFunFactCard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":31,"column":33,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":31,"endColumn":49},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0FFF4', shadowColor: '#000' }","line":42,"column":14,"nodeType":"ObjectExpression","endLine":54,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Lightbulb, X } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useRegionalData } from \"@/hooks/useRegionalData\";\r\n\r\ntype RegionalFunFactCardProps = {\r\n  onDismiss?: () => void;\r\n};\r\n\r\nconst RegionalFunFactCard: React.FC<RegionalFunFactCardProps> = ({ onDismiss }) => {\r\n  const { regionalContent, currentRegion } = useRegionalData();\r\n  \r\n  // Get a random fun fact from the current region\r\n  const randomFact = regionalContent.funFacts[\r\n    Math.floor(Math.random() * regionalContent.funFacts.length)\r\n  ];\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <View style={styles.iconContainer}>\r\n          <Lightbulb size={20} color={Colors.secondary} />\r\n        </View>\r\n        <Text style={styles.title}>\r\n          Fun Fact about {currentRegion.name}\r\n        </Text>\r\n        {onDismiss && (\r\n          <Pressable style={styles.dismissButton} onPress={onDismiss}>\r\n            <X size={16} color={Colors.textLight} />\r\n          </Pressable>\r\n        )}\r\n      </View>\r\n      \r\n      <Text style={styles.factText}>{randomFact}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"#F0FFF4\",\r\n    borderLeftColor: Colors.secondary,\r\n    borderLeftWidth: 4,\r\n    borderRadius: 12,\r\n    elevation: 2,\r\n    margin: 16,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n  },\r\n  dismissButton: {\r\n    padding: 4,\r\n  },\r\n  factText: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n  },\r\n  header: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 8,\r\n  },\r\n  iconContainer: {\r\n    marginRight: 8,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default RegionalFunFactCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\RegionalTransitCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TransitStepIndicator' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":71,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":71,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":95,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":95,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":129,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":129,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Train, Bus, Navigation, Ship } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, FlatList } from \"react-native\";\n\r\nimport TransitStepIndicator from \"./TransitStepIndicator\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useRegionStore } from \"@/stores/regionStore\";\r\n\r\nconst RegionalTransitCard: React.FC = () => {\r\n  const { currentRegion, getCurrentTransitSystems } = useRegionStore();\r\n  const transitSystems = getCurrentTransitSystems();\r\n\r\n  const getTransitIcon = (type: string) => {\r\n    switch (type) {\r\n      case \"subway\":\r\n      case \"train\":\r\n        return <Train size={20} color=\"#FFFFFF\" />;\r\n      case \"bus\":\r\n        return <Bus size={20} color=\"#FFFFFF\" />;\r\n      case \"tram\":\r\n        return <Navigation size={20} color=\"#FFFFFF\" />;\r\n      case \"ferry\":\r\n        return <Ship size={20} color=\"#FFFFFF\" />;\r\n      default:\r\n        return <Train size={20} color=\"#FFFFFF\" />;\r\n    }\r\n  };\r\n\r\n  const renderTransitSystem = ({ item }: { item: typeof transitSystems[0] }) => (\r\n    <View style={styles.transitItem}>\r\n      <View style={[styles.transitIcon, { backgroundColor: item.color }]}>\r\n        {getTransitIcon(item.type)}\r\n      </View>\r\n      <View style={styles.transitInfo}>\r\n        <Text style={styles.transitName}>{item.name}</Text>\r\n        <Text style={styles.transitType}>\r\n          {item.type.charAt(0).toUpperCase() + item.type.slice(1)}\r\n          {item.routes && ` ΓÇó ${item.routes.length} lines`}\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.title}>Transit Systems in {currentRegion.name}</Text>\r\n        <Text style={styles.subtitle}>{currentRegion.country}</Text>\r\n      </View>\r\n\r\n      <FlatList\r\n        data={transitSystems}\r\n        renderItem={renderTransitSystem}\r\n        keyExtractor={(item) => item.id}\r\n        scrollEnabled={false}\r\n        contentContainerStyle={styles.transitList}\r\n      />\r\n\r\n      <View style={styles.footer}>\r\n        <Text style={styles.footerText}>\r\n          Emergency: {currentRegion.emergencyNumber}\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    margin: 16,\r\n    padding: 16,\r\n  },\r\n  footer: {\r\n    borderTopColor: Colors.border,\r\n    borderTopWidth: 1,\r\n    marginTop: 16,\r\n    paddingTop: 12,\r\n  },\r\n  footerText: {\r\n    color: Colors.error,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n    textAlign: \"center\",\r\n  },\r\n  header: {\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    marginBottom: 16,\r\n    paddingBottom: 12,\r\n  },\r\n  subtitle: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n    marginBottom: 4,\r\n  },\r\n  transitIcon: {\r\n    alignItems: \"center\",\r\n    borderRadius: 20,\r\n    height: 40,\r\n    justifyContent: \"center\",\r\n    marginRight: 12,\r\n    width: 40,\r\n  },\r\n  transitInfo: {\r\n    flex: 1,\r\n  },\r\n  transitItem: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  transitList: {\r\n    gap: 12,\r\n  },\r\n  transitName: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 2,\r\n  },\r\n  transitType: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n});\r\n\r\nexport default RegionalTransitCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\RouteCard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":48,"column":35,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":48,"endColumn":51},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":63,"column":44,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":63,"endColumn":60},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":83,"column":14,"nodeType":"ObjectExpression","endLine":93,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":84,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":84,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":101,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":101,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#EAEAEA' }","line":104,"column":12,"nodeType":"ObjectExpression","endLine":107,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":130,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":130,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":138,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":138,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, ArrowRight } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport TransitStepIndicator from \"./TransitStepIndicator\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { Route } from \"@/types/navigation\";\r\n\r\ntype RouteCardProps = {\r\n  route: Route | null | undefined;\r\n  onPress: (route: Route) => void;\r\n  isSelected?: boolean;\r\n};\r\n\r\nconst RouteCardComponent: React.FC<RouteCardProps> = ({ route, onPress, isSelected = false }) => {\r\n  if (!route) {\r\n    return (\r\n      <View style={[styles.container, styles.unavailable]}>\r\n        <Text style={styles.unavailableText}>Route unavailable</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const durationLabel = Number.isFinite(route.totalDuration) ? `${route.totalDuration} min` : '--';\r\n  const departure = route.departureTime || '--';\r\n  const arrival = route.arrivalTime || '--';\r\n  const steps = Array.isArray(route.steps) ? route.steps : [];\r\n\r\n  return (\r\n    <Pressable\r\n      accessibilityRole=\"button\"\r\n      accessibilityLabel={`Route option, duration ${durationLabel}`}\r\n      accessibilityState={{ selected: isSelected }}\r\n      hitSlop={8}\r\n      style={({ pressed }) => [\r\n        styles.container,\r\n        isSelected && styles.selected,\r\n        pressed && styles.pressed,\r\n      ]}\r\n      onPress={() => onPress(route)}\r\n      disabled={!route}\r\n      testID={`route-card-${route.id}`}\r\n    >\r\n      <View style={styles.timeContainer}>\r\n        <Text style={styles.duration}>{durationLabel}</Text>\r\n        <View style={styles.timeRow}>\r\n          <Clock size={14} color={Colors.textLight} style={styles.clockIcon} />\r\n          <Text style={styles.timeText}>\r\n            {departure} - {arrival}\r\n          </Text>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.stepsContainer}>\r\n        {steps.length === 0 && (\r\n          <Text style={styles.emptySteps}>No steps</Text>\r\n        )}\r\n        {steps.map((step, index) => (\r\n          <View key={step.id} style={styles.stepRow}>\r\n            <TransitStepIndicator step={step} />\r\n            {index < steps.length - 1 && (\r\n              <ArrowRight size={14} color={Colors.textLight} style={styles.arrowIcon} />\r\n            )}\r\n          </View>\r\n        ))}\r\n      </View>\r\n    </Pressable>\r\n  );\r\n};\r\n\r\nconst RouteCard = React.memo(RouteCardComponent, (prev, next) => {\r\n  return prev.isSelected === next.isSelected && prev.route === next.route;\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  arrowIcon: {\r\n    marginHorizontal: 4,\r\n  },\r\n  clockIcon: {\r\n    marginRight: 4,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    elevation: 2,\r\n    marginBottom: 12,\r\n    padding: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n  },\r\n  duration: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    marginBottom: 4,\r\n  },\r\n  emptySteps: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  pressed: {\r\n    backgroundColor: \"#EAEAEA\",\r\n    opacity: 0.8,\r\n  },\r\n  selected: {\r\n    borderColor: Colors.primary,\r\n    borderWidth: 2,\r\n  },\r\n  stepRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginRight: 4,\r\n  },\r\n  stepsContainer: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  timeContainer: {\r\n    marginBottom: 12,\r\n  },\r\n  timeRow: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n  timeText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n  },\r\n  unavailable: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  unavailableText: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    fontStyle: 'italic'\r\n  },\r\n});\r\n\r\nexport default RouteCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SafeZoneActivityLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SafeZoneIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SafeZoneManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SafeZoneStatusCard.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":2,"message":"Inline style: { backgroundColor: \"isMonitoring ? '#10B981' : '#F59E0B'\" }","line":50,"column":11,"nodeType":"ObjectExpression","endLine":50,"endColumn":68},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: \"isMonitoring ? '#10B981' : '#F59E0B'\" }","line":50,"column":11,"nodeType":"ObjectExpression","endLine":50,"endColumn":68},{"ruleId":"react-native/no-inline-styles","severity":2,"message":"Inline style: { backgroundColor: '#10B981' }","line":91,"column":49,"nodeType":"ObjectExpression","endLine":91,"endColumn":79},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#10B981' }","line":91,"column":49,"nodeType":"ObjectExpression","endLine":91,"endColumn":79},{"ruleId":"react-native/no-inline-styles","severity":2,"message":"Inline style: { backgroundColor: \"isMonitoring ? '#EF4444' : '#10B981'\" }","line":113,"column":13,"nodeType":"ObjectExpression","endLine":113,"endColumn":70},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: \"isMonitoring ? '#EF4444' : '#10B981'\" }","line":113,"column":13,"nodeType":"ObjectExpression","endLine":113,"endColumn":70},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FFFFFF', shadowColor: '#000' }","line":127,"column":9,"nodeType":"ObjectExpression","endLine":138,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":148,"column":22,"nodeType":"ObjectExpression","endLine":152,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderTopColor: '#E5E7EB' }","line":153,"column":13,"nodeType":"ObjectExpression","endLine":157,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F9FAFB' }","line":166,"column":17,"nodeType":"ObjectExpression","endLine":173,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#374151' }","line":174,"column":17,"nodeType":"ObjectExpression","endLine":179,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#FEF3C7' }","line":180,"column":19,"nodeType":"ObjectExpression","endLine":187,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#374151' }","line":188,"column":17,"nodeType":"ObjectExpression","endLine":193,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#6B7280' }","line":197,"column":14,"nodeType":"ObjectExpression","endLine":202,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#1F2937' }","line":203,"column":15,"nodeType":"ObjectExpression","endLine":207,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":213,"column":15,"nodeType":"ObjectExpression","endLine":217,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#6B7280' }","line":218,"column":13,"nodeType":"ObjectExpression","endLine":223,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#6B7280' }","line":224,"column":13,"nodeType":"ObjectExpression","endLine":228,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#1F2937' }","line":229,"column":10,"nodeType":"ObjectExpression","endLine":235,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#92400E' }","line":236,"column":16,"nodeType":"ObjectExpression","endLine":240,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#374151' }","line":252,"column":13,"nodeType":"ObjectExpression","endLine":255,"endColumn":4}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Shield, MapPin, Clock, AlertTriangle } from 'lucide-react-native';\r\nimport React from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\n\r\nimport { useSafeZoneMonitor } from '@/modules/safety/hooks/useSafeZoneMonitor';\r\nimport { useParentalStore } from '@/modules/safety/stores/parentalStore';\r\nimport type { SafeZone } from '@/modules/safety/types/parental';\r\n\r\nexport const SafeZoneStatusCard: React.FC = () => {\r\n  const { isMonitoring, getCurrentSafeZoneStatus, startMonitoring, stopMonitoring } = useSafeZoneMonitor();\r\n  const { settings, safeZones } = useParentalStore();\r\n  \r\n  const status = getCurrentSafeZoneStatus();\r\n  const activeSafeZones = safeZones.filter(zone => zone.isActive);\r\n\r\n  if (!settings.safeZoneAlerts || activeSafeZones.length === 0) {\r\n    return (\r\n      <View style={styles.card}>\r\n        <View style={styles.header}>\r\n          <Shield size={24} color=\"#9CA3AF\" />\r\n          <Text style={styles.title}>Safe Zones</Text>\r\n        </View>\r\n        <Text style={styles.subtitle}>\r\n          {activeSafeZones.length === 0 \r\n            ? 'No safe zones configured' \r\n            : 'Safe zone alerts are disabled'\r\n          }\r\n        </Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const formatTime = (timestamp: number) => {\r\n    return new Date(timestamp).toLocaleTimeString([], { \r\n      hour: '2-digit', \r\n      minute: '2-digit' \r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.card}>\r\n      <View style={styles.header}>\r\n        <Shield \r\n          size={24} \r\n          color={isMonitoring ? '#10B981' : '#F59E0B'} \r\n        />\r\n        <Text style={styles.title}>Safe Zone Status</Text>\r\n        <View style={[\r\n          styles.statusBadge,\r\n          { backgroundColor: isMonitoring ? '#10B981' : '#F59E0B' }\r\n        ]}>\r\n          <Text style={styles.statusText}>\r\n            {isMonitoring ? 'Active' : 'Inactive'}\r\n          </Text>\r\n        </View>\r\n      </View>\r\n\r\n      {status && (\r\n        <View style={styles.content}>\r\n          <View style={styles.locationInfo}>\r\n            <MapPin size={16} color=\"#6B7280\" />\r\n            <Text style={styles.locationText}>\r\n              Current location tracked\r\n            </Text>\r\n            <Clock size={16} color=\"#6B7280\" />\r\n            <Text style={styles.timeText}>\r\n              {formatTime(status.currentLocation.timestamp)}\r\n            </Text>\r\n          </View>\r\n\r\n          <View style={styles.zoneStats}>\r\n            <View style={styles.statItem}>\r\n              <Text style={styles.statNumber}>{status.inside.length}</Text>\r\n              <Text style={styles.statLabel}>Inside Safe Zones</Text>\r\n            </View>\r\n            <View style={styles.statItem}>\r\n              <Text style={styles.statNumber}>{status.outside.length}</Text>\r\n              <Text style={styles.statLabel}>Outside Safe Zones</Text>\r\n            </View>\r\n            <View style={styles.statItem}>\r\n              <Text style={styles.statNumber}>{status.totalActive}</Text>\r\n              <Text style={styles.statLabel}>Total Active</Text>\r\n            </View>\r\n          </View>\r\n\r\n          {status.inside.length > 0 && (\r\n            <View style={styles.insideZones}>\r\n              <Text style={styles.sectionTitle}>Currently Inside:</Text>\r\n              {status.inside.map((zone: SafeZone) => (\r\n                <View key={zone.id} style={styles.zoneItem}>\r\n                  <View style={[styles.zoneDot, { backgroundColor: '#10B981' }]} />\r\n                  <Text style={styles.zoneName}>{zone.name}</Text>\r\n                </View>\r\n              ))}\r\n            </View>\r\n          )}\r\n\r\n          {status.outside.length > 0 && status.inside.length === 0 && (\r\n            <View style={styles.outsideWarning}>\r\n              <AlertTriangle size={16} color=\"#F59E0B\" />\r\n              <Text style={styles.warningText}>\r\n                Not currently in any safe zone\r\n              </Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n      )}\r\n\r\n      <View style={styles.controls}>\r\n        <TouchableOpacity\r\n          style={[\r\n            styles.controlButton,\r\n            { backgroundColor: isMonitoring ? '#EF4444' : '#10B981' }\r\n          ]}\r\n          onPress={isMonitoring ? stopMonitoring : startMonitoring}\r\n        >\r\n          <Text style={styles.controlButtonText}>\r\n            {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    backgroundColor: '#FFFFFF',\r\n    borderRadius: 16,\r\n    elevation: 4,\r\n    marginHorizontal: 20,\r\n    marginVertical: 10,\r\n    padding: 20,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 8,\r\n  },\r\n  content: {\r\n    marginBottom: 16,\r\n  },\r\n  controlButton: {\r\n    alignItems: 'center',\r\n    borderRadius: 8,\r\n    paddingHorizontal: 24,\r\n    paddingVertical: 12,\r\n  },\r\n  controlButtonText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  },\r\n  controls: {\r\n    borderTopColor: '#E5E7EB',\r\n    borderTopWidth: 1,\r\n    paddingTop: 16,\r\n  },\r\n  header: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    marginBottom: 16,\r\n  },\r\n  insideZones: {\r\n    marginBottom: 16,\r\n  },\r\n  locationInfo: {\r\n    alignItems: 'center',\r\n    backgroundColor: '#F9FAFB',\r\n    borderRadius: 8,\r\n    flexDirection: 'row',\r\n    marginBottom: 16,\r\n    padding: 12,\r\n  },\r\n  locationText: {\r\n    color: '#374151',\r\n    flex: 1,\r\n    fontSize: 14,\r\n    marginLeft: 8,\r\n  },\r\n  outsideWarning: {\r\n    alignItems: 'center',\r\n    backgroundColor: '#FEF3C7',\r\n    borderRadius: 8,\r\n    flexDirection: 'row',\r\n    marginBottom: 16,\r\n    padding: 12,\r\n  },\r\n  sectionTitle: {\r\n    color: '#374151',\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    marginBottom: 8,\r\n  },\r\n  statItem: {\r\n    alignItems: 'center',\r\n  },\r\n  statLabel: {\r\n    color: '#6B7280',\r\n    fontSize: 12,\r\n    marginTop: 4,\r\n    textAlign: 'center',\r\n  },\r\n  statNumber: {\r\n    color: '#1F2937',\r\n    fontSize: 24,\r\n    fontWeight: '700',\r\n  },\r\n  statusBadge: {\r\n    borderRadius: 12,\r\n    paddingHorizontal: 8,\r\n    paddingVertical: 4,\r\n  },\r\n  statusText: {\r\n    color: '#FFFFFF',\r\n    fontSize: 12,\r\n    fontWeight: '600',\r\n  },\r\n  subtitle: {\r\n    color: '#6B7280',\r\n    fontSize: 14,\r\n    marginTop: 8,\r\n    textAlign: 'center',\r\n  },\r\n  timeText: {\r\n    color: '#6B7280',\r\n    fontSize: 12,\r\n    marginLeft: 4,\r\n  },\r\n  title: {\r\n    color: '#1F2937',\r\n    flex: 1,\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    marginLeft: 12,\r\n  },\r\n  warningText: {\r\n    color: '#92400E',\r\n    fontSize: 14,\r\n    marginLeft: 8,\r\n  },\r\n  zoneDot: {\r\n    borderRadius: 4,\r\n    height: 8,\r\n    marginRight: 8,\r\n    width: 8,\r\n  },\r\n  zoneItem: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    paddingVertical: 4,\r\n  },\r\n  zoneName: {\r\n    color: '#374151',\r\n    fontSize: 14,\r\n  },\r\n  zoneStats: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    marginBottom: 16,\r\n  },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SafetyDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SafetyPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SearchBar.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":22,"column":32,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":22,"endColumn":48},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":28,"column":31,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":28,"endColumn":47},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":33,"column":31,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":33,"endColumn":47},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":44,"column":14,"nodeType":"ObjectExpression","endLine":56,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":46,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":46,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Search, X } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, TextInput, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype SearchBarProps = {\r\n  value: string;\r\n  onChangeText: (text: string) => void;\r\n  onClear: () => void;\r\n  placeholder?: string;\r\n};\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({\r\n  value,\r\n  onChangeText,\r\n  onClear,\r\n  placeholder = \"Where do you want to go?\",\r\n}) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Search size={20} color={Colors.textLight} style={styles.icon} />\r\n      <TextInput\r\n        style={styles.input}\r\n        value={value}\r\n        onChangeText={onChangeText}\r\n        placeholder={placeholder}\r\n        placeholderTextColor={Colors.textLight}\r\n        autoCapitalize=\"none\"\r\n      />\r\n      {value.length > 0 && (\r\n        <Pressable onPress={onClear} style={styles.clearButton}>\r\n          <X size={18} color={Colors.textLight} />\r\n        </Pressable>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  clearButton: {\r\n    padding: 4,\r\n  },\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    elevation: 2,\r\n    flexDirection: \"row\",\r\n    height: 56,\r\n    paddingHorizontal: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 1 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 2,\r\n  },\r\n  icon: {\r\n    marginRight: 12,\r\n  },\r\n  input: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default SearchBar;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SearchWithSuggestions.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":42,"column":53,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":42,"endColumn":69},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":45,"column":48,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":45,"endColumn":64},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":108,"column":25,"nodeType":"ObjectExpression","endLine":121,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":109,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":109,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MapPin, Clock, Star } from \"lucide-react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, FlatList, Pressable } from \"react-native\";\n\r\nimport SearchBar from \"./SearchBar\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useDebounce } from \"@/hooks/useDebounce\";\r\nimport { Place } from \"@/types/navigation\";\r\n\r\ntype SearchSuggestion = {\r\n  id: string;\r\n  text: string;\r\n  type: \"recent\" | \"popular\" | \"place\";\r\n  place?: Place;\r\n};\r\n\r\ntype SearchWithSuggestionsProps = {\r\n  value: string;\r\n  onChangeText: (text: string) => void;\r\n  onSelectSuggestion: (suggestion: SearchSuggestion) => void;\r\n  placeholder?: string;\r\n  suggestions?: SearchSuggestion[];\r\n};\r\n\r\nconst SearchWithSuggestions: React.FC<SearchWithSuggestionsProps> = ({\r\n  value,\r\n  onChangeText,\r\n  onSelectSuggestion,\r\n  placeholder,\r\n  suggestions = [],\r\n}) => {\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const debouncedValue = useDebounce(value, 300);\r\n\r\n  useEffect(() => {\r\n    setShowSuggestions(debouncedValue.length > 0 && suggestions.length > 0);\r\n  }, [debouncedValue, suggestions]);\r\n\r\n  const getSuggestionIcon = (type: string) => {\r\n    switch (type) {\r\n      case \"recent\": return <Clock size={16} color={Colors.textLight} />;\r\n      case \"popular\": return <Star size={16} color={Colors.warning} />;\r\n      case \"place\": return <MapPin size={16} color={Colors.primary} />;\r\n      default: return <MapPin size={16} color={Colors.textLight} />;\r\n    }\r\n  };\r\n\r\n  const renderSuggestion = ({ item }: { item: SearchSuggestion }) => (\r\n    <Pressable\r\n      style={styles.suggestionItem}\r\n      onPress={() => {\r\n        onSelectSuggestion(item);\r\n        setShowSuggestions(false);\r\n      }}\r\n    >\r\n      {getSuggestionIcon(item.type)}\r\n      <Text style={styles.suggestionText} numberOfLines={1}>\r\n        {item.text}\r\n      </Text>\r\n    </Pressable>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <SearchBar\r\n        value={value}\r\n        onChangeText={onChangeText}\r\n        onClear={() => {\r\n          onChangeText(\"\");\r\n          setShowSuggestions(false);\r\n        }}\r\n        placeholder={placeholder}\r\n      />\r\n      \r\n      {showSuggestions && (\r\n        <View style={styles.suggestionsContainer}>\r\n          <FlatList\r\n            data={suggestions.slice(0, 5)} // Limit to 5 suggestions\r\n            renderItem={renderSuggestion}\r\n            keyExtractor={(item) => item.id}\r\n            keyboardShouldPersistTaps=\"handled\"\r\n            style={styles.suggestionsList}\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: \"relative\",\r\n  },\r\n  suggestionItem: {\r\n    alignItems: \"center\",\r\n    borderBottomColor: Colors.border,\r\n    borderBottomWidth: 1,\r\n    flexDirection: \"row\",\r\n    gap: 12,\r\n    padding: 16,\r\n  },\r\n  suggestionText: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n  },\r\n  suggestionsContainer: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    elevation: 5,\r\n    left: 0,\r\n    position: \"absolute\",\r\n    right: 0,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    top: 60,\r\n    zIndex: 1000,\r\n  },\r\n  suggestionsList: {\r\n    maxHeight: 200,\r\n  },\r\n});\r\n\r\nexport default SearchWithSuggestions;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SmartNotification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":64,"column":33,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":64,"endColumn":49},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":88,"column":15,"nodeType":"ObjectExpression","endLine":92,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":93,"column":14,"nodeType":"ObjectExpression","endLine":102,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Clock, X, MapPin } from \"lucide-react-native\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\n\r\ntype SmartNotificationProps = {\r\n  title: string;\r\n  message: string;\r\n  type: \"reminder\" | \"weather\" | \"safety\" | \"achievement\";\r\n  onDismiss: () => void;\r\n  actionText?: string;\r\n  onAction?: () => void;\r\n};\r\n\r\nconst SmartNotification: React.FC<SmartNotificationProps> = ({\r\n  title,\r\n  message,\r\n  type,\r\n  onDismiss,\r\n  actionText,\r\n  onAction\r\n}) => {\r\n  const getIcon = () => {\r\n    switch (type) {\r\n      case \"reminder\": return <Clock size={20} color={Colors.primary} />;\r\n      case \"weather\": return <MapPin size={20} color={Colors.warning} />;\r\n      case \"safety\": return <MapPin size={20} color={Colors.error} />;\r\n      case \"achievement\": return <MapPin size={20} color={Colors.secondary} />;\r\n    }\r\n  };\r\n\r\n  const getBackgroundColor = () => {\r\n    switch (type) {\r\n      case \"reminder\": return \"#F0F4FF\";\r\n      case \"weather\": return \"#FFF9E6\";\r\n      case \"safety\": return \"#FFE6E6\";\r\n      case \"achievement\": return \"#F0FFF4\";\r\n    }\r\n  };\r\n\r\n  const getBorderColor = () => {\r\n    switch (type) {\r\n      case \"reminder\": return Colors.primary;\r\n      case \"weather\": return Colors.warning;\r\n      case \"safety\": return Colors.error;\r\n      case \"achievement\": return Colors.secondary;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={[\r\n      styles.container, \r\n      { \r\n        backgroundColor: getBackgroundColor(),\r\n        borderLeftColor: getBorderColor()\r\n      }\r\n    ]}>\r\n      <View style={styles.content}>\r\n        <View style={styles.header}>\r\n          {getIcon()}\r\n          <Text style={styles.title}>{title}</Text>\r\n          <Pressable style={styles.dismissButton} onPress={onDismiss}>\r\n            <X size={16} color={Colors.textLight} />\r\n          </Pressable>\r\n        </View>\r\n        \r\n        <Text style={styles.message}>{message}</Text>\r\n        \r\n        {actionText && onAction && (\r\n          <Pressable style={styles.actionButton} onPress={onAction}>\r\n            <Text style={styles.actionText}>{actionText}</Text>\r\n          </Pressable>\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignSelf: \"flex-start\",\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n  },\r\n  actionText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n  },\r\n  container: {\r\n    borderLeftWidth: 4,\r\n    borderRadius: 12,\r\n    elevation: 3,\r\n    margin: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n  },\r\n  content: {\r\n    padding: 16,\r\n  },\r\n  dismissButton: {\r\n    padding: 4,\r\n  },\r\n  header: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 8,\r\n  },\r\n  message: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n    marginBottom: 12,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginLeft: 8,\r\n  },\r\n});\r\n\r\nexport default SmartNotification;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SmartRouteSuggestions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[674,677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[674,677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentLocation' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateSmartSuggestions'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [destination, weather, timeOfDay, crowdLevel, generateSmartSuggestions]","fix":{"range":[1360,1405],"text":"[destination, weather, timeOfDay, crowdLevel, generateSmartSuggestions]"}}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":217,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":217,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":226,"column":14,"nodeType":"ObjectExpression","endLine":236,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.white' is restricted from being used. Use semantic foreground token or explicit #FFF.","line":227,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":227,"endColumn":34},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.primaryLight' is restricted from being used. Introduce semantic token or derive shade; avoid primaryLight.","line":247,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":247,"endColumn":41},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":255,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":255,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.secondaryLight' is restricted from being used. Introduce semantic token or derive shade; avoid secondaryLight.","line":261,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":261,"endColumn":43},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":283,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":283,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Cloud, Sun, CloudRain, Users, Clock, Zap, MapPin } from 'lucide-react-native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Pressable, ScrollView } from 'react-native';\n\r\nimport Colors from '@/constants/colors';\r\nimport { Place } from '@/types/navigation';\r\n\r\ntype WeatherCondition = 'sunny' | 'cloudy' | 'rainy' | 'stormy';\r\ntype CrowdLevel = 'low' | 'medium' | 'high';\r\ntype RouteType = 'fastest' | 'safest' | 'scenic' | 'covered' | 'quiet';\r\n\r\ntype SmartSuggestion = {\r\n  id: string;\r\n  type: RouteType;\r\n  title: string;\r\n  description: string;\r\n  estimatedTime: string;\r\n  reason: string;\r\n  icon: React.ComponentType<any>;\r\n  priority: number;\r\n};\r\n\r\ntype SmartRouteSuggestionsProps = {\r\n  destination: Place;\r\n  currentLocation: { latitude: number; longitude: number };\r\n  weather?: WeatherCondition;\r\n  timeOfDay: 'morning' | 'afternoon' | 'evening' | 'night';\r\n  onSelectRoute: (suggestion: SmartSuggestion) => void;\r\n};\r\n\r\nconst SmartRouteSuggestions: React.FC<SmartRouteSuggestionsProps> = ({\r\n  destination,\r\n  currentLocation,\r\n  weather = 'sunny',\r\n  timeOfDay,\r\n  onSelectRoute\r\n}) => {\r\n  const [suggestions, setSuggestions] = useState<SmartSuggestion[]>([]);\r\n  const [crowdLevel, setCrowdLevel] = useState<CrowdLevel>('medium');\r\n\r\n  useEffect(() => {\r\n    generateSmartSuggestions();\r\n  }, [destination, weather, timeOfDay, crowdLevel]);\r\n\r\n  const generateSmartSuggestions = () => {\r\n    const baseSuggestions: SmartSuggestion[] = [];\r\n\r\n    // Weather-based suggestions\r\n    if (weather === 'rainy' || weather === 'stormy') {\r\n      baseSuggestions.push({\r\n        id: 'covered-route',\r\n        type: 'covered',\r\n        title: 'Covered Route',\r\n        description: 'Stay dry with covered walkways and indoor passages',\r\n        estimatedTime: '12 min',\r\n        reason: 'Rainy weather detected',\r\n        icon: CloudRain,\r\n        priority: 1\r\n      });\r\n    }\r\n\r\n    // Time-based suggestions\r\n    if (timeOfDay === 'morning') {\r\n      baseSuggestions.push({\r\n        id: 'scenic-route',\r\n        type: 'scenic',\r\n        title: 'Scenic Morning Route',\r\n        description: 'Beautiful morning views through the park',\r\n        estimatedTime: '15 min',\r\n        reason: 'Perfect morning weather',\r\n        icon: Sun,\r\n        priority: 2\r\n      });\r\n    }\r\n\r\n    if (timeOfDay === 'evening' || timeOfDay === 'night') {\r\n      baseSuggestions.push({\r\n        id: 'safest-route',\r\n        type: 'safest',\r\n        title: 'Well-Lit Safe Route',\r\n        description: 'Well-lit streets with good visibility',\r\n        estimatedTime: '10 min',\r\n        reason: 'Evening safety priority',\r\n        icon: Zap,\r\n        priority: 1\r\n      });\r\n    }\r\n\r\n    // Crowd-based suggestions\r\n    if (crowdLevel === 'high') {\r\n      baseSuggestions.push({\r\n        id: 'quiet-route',\r\n        type: 'quiet',\r\n        title: 'Quiet Alternative',\r\n        description: 'Less crowded side streets',\r\n        estimatedTime: '11 min',\r\n        reason: 'Avoiding busy areas',\r\n        icon: MapPin,\r\n        priority: 2\r\n      });\r\n    }\r\n\r\n    // Always include fastest route\r\n    baseSuggestions.push({\r\n      id: 'fastest-route',\r\n      type: 'fastest',\r\n      title: 'Fastest Route',\r\n      description: 'Direct path to your destination',\r\n      estimatedTime: '8 min',\r\n      reason: 'Shortest travel time',\r\n      icon: Clock,\r\n      priority: 3\r\n    });\r\n\r\n    // Sort by priority and take top 3\r\n    const sortedSuggestions = baseSuggestions\r\n      .sort((a, b) => a.priority - b.priority)\r\n      .slice(0, 3);\r\n\r\n    setSuggestions(sortedSuggestions);\r\n  };\r\n\r\n  const getWeatherIcon = () => {\r\n    switch (weather) {\r\n      case 'sunny': return Sun;\r\n      case 'cloudy': return Cloud;\r\n      case 'rainy': return CloudRain;\r\n      default: return Sun;\r\n    }\r\n  };\r\n\r\n  const getCrowdColor = () => {\r\n    switch (crowdLevel) {\r\n      case 'low': return '#4CAF50';\r\n      case 'medium': return '#FF9800';\r\n      case 'high': return '#F44336';\r\n    }\r\n  };\r\n\r\n  const simulateCrowdLevel = () => {\r\n    // Simulate crowd level based on time of day\r\n    const hour = new Date().getHours();\r\n    if (hour >= 7 && hour <= 9 || hour >= 17 && hour <= 19) {\r\n      setCrowdLevel('high'); // Rush hours\r\n    } else if (hour >= 10 && hour <= 16) {\r\n      setCrowdLevel('medium'); // Daytime\r\n    } else {\r\n      setCrowdLevel('low'); // Early morning/night\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    simulateCrowdLevel();\r\n    const interval = setInterval(simulateCrowdLevel, 60000); // Update every minute\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.title}>Smart Route Suggestions</Text>\r\n        <View style={styles.conditions}>\r\n          <View style={styles.conditionItem}>\r\n            {React.createElement(getWeatherIcon(), { size: 16, color: Colors.primary })}\r\n            <Text style={styles.conditionText}>{weather}</Text>\r\n          </View>\r\n          <View style={styles.conditionItem}>\r\n            <Users size={16} color={getCrowdColor()} />\r\n            <Text style={[styles.conditionText, { color: getCrowdColor() }]}>\r\n              {crowdLevel} traffic\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n\r\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.suggestionsScroll}>\r\n        {suggestions.map((suggestion) => (\r\n          <Pressable\r\n            key={suggestion.id}\r\n            style={styles.suggestionCard}\r\n            onPress={() => onSelectRoute(suggestion)}\r\n          >\r\n            <View style={styles.suggestionHeader}>\r\n              <View style={styles.iconContainer}>\r\n                <suggestion.icon size={20} color={Colors.primary} />\r\n              </View>\r\n              <Text style={styles.suggestionTitle}>{suggestion.title}</Text>\r\n            </View>\r\n            \r\n            <Text style={styles.suggestionDescription}>{suggestion.description}</Text>\r\n            \r\n            <View style={styles.suggestionFooter}>\r\n              <Text style={styles.estimatedTime}>{suggestion.estimatedTime}</Text>\r\n              <Text style={styles.reason}>{suggestion.reason}</Text>\r\n            </View>\r\n          </Pressable>\r\n        ))}\r\n      </ScrollView>\r\n\r\n      <View style={styles.smartTip}>\r\n        <Zap size={16} color={Colors.secondary} />\r\n        <Text style={styles.smartTipText}>\r\n          Routes adapt based on weather, time, and crowd levels for the best experience!\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  conditionItem: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    gap: 4,\r\n  },\r\n  conditionText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    fontWeight: '500',\r\n    textTransform: 'capitalize',\r\n  },\r\n  conditions: {\r\n    flexDirection: 'row',\r\n    gap: 16,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.white,\r\n    borderRadius: 16,\r\n    elevation: 4,\r\n    margin: 16,\r\n    padding: 16,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 8,\r\n  },\r\n  estimatedTime: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: '700',\r\n  },\r\n  header: {\r\n    marginBottom: 16,\r\n  },\r\n  iconContainer: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.primaryLight,\r\n    borderRadius: 16,\r\n    height: 32,\r\n    justifyContent: 'center',\r\n    marginRight: 8,\r\n    width: 32,\r\n  },\r\n  reason: {\r\n    color: Colors.textLight,\r\n    fontSize: 10,\r\n    fontStyle: 'italic',\r\n  },\r\n  smartTip: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.secondaryLight,\r\n    borderRadius: 8,\r\n    flexDirection: 'row',\r\n    gap: 8,\r\n    padding: 12,\r\n  },\r\n  smartTipText: {\r\n    color: Colors.secondary,\r\n    flex: 1,\r\n    fontSize: 12,\r\n    fontWeight: '500',\r\n  },\r\n  suggestionCard: {\r\n    backgroundColor: Colors.background,\r\n    borderColor: Colors.border,\r\n    borderRadius: 12,\r\n    borderWidth: 1,\r\n    marginRight: 12,\r\n    padding: 16,\r\n    width: 200,\r\n  },\r\n  suggestionDescription: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    lineHeight: 16,\r\n    marginBottom: 12,\r\n  },\r\n  suggestionFooter: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  suggestionHeader: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    marginBottom: 8,\r\n  },\r\n  suggestionTitle: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n  },\r\n  suggestionsScroll: {\r\n    marginBottom: 16,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: '700',\r\n    marginBottom: 8,\r\n  },\r\n});\r\n\r\nexport default SmartRouteSuggestions;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\SystemHealthMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wifi' is defined but never used.","line":1,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WifiOff' is defined but never used.","line":1,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":62},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":54,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":54,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":75,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":19},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":88,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":88,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":111,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3988,3991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3988,3991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4027,4030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4027,4030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4072,4075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4072,4075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runHealthChecks'. Either include it or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [isConnected, runHealthChecks]","fix":{"range":[4715,4728],"text":"[isConnected, runHealthChecks]"}}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":200,"column":38,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":200,"endColumn":54},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":260,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":260,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.androidRipple' is restricted from being used. Use Platform.select ripple logic; avoid androidRipple.","line":277,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":277,"endColumn":42},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":282,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":282,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":292,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":292,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":299,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":299,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.androidRipple' is restricted from being used. Use Platform.select ripple logic; avoid androidRipple.","line":316,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":316,"endColumn":42},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.androidRipple' is restricted from being used. Use Platform.select ripple logic; avoid androidRipple.","line":336,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":336,"endColumn":42}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertTriangle, CheckCircle, RefreshCw, Wifi, WifiOff } from 'lucide-react-native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Pressable, Platform } from 'react-native';\n\r\nimport Colors from '@/constants/colors';\r\nimport { useNetworkStatus } from '@/hooks/useNetworkStatus';\r\n\r\ntype SystemHealthMonitorProps = {\r\n  testId?: string;\r\n};\r\n\r\ntype HealthCheck = {\r\n  id: string;\r\n  name: string;\r\n  status: 'healthy' | 'warning' | 'error';\r\n  message: string;\r\n  lastChecked: number;\r\n};\r\n\r\nconst SystemHealthMonitor: React.FC<SystemHealthMonitorProps> = ({ testId }) => {\r\n  const [healthChecks, setHealthChecks] = useState<HealthCheck[]>([]);\r\n  const [isRunningChecks, setIsRunningChecks] = useState(false);\r\n  const { isConnected } = useNetworkStatus();\r\n\r\n  const runHealthChecks = async () => {\r\n    setIsRunningChecks(true);\r\n    const checks: HealthCheck[] = [];\r\n    const now = Date.now();\r\n\r\n    // Network connectivity check\r\n    checks.push({\r\n      id: 'network',\r\n      name: 'Network Connection',\r\n      status: isConnected ? 'healthy' : 'error',\r\n      message: isConnected ? 'Connected to internet' : 'No internet connection',\r\n      lastChecked: now,\r\n    });\r\n\r\n    // Platform compatibility check\r\n    const platformStatus = Platform.OS === 'web' ? 'warning' : 'healthy';\r\n    checks.push({\r\n      id: 'platform',\r\n      name: 'Platform Compatibility',\r\n      status: platformStatus,\r\n      message: Platform.OS === 'web' \r\n        ? 'Running on web - some features limited' \r\n        : `Running on ${Platform.OS} - full features available`,\r\n      lastChecked: now,\r\n    });\r\n\r\n    // Storage availability check\r\n    try {\r\n      if (Platform.OS !== 'web') {\r\n        const AsyncStorage = require('@react-native-async-storage/async-storage').default;\r\n        await AsyncStorage.setItem('health_check', 'test');\r\n        await AsyncStorage.removeItem('health_check');\r\n        checks.push({\r\n          id: 'storage',\r\n          name: 'Local Storage',\r\n          status: 'healthy',\r\n          message: 'AsyncStorage working normally',\r\n          lastChecked: now,\r\n        });\r\n      } else {\r\n        localStorage.setItem('health_check', 'test');\r\n        localStorage.removeItem('health_check');\r\n        checks.push({\r\n          id: 'storage',\r\n          name: 'Local Storage',\r\n          status: 'healthy',\r\n          message: 'LocalStorage working normally',\r\n          lastChecked: now,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      checks.push({\r\n        id: 'storage',\r\n        name: 'Local Storage',\r\n        status: 'error',\r\n        message: 'Storage access failed',\r\n        lastChecked: now,\r\n      });\r\n    }\r\n\r\n    // Location services check\r\n    try {\r\n      if (Platform.OS !== 'web') {\r\n        const Location = require('expo-location');\r\n        const { status } = await Location.getForegroundPermissionsAsync();\r\n        checks.push({\r\n          id: 'location',\r\n          name: 'Location Services',\r\n          status: status === 'granted' ? 'healthy' : 'warning',\r\n          message: status === 'granted' \r\n            ? 'Location permissions granted' \r\n            : 'Location permissions needed for full functionality',\r\n          lastChecked: now,\r\n        });\r\n      } else {\r\n        const hasGeolocation = 'geolocation' in navigator;\r\n        checks.push({\r\n          id: 'location',\r\n          name: 'Location Services',\r\n          status: hasGeolocation ? 'healthy' : 'error',\r\n          message: hasGeolocation \r\n            ? 'Geolocation API available' \r\n            : 'Geolocation not supported',\r\n          lastChecked: now,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      checks.push({\r\n        id: 'location',\r\n        name: 'Location Services',\r\n        status: 'error',\r\n        message: 'Location services check failed',\r\n        lastChecked: now,\r\n      });\r\n    }\r\n\r\n    // Memory usage check (basic)\r\n    const memoryStatus = Platform.OS === 'web' && (performance as any).memory \r\n      ? ((performance as any).memory.usedJSHeapSize / (performance as any).memory.jsHeapSizeLimit) > 0.8 \r\n        ? 'warning' \r\n        : 'healthy'\r\n      : 'healthy';\r\n    \r\n    checks.push({\r\n      id: 'memory',\r\n      name: 'Memory Usage',\r\n      status: memoryStatus,\r\n      message: memoryStatus === 'warning' \r\n        ? 'High memory usage detected' \r\n        : 'Memory usage normal',\r\n      lastChecked: now,\r\n    });\r\n\r\n    setHealthChecks(checks);\r\n    setIsRunningChecks(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    runHealthChecks();\r\n    \r\n    // Run health checks every 5 minutes\r\n    const interval = setInterval(runHealthChecks, 5 * 60 * 1000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [isConnected]);\r\n\r\n  const getOverallStatus = (): 'healthy' | 'warning' | 'error' => {\r\n    if (healthChecks.some(check => check.status === 'error')) return 'error';\r\n    if (healthChecks.some(check => check.status === 'warning')) return 'warning';\r\n    return 'healthy';\r\n  };\r\n\r\n  const getStatusIcon = (status: 'healthy' | 'warning' | 'error') => {\r\n    switch (status) {\r\n      case 'healthy':\r\n        return <CheckCircle size={16} color={Colors.success} />;\r\n      case 'warning':\r\n        return <AlertTriangle size={16} color={Colors.warning} />;\r\n      case 'error':\r\n        return <AlertTriangle size={16} color={Colors.error} />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: 'healthy' | 'warning' | 'error') => {\r\n    switch (status) {\r\n      case 'healthy':\r\n        return Colors.success;\r\n      case 'warning':\r\n        return Colors.warning;\r\n      case 'error':\r\n        return Colors.error;\r\n    }\r\n  };\r\n\r\n  const overallStatus = getOverallStatus();\r\n  const errorCount = healthChecks.filter(check => check.status === 'error').length;\r\n  const warningCount = healthChecks.filter(check => check.status === 'warning').length;\r\n\r\n  return (\r\n    <View style={styles.container} testID={testId}>\r\n      <View style={styles.header}>\r\n        <View style={styles.statusIndicator}>\r\n          {getStatusIcon(overallStatus)}\r\n          <Text style={[styles.statusText, { color: getStatusColor(overallStatus) }]}>\r\n            System {overallStatus === 'healthy' ? 'Healthy' : overallStatus === 'warning' ? 'Issues Detected' : 'Errors Found'}\r\n          </Text>\r\n        </View>\r\n        \r\n        <Pressable \r\n          style={[styles.refreshButton, isRunningChecks && styles.refreshButtonDisabled]}\r\n          onPress={runHealthChecks}\r\n          disabled={isRunningChecks}\r\n        >\r\n          <RefreshCw \r\n            size={16} \r\n            color={isRunningChecks ? Colors.textLight : Colors.primary} \r\n            style={isRunningChecks ? styles.spinning : undefined}\r\n          />\r\n        </Pressable>\r\n      </View>\r\n\r\n      {(errorCount > 0 || warningCount > 0) && (\r\n        <View style={styles.summary}>\r\n          {errorCount > 0 && (\r\n            <Text style={styles.errorSummary}>\r\n              {errorCount} error{errorCount > 1 ? 's' : ''} found\r\n            </Text>\r\n          )}\r\n          {warningCount > 0 && (\r\n            <Text style={styles.warningSummary}>\r\n              {warningCount} warning{warningCount > 1 ? 's' : ''} found\r\n            </Text>\r\n          )}\r\n        </View>\r\n      )}\r\n\r\n      <View style={styles.checksList}>\r\n        {healthChecks.map((check) => (\r\n          <View key={check.id} style={styles.checkItem}>\r\n            <View style={styles.checkHeader}>\r\n              {getStatusIcon(check.status)}\r\n              <Text style={styles.checkName}>{check.name}</Text>\r\n            </View>\r\n            <Text style={styles.checkMessage}>{check.message}</Text>\r\n            <Text style={styles.checkTime}>\r\n              Last checked: {new Date(check.lastChecked).toLocaleTimeString()}\r\n            </Text>\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      {overallStatus === 'error' && (\r\n        <View style={styles.actionSection}>\r\n          <Text style={styles.actionTitle}>Recommended Actions:</Text>\r\n          <Text style={styles.actionText}>\r\n            ΓÇó Check your internet connection{'\\n'}\r\n            ΓÇó Restart the app if issues persist{'\\n'}\r\n            ΓÇó Contact support if problems continue\r\n          </Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionSection: {\r\n    backgroundColor: Colors.error + '10',\r\n    borderColor: Colors.error + '30',\r\n    borderRadius: 8,\r\n    borderWidth: 1,\r\n    marginTop: 12,\r\n    padding: 12,\r\n  },\r\n  actionText: {\r\n    color: Colors.textLight,\r\n    fontSize: 13,\r\n    lineHeight: 18,\r\n  },\r\n  actionTitle: {\r\n    color: Colors.error,\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    marginBottom: 8,\r\n  },\r\n  checkHeader: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    gap: 8,\r\n    marginBottom: 4,\r\n  },\r\n  checkItem: {\r\n    backgroundColor: Colors.androidRipple,\r\n    borderRadius: 8,\r\n    padding: 12,\r\n  },\r\n  checkMessage: {\r\n    color: Colors.textLight,\r\n    fontSize: 13,\r\n    marginBottom: 4,\r\n  },\r\n  checkName: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n  },\r\n  checkTime: {\r\n    color: Colors.textLight,\r\n    fontSize: 11,\r\n  },\r\n  checksList: {\r\n    gap: 8,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    marginVertical: 8,\r\n    padding: 16,\r\n  },\r\n  errorSummary: {\r\n    color: Colors.error,\r\n    fontSize: 14,\r\n    fontWeight: '500',\r\n  },\r\n  header: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 12,\r\n  },\r\n  refreshButton: {\r\n    backgroundColor: Colors.androidRipple,\r\n    borderRadius: 8,\r\n    padding: 8,\r\n  },\r\n  refreshButtonDisabled: {\r\n    opacity: 0.5,\r\n  },\r\n  spinning: {\r\n    // Note: CSS animation would be needed for web, this is just a placeholder\r\n  },\r\n  statusIndicator: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    gap: 8,\r\n  },\r\n  statusText: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n  },\r\n  summary: {\r\n    backgroundColor: Colors.androidRipple,\r\n    borderRadius: 8,\r\n    marginBottom: 12,\r\n    padding: 8,\r\n  },\r\n  warningSummary: {\r\n    color: Colors.warning,\r\n    fontSize: 14,\r\n    fontWeight: '500',\r\n  },\r\n});\r\n\r\nexport default SystemHealthMonitor;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\Toast.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[906,909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[906,909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1882,1885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1882,1885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":59,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":59,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1956,1956],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'duration', 'fadeAnim', 'hideToast', 'message', 'slideAnim', and 'type'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [duration, fadeAnim, hideToast, message, slideAnim, type, visible]","fix":{"range":[2181,2190],"text":"[duration, fadeAnim, hideToast, message, slideAnim, type, visible]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3345,3348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3345,3348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":134,"column":14,"nodeType":"ObjectExpression","endLine":150,"endColumn":4}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CheckCircle, AlertCircle, Info, X } from \"lucide-react-native\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { StyleSheet, Text, Animated, Platform, AccessibilityInfo, findNodeHandle } from \"react-native\";\n\r\nimport { useTheme } from \"@/constants/theme\";\r\nimport { announce } from \"@/utils/accessibility\";\r\n\r\ntype ToastType = \"success\" | \"error\" | \"info\" | \"warning\";\r\n\r\ntype ToastProps = {\r\n  message: string;\r\n  type: ToastType;\r\n  visible: boolean;\r\n  onHide: () => void;\r\n  duration?: number;\r\n};\r\n\r\nconst typeLabels: Record<ToastType, string> = {\r\n  success: 'Success',\r\n  error: 'Error',\r\n  info: 'Info',\r\n  warning: 'Warning',\r\n};\r\n\r\nconst Toast: React.FC<ToastProps> = ({ message, type, visible, onHide, duration = 3000 }) => {\r\n  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n  const slideAnim = useRef(new Animated.Value(-100)).current;\r\n  const viewRef = useRef<any>(null);\r\n  const announcedRef = useRef(false);\r\n  const theme = useTheme();\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      Animated.parallel([\r\n        Animated.timing(fadeAnim, {\r\n          toValue: 1,\r\n          duration: 300,\r\n          useNativeDriver: Platform.OS !== 'web',\r\n        }),\r\n        Animated.timing(slideAnim, {\r\n          toValue: 0,\r\n          duration: 300,\r\n          useNativeDriver: Platform.OS !== 'web',\r\n        }),\r\n      ]).start();\r\n\r\n      // Announce for screen readers only once per visibility cycle\r\n      if (!announcedRef.current) {\r\n        announcedRef.current = true;\r\n        const composed = `${typeLabels[type]}: ${message}`;\r\n        announce(composed);\r\n        // Attempt to shift accessibility focus to the toast (best effort)\r\n        setTimeout(() => {\r\n          try {\r\n            const handle = viewRef.current ? findNodeHandle(viewRef.current) : null;\r\n            if (handle) {\r\n              (AccessibilityInfo as any)?.setAccessibilityFocus?.(handle);\r\n            }\r\n          } catch {}\r\n        }, 50);\r\n      }\r\n\r\n      const timer = setTimeout(() => {\r\n        hideToast();\r\n      }, duration);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n    announcedRef.current = false; // reset when hidden\r\n  }, [visible]);\r\n\r\n  const hideToast = () => {\r\n    Animated.parallel([\r\n      Animated.timing(fadeAnim, {\r\n        toValue: 0,\r\n        duration: 300,\r\n        useNativeDriver: Platform.OS !== 'web',\r\n      }),\r\n      Animated.timing(slideAnim, {\r\n        toValue: -100,\r\n        duration: 300,\r\n        useNativeDriver: Platform.OS !== 'web',\r\n      }),\r\n    ]).start(() => {\r\n      onHide();\r\n    });\r\n  };\r\n\r\n  const getIcon = () => {\r\n    switch (type) {\r\n      case \"success\": return <CheckCircle size={20} color={theme.colors.success} />;\r\n      case \"error\": return <X size={20} color={theme.colors.error} />;\r\n      case \"warning\": return <AlertCircle size={20} color={theme.colors.warning} />;\r\n      case \"info\": return <Info size={20} color={theme.colors.info} />;\r\n    }\r\n  };\r\n\r\n  const getBackgroundColor = () => {\r\n    switch (type) {\r\n      case \"success\": return theme.colors.surfaceAlt;\r\n      case \"error\": return theme.colors.surfaceAlt;\r\n      case \"warning\": return theme.colors.surfaceAlt;\r\n      case \"info\": return theme.colors.surfaceAlt;\r\n    }\r\n  };\r\n\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <Animated.View\r\n      ref={viewRef as any}\r\n      style={[\r\n        styles.container,\r\n        {\r\n          opacity: fadeAnim,\r\n          transform: [{ translateY: slideAnim }],\r\n          backgroundColor: getBackgroundColor(),\r\n        },\r\n      ]}\r\n      accessible\r\n      accessibilityRole=\"alert\"\r\n      accessibilityLiveRegion={Platform.OS === 'android' ? 'assertive' : undefined}\r\n      accessibilityLabel={`${typeLabels[type]}: ${message}`}\r\n      // test id for automated a11y verification\r\n      testID=\"toast-alert\"\r\n    >\r\n      {getIcon()}\r\n  <Text style={[styles.message,{color: theme.colors.text}]}>{message}</Text>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    borderRadius: 12,\r\n    elevation: 5,\r\n    flexDirection: \"row\",\r\n    gap: 12,\r\n    left: 16,\r\n    padding: 16,\r\n    position: \"absolute\",\r\n    right: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    top: 60,\r\n    zIndex: 1000,\r\n  },\r\n  message: {\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n  },\r\n});\r\n\r\nexport default Toast;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\TransitStepIndicator.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":45,"column":27,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":45,"endColumn":43},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":93,"column":13,"nodeType":"ObjectExpression","endLine":96,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Train, Bus, Navigation, Bike, Car } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { TransitStep } from \"@/types/navigation\";\r\n\r\ntype TransitStepIndicatorProps = {\r\n  step: TransitStep;\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n};\r\n\r\nconst TransitStepIndicator: React.FC<TransitStepIndicatorProps> = ({ \r\n  step, \r\n  size = \"medium\" \r\n}) => {\r\n  const getIcon = () => {\r\n    const iconSize = size === \"small\" ? 14 : size === \"medium\" ? 18 : 24;\r\n    const iconColor = \"#FFFFFF\";\r\n    \r\n    switch (step.type) {\r\n      case \"subway\":\r\n      case \"train\":\r\n        return <Train size={iconSize} color={iconColor} />;\r\n      case \"bus\":\r\n        return <Bus size={iconSize} color={iconColor} />;\r\n      case \"walk\":\r\n        return <Navigation size={iconSize} color={iconColor} />;\r\n      case \"bike\":\r\n        return <Bike size={iconSize} color={iconColor} />;\r\n      case \"car\":\r\n        return <Car size={iconSize} color={iconColor} />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getBackgroundColor = () => {\r\n    if (step.color) return step.color;\r\n    \r\n    switch (step.type) {\r\n      case \"subway\": return Colors.subway;\r\n      case \"train\": return Colors.train;\r\n      case \"bus\": return Colors.bus;\r\n      case \"walk\": return Colors.textLight;\r\n      case \"bike\": return \"#10B981\"; // Green for biking\r\n      case \"car\": return \"#6366F1\"; // Indigo for driving\r\n      default: return Colors.primary;\r\n    }\r\n  };\r\n\r\n  const getDimensionsBySize = () => {\r\n    switch (size) {\r\n      case \"small\":\r\n        return { width: 24, height: 24, borderRadius: 12, fontSize: 10 };\r\n      case \"medium\":\r\n        return { width: 32, height: 32, borderRadius: 16, fontSize: 14 };\r\n      case \"large\":\r\n        return { width: 40, height: 40, borderRadius: 20, fontSize: 18 };\r\n      default:\r\n        return { width: 32, height: 32, borderRadius: 16, fontSize: 14 };\r\n    }\r\n  };\r\n\r\n  const dimensions = getDimensionsBySize();\r\n\r\n  return (\r\n    <View style={[\r\n      styles.container, \r\n      { \r\n        backgroundColor: getBackgroundColor(),\r\n        width: dimensions.width,\r\n        height: dimensions.height,\r\n        borderRadius: dimensions.borderRadius\r\n      }\r\n    ]}>\r\n      {step.line ? (\r\n        <Text style={[styles.lineText, { fontSize: dimensions.fontSize }]}>\r\n          {step.line}\r\n        </Text>\r\n      ) : (\r\n        getIcon()\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  lineText: {\r\n    color: \"#FFFFFF\",\r\n    fontWeight: \"700\",\r\n  },\r\n});\r\n\r\nexport default TransitStepIndicator;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\TravelModeSelector.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":40,"column":51,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":40,"endColumn":67},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":63,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":63,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":71,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":71,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":89,"column":17,"nodeType":"ObjectExpression","endLine":92,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Train, Car, Bike, MapPin } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { TravelMode } from \"@/types/navigation\";\r\n\r\ntype TravelModeSelectorProps = {\r\n  selectedMode: TravelMode;\r\n  onModeChange: (mode: TravelMode) => void;\r\n};\r\n\r\nconst TravelModeSelector: React.FC<TravelModeSelectorProps> = ({ selectedMode, onModeChange }) => {\r\n  const modes: { mode: TravelMode; icon: React.ReactNode; label: string }[] = [\r\n    { mode: \"transit\", icon: <Train size={20} />, label: \"Transit\" },\r\n    { mode: \"walking\", icon: <MapPin size={20} />, label: \"Walk\" },\r\n    { mode: \"biking\", icon: <Bike size={20} />, label: \"Bike\" },\r\n    { mode: \"driving\", icon: <Car size={20} />, label: \"Drive\" },\r\n  ];\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Travel Mode</Text>\r\n      <View style={styles.modesContainer}>\r\n        {modes.map(({ mode, icon, label }) => {\r\n          const isSelected = selectedMode === mode;\r\n          return (\r\n            <Pressable\r\n              key={mode}\r\n              accessibilityRole=\"button\"\r\n              accessibilityLabel={`${label} travel mode`}\r\n              accessibilityState={{ selected: isSelected }}\r\n              hitSlop={6}\r\n              style={[styles.modeButton, isSelected && styles.selectedMode]}\r\n              onPress={() => onModeChange(mode)}\r\n              testID={`travel-mode-${mode}`}\r\n            >\r\n              <View style={[styles.iconContainer, isSelected && styles.selectedIcon]}>\r\n                {React.cloneElement(icon as React.ReactElement<{ color?: string }>, {\r\n                  color: isSelected ? \"#FFFFFF\" : Colors.textLight,\r\n                })}\r\n              </View>\r\n              <Text style={[styles.modeLabel, isSelected && styles.selectedLabel]}>\r\n                {label}\r\n              </Text>\r\n            </Pressable>\r\n          );\r\n        })}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginBottom: 16,\r\n  },\r\n  iconContainer: {\r\n    marginBottom: 4,\r\n  },\r\n  modeButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.card,\r\n    borderColor: Colors.border,\r\n    borderRadius: 12,\r\n    borderWidth: 1,\r\n    flex: 1,\r\n    padding: 12,\r\n  },\r\n  modeLabel: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    fontWeight: \"500\",\r\n  },\r\n  modesContainer: {\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n    justifyContent: \"space-between\",\r\n  },\r\n  selectedIcon: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 16,\r\n    padding: 4,\r\n  },\r\n  selectedLabel: {\r\n    color: Colors.primary,\r\n    fontWeight: \"600\",\r\n  },\r\n  selectedMode: {\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderColor: Colors.primary,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default TravelModeSelector;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\UserStatsCard.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":78,"column":14,"nodeType":"ObjectExpression","endLine":88,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":79,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":79,"endColumn":33},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.primaryLight' is restricted from being used. Introduce semantic token or derive shade; avoid primaryLight.","line":111,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":111,"endColumn":41},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":147,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":147,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":156,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":156,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Trophy, MapPin, Zap, Target } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { UserStats } from \"@/types/gamification\";\r\n\r\ntype UserStatsCardProps = {\r\n  stats: UserStats;\r\n  onPetClick?: () => void;\r\n};\r\n\r\nconst UserStatsCard: React.FC<UserStatsCardProps> = ({ stats, onPetClick }) => {\r\n  const getProgressToNextLevel = () => {\r\n    const pointsForCurrentLevel = (stats.level - 1) * 200;\r\n    const pointsForNextLevel = stats.level * 200;\r\n    const progress = (stats.totalPoints - pointsForCurrentLevel) / (pointsForNextLevel - pointsForCurrentLevel);\r\n    return Math.max(0, Math.min(1, progress));\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <View style={styles.levelContainer}>\r\n          <Trophy size={24} color={Colors.primary} />\r\n          <Text style={styles.levelText}>Level {stats.level}</Text>\r\n        </View>\r\n        \r\n        <View style={styles.headerRight}>\r\n          <Text style={styles.pointsText}>{stats.totalPoints} points</Text>\r\n          {onPetClick && (\r\n            <Pressable style={styles.petButton} onPress={onPetClick}>\r\n              <Text style={styles.petEmoji}>≡ƒÉ▓</Text>\r\n              <Text style={styles.petText}>Pet</Text>\r\n            </Pressable>\r\n          )}\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.progressContainer}>\r\n        <View style={styles.progressBar}>\r\n          <View \r\n            style={[\r\n              styles.progressFill, \r\n              { width: `${getProgressToNextLevel() * 100}%` }\r\n            ]} \r\n          />\r\n        </View>\r\n        <Text style={styles.progressText}>\r\n          {Math.round(getProgressToNextLevel() * 100)}% to Level {stats.level + 1}\r\n        </Text>\r\n      </View>\r\n\r\n      <View style={styles.statsGrid}>\r\n        <View style={styles.statItem}>\r\n          <MapPin size={20} color={Colors.secondary} />\r\n          <Text style={styles.statNumber}>{stats.totalTrips}</Text>\r\n          <Text style={styles.statLabel}>Trips</Text>\r\n        </View>\r\n\r\n        <View style={styles.statItem}>\r\n          <Target size={20} color={Colors.primary} />\r\n          <Text style={styles.statNumber}>{stats.placesVisited}</Text>\r\n          <Text style={styles.statLabel}>Places</Text>\r\n        </View>\r\n\r\n        <View style={styles.statItem}>\r\n          <Zap size={20} color={Colors.warning} />\r\n          <Text style={styles.statNumber}>{stats.streakDays}</Text>\r\n          <Text style={styles.statLabel}>Day Streak</Text>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 16,\r\n    elevation: 3,\r\n    margin: 16,\r\n    padding: 20,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n  },\r\n  header: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 16,\r\n  },\r\n  headerRight: {\r\n    alignItems: 'flex-end',\r\n    gap: 8,\r\n  },\r\n  levelContainer: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    gap: 8,\r\n  },\r\n  levelText: {\r\n    color: Colors.text,\r\n    fontSize: 20,\r\n    fontWeight: \"700\",\r\n  },\r\n  petButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.primaryLight,\r\n    borderRadius: 8,\r\n    justifyContent: 'center',\r\n    minWidth: 50,\r\n    padding: 8,\r\n  },\r\n  petEmoji: {\r\n    fontSize: 20,\r\n    marginBottom: 2,\r\n  },\r\n  petText: {\r\n    color: Colors.primary,\r\n    fontSize: 10,\r\n    fontWeight: '600',\r\n  },\r\n  pointsText: {\r\n    color: Colors.primary,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n  progressBar: {\r\n    backgroundColor: Colors.border,\r\n    borderRadius: 4,\r\n    height: 8,\r\n    marginBottom: 8,\r\n    overflow: \"hidden\",\r\n  },\r\n  progressContainer: {\r\n    marginBottom: 20,\r\n  },\r\n  progressFill: {\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 4,\r\n    height: \"100%\",\r\n  },\r\n  progressText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    textAlign: \"center\",\r\n  },\r\n  statItem: {\r\n    alignItems: \"center\",\r\n    gap: 4,\r\n  },\r\n  statLabel: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    fontWeight: \"500\",\r\n  },\r\n  statNumber: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n  },\r\n  statsGrid: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n});\r\n\r\nexport default UserStatsCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\VirtualPetCompanion.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'startAnimations'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [startAnimations, visible]","fix":{"range":[1358,1367],"text":"[startAnimations, visible]"}}]},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":317,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":317,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { shadowColor: '#000' }","line":321,"column":14,"nodeType":"ObjectExpression","endLine":333,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.white' is restricted from being used. Use semantic foreground token or explicit #FFF.","line":322,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":322,"endColumn":34},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.secondaryLight' is restricted from being used. Introduce semantic token or derive shade; avoid secondaryLight.","line":336,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":336,"endColumn":43},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":352,"column":12,"nodeType":"ObjectExpression","endLine":362,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.white' is restricted from being used. Use semantic foreground token or explicit #FFF.","line":365,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":365,"endColumn":34},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.primaryLight' is restricted from being used. Introduce semantic token or derive shade; avoid primaryLight.","line":379,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":379,"endColumn":41},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":392,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":392,"endColumn":28},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":433,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":433,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Heart, Star, MapPin, Zap } from 'lucide-react-native';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Pressable, Animated } from 'react-native';\n\r\nimport Colors from '@/constants/colors';\r\nimport { useGamificationStore } from '@/stores/gamificationStore';\r\n\r\ntype PetType = 'dragon' | 'unicorn' | 'robot' | 'phoenix';\r\n\r\ntype VirtualPet = {\r\n  id: string;\r\n  name: string;\r\n  type: PetType;\r\n  level: number;\r\n  happiness: number;\r\n  energy: number;\r\n  experience: number;\r\n  lastFed: Date;\r\n  evolutionStage: number;\r\n};\r\n\r\ntype VirtualPetCompanionProps = {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n};\r\n\r\nconst VirtualPetCompanion: React.FC<VirtualPetCompanionProps> = ({ visible, onClose }) => {\r\n  const { userStats, addPoints } = useGamificationStore();\r\n  const [pet, setPet] = useState<VirtualPet>({\r\n    id: 'buddy-pet',\r\n    name: 'Explorer',\r\n    type: 'dragon',\r\n    level: Math.floor(userStats.totalPoints / 100) + 1,\r\n    happiness: 85,\r\n    energy: 90,\r\n    experience: userStats.totalPoints % 100,\r\n    lastFed: new Date(),\r\n    evolutionStage: Math.floor(userStats.totalPoints / 500)\r\n  });\r\n  \r\n  const [bounceAnim] = useState(new Animated.Value(1));\r\n  const [glowAnim] = useState(new Animated.Value(0));\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      startAnimations();\r\n    }\r\n  }, [visible]);\r\n\r\n  useEffect(() => {\r\n    // Update pet based on user progress\r\n    setPet(prev => ({\r\n      ...prev,\r\n      level: Math.floor(userStats.totalPoints / 100) + 1,\r\n      experience: userStats.totalPoints % 100,\r\n      evolutionStage: Math.floor(userStats.totalPoints / 500)\r\n    }));\r\n  }, [userStats.totalPoints]);\r\n\r\n  const startAnimations = () => {\r\n    // Bounce animation\r\n    Animated.loop(\r\n      Animated.sequence([\r\n        Animated.timing(bounceAnim, {\r\n          toValue: 1.1,\r\n          duration: 1500,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(bounceAnim, {\r\n          toValue: 1,\r\n          duration: 1500,\r\n          useNativeDriver: true,\r\n        }),\r\n      ])\r\n    ).start();\r\n\r\n    // Glow animation\r\n    Animated.loop(\r\n      Animated.sequence([\r\n        Animated.timing(glowAnim, {\r\n          toValue: 1,\r\n          duration: 2000,\r\n          useNativeDriver: true,\r\n        }),\r\n        Animated.timing(glowAnim, {\r\n          toValue: 0,\r\n          duration: 2000,\r\n          useNativeDriver: true,\r\n        }),\r\n      ])\r\n    ).start();\r\n  };\r\n\r\n  const getPetEmoji = (): string => {\r\n    const stage = pet.evolutionStage;\r\n    switch (pet.type) {\r\n      case 'dragon':\r\n        if (stage >= 3) return '≡ƒÉ▓'; // Ancient Dragon\r\n        if (stage >= 2) return '≡ƒÉë'; // Mature Dragon  \r\n        if (stage >= 1) return '≡ƒªÄ'; // Young Dragon\r\n        return '≡ƒÑÜ'; // Dragon Egg\r\n      case 'unicorn':\r\n        if (stage >= 3) return '≡ƒªä'; // Majestic Unicorn\r\n        if (stage >= 2) return '≡ƒÉ┤'; // Magic Horse\r\n        if (stage >= 1) return '≡ƒÉÄ'; // Young Unicorn\r\n        return '≡ƒÑÜ'; // Unicorn Egg\r\n      case 'robot':\r\n        if (stage >= 3) return '≡ƒñû'; // Advanced Robot\r\n        if (stage >= 2) return 'ΓÜÖ∩╕Å'; // Mechanical Pet\r\n        if (stage >= 1) return '≡ƒöº'; // Robot Parts\r\n        return '≡ƒÑÜ'; // Robot Egg\r\n      case 'phoenix':\r\n        if (stage >= 3) return '≡ƒöÑ'; // Phoenix Fire\r\n        if (stage >= 2) return '≡ƒªà'; // Fire Bird\r\n        if (stage >= 1) return '≡ƒÉú'; // Phoenix Chick\r\n        return '≡ƒÑÜ'; // Phoenix Egg\r\n      default:\r\n        return '≡ƒÉ╛';\r\n    }\r\n  };\r\n\r\n  const getPetStage = (): string => {\r\n    const stage = pet.evolutionStage;\r\n    if (stage >= 3) return 'Legendary';\r\n    if (stage >= 2) return 'Evolved';\r\n    if (stage >= 1) return 'Growing';\r\n    return 'Baby';\r\n  };\r\n\r\n  const feedPet = () => {\r\n    setPet(prev => ({\r\n      ...prev,\r\n      happiness: Math.min(100, prev.happiness + 10),\r\n      energy: Math.min(100, prev.energy + 15),\r\n      lastFed: new Date()\r\n    }));\r\n    addPoints(5);\r\n  };\r\n\r\n  const playWithPet = () => {\r\n    setPet(prev => ({\r\n      ...prev,\r\n      happiness: Math.min(100, prev.happiness + 15),\r\n      energy: Math.max(0, prev.energy - 10)\r\n    }));\r\n    addPoints(10);\r\n  };\r\n\r\n  const getHappinessColor = () => {\r\n    if (pet.happiness >= 80) return '#4CAF50';\r\n    if (pet.happiness >= 50) return '#FF9800';\r\n    return '#F44336';\r\n  };\r\n\r\n  const getEnergyColor = () => {\r\n    if (pet.energy >= 70) return '#2196F3';\r\n    if (pet.energy >= 40) return '#FF9800';\r\n    return '#F44336';\r\n  };\r\n\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <View style={styles.overlay}>\r\n      <View style={styles.container}>\r\n        <View style={styles.header}>\r\n          <Text style={styles.title}>Your Pet Companion</Text>\r\n          <Pressable style={styles.closeButton} onPress={onClose}>\r\n            <Text style={styles.closeText}>├ù</Text>\r\n          </Pressable>\r\n        </View>\r\n\r\n        <View style={styles.petContainer}>\r\n          <Animated.View \r\n            style={[\r\n              styles.petAvatar,\r\n              { \r\n                transform: [{ scale: bounceAnim }],\r\n                opacity: glowAnim.interpolate({\r\n                  inputRange: [0, 1],\r\n                  outputRange: [0.8, 1]\r\n                })\r\n              }\r\n            ]}\r\n          >\r\n            <Text style={styles.petEmoji}>{getPetEmoji()}</Text>\r\n          </Animated.View>\r\n          \r\n          <View style={styles.petInfo}>\r\n            <Text style={styles.petName}>{pet.name}</Text>\r\n            <Text style={styles.petStage}>{getPetStage()} {pet.type}</Text>\r\n            <Text style={styles.petLevel}>Level {pet.level}</Text>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.statsContainer}>\r\n          <View style={styles.statBar}>\r\n            <View style={styles.statHeader}>\r\n              <Heart size={16} color={getHappinessColor()} />\r\n              <Text style={styles.statLabel}>Happiness</Text>\r\n              <Text style={styles.statValue}>{pet.happiness}%</Text>\r\n            </View>\r\n            <View style={styles.progressBar}>\r\n              <View \r\n                style={[\r\n                  styles.progressFill, \r\n                  { \r\n                    width: `${pet.happiness}%`,\r\n                    backgroundColor: getHappinessColor()\r\n                  }\r\n                ]} \r\n              />\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.statBar}>\r\n            <View style={styles.statHeader}>\r\n              <Zap size={16} color={getEnergyColor()} />\r\n              <Text style={styles.statLabel}>Energy</Text>\r\n              <Text style={styles.statValue}>{pet.energy}%</Text>\r\n            </View>\r\n            <View style={styles.progressBar}>\r\n              <View \r\n                style={[\r\n                  styles.progressFill, \r\n                  { \r\n                    width: `${pet.energy}%`,\r\n                    backgroundColor: getEnergyColor()\r\n                  }\r\n                ]} \r\n              />\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.statBar}>\r\n            <View style={styles.statHeader}>\r\n              <Star size={16} color={Colors.secondary} />\r\n              <Text style={styles.statLabel}>Experience</Text>\r\n              <Text style={styles.statValue}>{pet.experience}/100</Text>\r\n            </View>\r\n            <View style={styles.progressBar}>\r\n              <View \r\n                style={[\r\n                  styles.progressFill, \r\n                  { \r\n                    width: `${pet.experience}%`,\r\n                    backgroundColor: Colors.secondary\r\n                  }\r\n                ]} \r\n              />\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.actionButtons}>\r\n          <Pressable style={styles.actionButton} onPress={feedPet}>\r\n            <Text style={styles.actionEmoji}>≡ƒìÄ</Text>\r\n            <Text style={styles.actionText}>Feed</Text>\r\n          </Pressable>\r\n          \r\n          <Pressable style={styles.actionButton} onPress={playWithPet}>\r\n            <Text style={styles.actionEmoji}>≡ƒÄ╛</Text>\r\n            <Text style={styles.actionText}>Play</Text>\r\n          </Pressable>\r\n          \r\n          <Pressable style={styles.actionButton}>\r\n            <MapPin size={16} color={Colors.primary} />\r\n            <Text style={styles.actionText}>Adventure</Text>\r\n          </Pressable>\r\n        </View>\r\n\r\n        <View style={styles.evolutionHint}>\r\n          <Text style={styles.hintText}>\r\n            {pet.evolutionStage < 3 \r\n              ? `${500 - (userStats.totalPoints % 500)} more points to evolve!`\r\n              : 'Your pet has reached maximum evolution! ≡ƒîƒ'\r\n            }\r\n          </Text>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  actionButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.background,\r\n    borderRadius: 12,\r\n    flex: 1,\r\n    marginHorizontal: 4,\r\n    padding: 16,\r\n  },\r\n  actionButtons: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 16,\r\n  },\r\n  actionEmoji: {\r\n    fontSize: 24,\r\n    marginBottom: 4,\r\n  },\r\n  actionText: {\r\n    color: Colors.primary,\r\n    fontSize: 12,\r\n    fontWeight: '600',\r\n  },\r\n  closeButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.border,\r\n    borderRadius: 16,\r\n    height: 32,\r\n    justifyContent: 'center',\r\n    width: 32,\r\n  },\r\n  closeText: {\r\n    color: Colors.textLight,\r\n    fontSize: 20,\r\n    fontWeight: '600',\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.white,\r\n    borderRadius: 20,\r\n    elevation: 8,\r\n    margin: 20,\r\n    maxWidth: 400,\r\n    padding: 24,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 4 },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 12,\r\n    width: '90%',\r\n  },\r\n  evolutionHint: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.secondaryLight,\r\n    borderRadius: 8,\r\n    padding: 12,\r\n  },\r\n  header: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 20,\r\n  },\r\n  hintText: {\r\n    color: Colors.secondary,\r\n    fontSize: 12,\r\n    fontWeight: '600',\r\n    textAlign: 'center',\r\n  },\r\n  overlay: {\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    bottom: 0,\r\n    justifyContent: 'center',\r\n    left: 0,\r\n    position: 'absolute',\r\n    right: 0,\r\n    top: 0,\r\n    zIndex: 1000,\r\n  },\r\n  petAvatar: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.white,\r\n    borderRadius: 40,\r\n    elevation: 4,\r\n    height: 80,\r\n    justifyContent: 'center',\r\n    marginRight: 16,\r\n    shadowColor: Colors.primary,\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 8,\r\n    width: 80,\r\n  },\r\n  petContainer: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.primaryLight,\r\n    borderRadius: 16,\r\n    flexDirection: 'row',\r\n    marginBottom: 24,\r\n    padding: 16,\r\n  },\r\n  petEmoji: {\r\n    fontSize: 40,\r\n  },\r\n  petInfo: {\r\n    flex: 1,\r\n  },\r\n  petLevel: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n  },\r\n  petName: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: '700',\r\n    marginBottom: 4,\r\n  },\r\n  petStage: {\r\n    color: Colors.primary,\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    marginBottom: 2,\r\n  },\r\n  progressBar: {\r\n    backgroundColor: Colors.border,\r\n    borderRadius: 4,\r\n    height: 8,\r\n    overflow: 'hidden',\r\n  },\r\n  progressFill: {\r\n    borderRadius: 4,\r\n    height: '100%',\r\n  },\r\n  statBar: {\r\n    marginBottom: 16,\r\n  },\r\n  statHeader: {\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    marginBottom: 8,\r\n  },\r\n  statLabel: {\r\n    color: Colors.text,\r\n    flex: 1,\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    marginLeft: 8,\r\n  },\r\n  statValue: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    fontWeight: '600',\r\n  },\r\n  statsContainer: {\r\n    marginBottom: 24,\r\n  },\r\n  title: {\r\n    color: Colors.text,\r\n    fontSize: 20,\r\n    fontWeight: '700',\r\n  },\r\n});\r\n\r\nexport default VirtualPetCompanion;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\VoiceNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onVoiceCommand' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":179,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6707,6722],"text":"ΓÇó &quot;Where am I?\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6707,6722],"text":"ΓÇó &ldquo;Where am I?\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6707,6722],"text":"ΓÇó &#34;Where am I?\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6707,6722],"text":"ΓÇó &rdquo;Where am I?\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":179,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6707,6722],"text":"ΓÇó \"Where am I?&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6707,6722],"text":"ΓÇó \"Where am I?&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6707,6722],"text":"ΓÇó \"Where am I?&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6707,6722],"text":"ΓÇó \"Where am I?&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":180,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6774,6795],"text":"ΓÇó &quot;Repeat directions\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6774,6795],"text":"ΓÇó &ldquo;Repeat directions\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6774,6795],"text":"ΓÇó &#34;Repeat directions\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6774,6795],"text":"ΓÇó &rdquo;Repeat directions\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":180,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6774,6795],"text":"ΓÇó \"Repeat directions&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6774,6795],"text":"ΓÇó \"Repeat directions&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6774,6795],"text":"ΓÇó \"Repeat directions&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6774,6795],"text":"ΓÇó \"Repeat directions&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":181,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6847,6864],"text":"ΓÇó &quot;Call for help\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6847,6864],"text":"ΓÇó &ldquo;Call for help\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6847,6864],"text":"ΓÇó &#34;Call for help\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6847,6864],"text":"ΓÇó &rdquo;Call for help\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":181,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6847,6864],"text":"ΓÇó \"Call for help&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6847,6864],"text":"ΓÇó \"Call for help&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6847,6864],"text":"ΓÇó \"Call for help&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6847,6864],"text":"ΓÇó \"Call for help&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":182,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6916,6939],"text":"ΓÇó &quot;How much time left?\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6916,6939],"text":"ΓÇó &ldquo;How much time left?\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6916,6939],"text":"ΓÇó &#34;How much time left?\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6916,6939],"text":"ΓÇó &rdquo;How much time left?\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":182,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6916,6939],"text":"ΓÇó \"How much time left?&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6916,6939],"text":"ΓÇó \"How much time left?&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6916,6939],"text":"ΓÇó \"How much time left?&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6916,6939],"text":"ΓÇó \"How much time left?&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFFFFF' }","line":196,"column":15,"nodeType":"ObjectExpression","endLine":200,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":202,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":202,"endColumn":28},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F9F9F9' }","line":206,"column":22,"nodeType":"ObjectExpression","endLine":211,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":219,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":219,"endColumn":33},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#F0F4FF' }","line":254,"column":18,"nodeType":"ObjectExpression","endLine":259,"endColumn":4},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":261,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":261,"endColumn":28}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Mic, MicOff, Volume2, ArrowLeft, ArrowRight } from \"lucide-react-native\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\n\r\nimport Toast from './Toast';\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { useToast } from '@/hooks/useToast';\r\nimport { useNavigationStore } from '@/stores/navigationStore';\r\nimport { TransitStep } from '@/types/navigation';\r\nimport { announce } from '@/utils/accessibility';\r\n\r\ntype VoiceNavigationProps = {\r\n  /** Legacy single step string (fallback if steps not provided) */\r\n  currentStep?: string;\r\n  /** Full list of transit steps to enable step-by-step voice navigation */\r\n  steps?: TransitStep[];\r\n  /** Initial index into steps (default 0) */\r\n  initialIndex?: number;\r\n  onVoiceCommand?: (command: string) => void;\r\n};\r\n\r\nconst VoiceNavigation: React.FC<VoiceNavigationProps> = ({ \r\n  currentStep = \"Walk to Main Street Station\",\r\n  steps,\r\n  initialIndex = 0,\r\n  onVoiceCommand \r\n}) => {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const [stepIndex, setStepIndex] = useState(initialIndex);\r\n  const { toast, showToast, hideToast } = useToast();\r\n  const { accessibilitySettings } = useNavigationStore();\r\n\r\n  // Format an instruction for a given step\r\n  const formatStepInstruction = (step: TransitStep): string => {\r\n    const verb = step.type === 'walk' ? 'Walk' : step.type === 'bike' ? 'Bike' : step.type === 'car' ? 'Drive' : step.type === 'train' || step.type === 'subway' ? 'Take' : step.type === 'bus' ? 'Take' : 'Go';\r\n    const from = step.from || 'start';\r\n    const to = step.to || 'destination';\r\n    return `${verb} from ${from} to ${to}`;\r\n  };\r\n\r\n  const activeInstruction = useMemo(() => {\r\n    if (steps && steps.length > 0 && steps[stepIndex]) {\r\n      return formatStepInstruction(steps[stepIndex]);\r\n    }\r\n    return currentStep;\r\n  }, [steps, stepIndex, currentStep]);\r\n\r\n  // Announce automatically when step changes if voiceDescriptions enabled\r\n  useEffect(() => {\r\n    if (accessibilitySettings.voiceDescriptions && steps && steps.length > 0) {\r\n      announce(activeInstruction, { politeness: 'polite' });\r\n    }\r\n  }, [activeInstruction, accessibilitySettings.voiceDescriptions, steps]);\r\n\r\n  const handleVoiceToggle = () => {\r\n    if (isListening) {\r\n      setIsListening(false);\r\n      showToast('No longer listening for commands', 'info');\r\n    } else {\r\n      setIsListening(true);\r\n      showToast(\"Voice activated ΓÇö say 'help' for commands\", 'success');\r\n      \r\n      // Simulate stopping after 5 seconds\r\n      setTimeout(() => {\r\n        setIsListening(false);\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  const handleSpeak = () => {\r\n    setIsSpeaking(true);\r\n    const phrase = `\"${activeInstruction}\"`;\r\n    showToast(phrase, 'info');\r\n    // Always (re)announce repeat regardless of dedupe\r\n    if (accessibilitySettings.voiceDescriptions) {\r\n      announce(activeInstruction, { politeness: 'assertive', dedupe: false });\r\n    }\r\n    setTimeout(() => { setIsSpeaking(false); }, 2000);\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (!steps) return;\r\n    setStepIndex((i) => Math.max(0, i - 1));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (!steps) return;\r\n    setStepIndex((i) => Math.min(steps.length - 1, i + 1));\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.stepContainer}>\r\n        <Text style={styles.stepText} testID=\"voice-active-instruction\">{activeInstruction}</Text>\r\n        {steps && steps.length > 0 && (\r\n          <Text style={styles.stepMeta} accessibilityLabel={`Step ${stepIndex + 1} of ${steps.length}`}>{`Step ${stepIndex + 1}/${steps.length}`}</Text>\r\n        )}\r\n      </View>\r\n\r\n      <View style={styles.controlsContainer}>\r\n        {steps && steps.length > 0 && (\r\n          <Pressable\r\n            accessibilityRole=\"button\"\r\n            accessibilityLabel={stepIndex === 0 ? 'Previous step (disabled)' : 'Go to previous step'}\r\n            accessibilityState={{ disabled: stepIndex === 0 }}\r\n            hitSlop={8}\r\n            style={[styles.navButton, stepIndex === 0 && styles.navButtonDisabled]}\r\n            onPress={handlePrev}\r\n            disabled={stepIndex === 0}\r\n            testID=\"voice-prev\"\r\n          >\r\n            <ArrowLeft size={20} color=\"#FFFFFF\" />\r\n            <Text style={styles.buttonText}>Prev</Text>\r\n          </Pressable>\r\n        )}\r\n\r\n        <Pressable\r\n          accessibilityRole=\"button\"\r\n          accessibilityLabel={isListening ? 'Stop listening' : 'Activate voice commands'}\r\n          accessibilityState={{ selected: isListening }}\r\n          hitSlop={8}\r\n          style={[\r\n            styles.voiceButton,\r\n            isListening && styles.listeningButton\r\n          ]}\r\n          onPress={handleVoiceToggle}\r\n          testID=\"voice-toggle\"\r\n        >\r\n          {isListening ? (\r\n            <MicOff size={24} color=\"#FFFFFF\" />\r\n          ) : (\r\n            <Mic size={24} color=\"#FFFFFF\" />\r\n          )}\r\n          <Text style={styles.buttonText}>\r\n            {isListening ? \"Stop\" : \"Voice\"}\r\n          </Text>\r\n        </Pressable>\r\n\r\n        <Pressable\r\n          accessibilityRole=\"button\"\r\n          accessibilityLabel={isSpeaking ? 'Repeating directions' : 'Repeat current step'}\r\n          accessibilityState={{ busy: isSpeaking }}\r\n          hitSlop={8}\r\n          style={[\r\n            styles.speakButton,\r\n            isSpeaking && styles.speakingButton\r\n          ]}\r\n          onPress={handleSpeak}\r\n          testID=\"voice-repeat\"\r\n        >\r\n          <Volume2 size={24} color=\"#FFFFFF\" />\r\n          <Text style={styles.buttonText}>\r\n            {isSpeaking ? \"Speaking...\" : \"Repeat\"}\r\n          </Text>\r\n        </Pressable>\r\n\r\n        {steps && steps.length > 0 && (\r\n          <Pressable\r\n            accessibilityRole=\"button\"\r\n            accessibilityLabel={stepIndex === steps.length - 1 ? 'Next step (disabled)' : 'Go to next step'}\r\n            accessibilityState={{ disabled: stepIndex === steps.length - 1 }}\r\n            hitSlop={8}\r\n            style={[styles.navButton, stepIndex === steps.length - 1 && styles.navButtonDisabled]}\r\n            onPress={handleNext}\r\n            disabled={stepIndex === steps.length - 1}\r\n            testID=\"voice-next\"\r\n          >\r\n            <ArrowRight size={20} color=\"#FFFFFF\" />\r\n            <Text style={styles.buttonText}>Next</Text>\r\n          </Pressable>\r\n        )}\r\n      </View>\r\n\r\n      {isListening && (\r\n        <View style={styles.commandsContainer}>\r\n          <Text style={styles.commandsTitle}>Voice Commands:</Text>\r\n          <Text style={styles.commandText}>ΓÇó \"Where am I?\"</Text>\r\n          <Text style={styles.commandText}>ΓÇó \"Repeat directions\"</Text>\r\n          <Text style={styles.commandText}>ΓÇó \"Call for help\"</Text>\r\n          <Text style={styles.commandText}>ΓÇó \"How much time left?\"</Text>\r\n          <Toast \r\n            message={toast.message}\r\n            type={toast.type}\r\n            visible={toast.visible}\r\n            onHide={hideToast}\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  buttonText: {\r\n    color: \"#FFFFFF\",\r\n    fontSize: 12,\r\n    fontWeight: \"600\",\r\n  },\r\n  commandText: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginBottom: 4,\r\n  },\r\n  commandsContainer: {\r\n    backgroundColor: \"#F9F9F9\",\r\n    borderRadius: 8,\r\n    marginTop: 16,\r\n    padding: 12,\r\n  },\r\n  commandsTitle: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n    marginBottom: 8,\r\n  },\r\n  container: {\r\n    backgroundColor: Colors.card,\r\n    borderRadius: 12,\r\n    margin: 16,\r\n    padding: 16,\r\n  },\r\n  controlsContainer: {\r\n    flexDirection: \"row\",\r\n    gap: 16,\r\n    justifyContent: \"space-around\",\r\n  },\r\n  listeningButton: {\r\n    backgroundColor: Colors.error,\r\n  },\r\n  navButton: {\r\n    alignItems: 'center',\r\n    backgroundColor: Colors.secondary,\r\n    borderRadius: 8,\r\n    flex: 1,\r\n    gap: 4,\r\n    padding: 12,\r\n  },\r\n  navButtonDisabled: {\r\n    backgroundColor: Colors.border,\r\n  },\r\n  speakButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.secondary,\r\n    borderRadius: 8,\r\n    flex: 1,\r\n    gap: 4,\r\n    padding: 12,\r\n  },\r\n  speakingButton: {\r\n    backgroundColor: Colors.warning,\r\n  },\r\n  stepContainer: {\r\n    backgroundColor: \"#F0F4FF\",\r\n    borderRadius: 8,\r\n    marginBottom: 16,\r\n    padding: 12,\r\n  },\r\n  stepMeta: {\r\n    color: Colors.textLight,\r\n    fontSize: 12,\r\n    marginTop: 4,\r\n    textAlign: 'center'\r\n  },\r\n  stepText: {\r\n    color: Colors.text,\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n    textAlign: \"center\",\r\n  },\r\n  voiceButton: {\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.primary,\r\n    borderRadius: 8,\r\n    flex: 1,\r\n    gap: 4,\r\n    padding: 12,\r\n  },\r\n});\r\n\r\nexport default VoiceNavigation;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\components\\WeatherCard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":24,"column":39,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":24,"endColumn":55},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":34,"column":23,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":34,"endColumn":34},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":55,"column":12,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":55,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Cloud, Sun, CloudRain, Snowflake, Wind } from \"lucide-react-native\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\n\r\nimport Colors from \"@/constants/colors\";\r\nimport { WeatherInfo } from \"@/types/navigation\";\r\n\r\ntype WeatherCardProps = {\r\n  weather: WeatherInfo;\r\n};\r\n\r\nconst WeatherCard: React.FC<WeatherCardProps> = ({ weather }) => {\r\n  const getWeatherIcon = () => {\r\n    switch (weather.condition.toLowerCase()) {\r\n      case \"sunny\":\r\n        return <Sun size={24} color=\"#FFD700\" />;\r\n      case \"cloudy\":\r\n        return <Cloud size={24} color=\"#87CEEB\" />;\r\n      case \"rainy\":\r\n        return <CloudRain size={24} color=\"#4682B4\" />;\r\n      case \"snowy\":\r\n        return <Snowflake size={24} color=\"#B0E0E6\" />;\r\n      default:\r\n        return <Wind size={24} color={Colors.textLight} />;\r\n    }\r\n  };\r\n\r\n  const getBackgroundColor = () => {\r\n    switch (weather.condition.toLowerCase()) {\r\n      case \"sunny\": return \"#FFF8DC\";\r\n      case \"cloudy\": return \"#F0F8FF\";\r\n      case \"rainy\": return \"#E6F3FF\";\r\n      case \"snowy\": return \"#F0F8FF\";\r\n      default: return Colors.card;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.container, { backgroundColor: getBackgroundColor() }]}>\r\n      <View style={styles.weatherInfo}>\r\n        {getWeatherIcon()}\r\n        <View style={styles.textContainer}>\r\n          <Text style={styles.temperature}>{weather.temperature}┬░F</Text>\r\n          <Text style={styles.condition}>{weather.condition}</Text>\r\n        </View>\r\n      </View>\r\n      \r\n      <Text style={styles.recommendation}>{weather.recommendation}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  condition: {\r\n    color: Colors.textLight,\r\n    fontSize: 14,\r\n    textTransform: \"capitalize\",\r\n  },\r\n  container: {\r\n    borderLeftColor: Colors.primary,\r\n    borderLeftWidth: 4,\r\n    borderRadius: 12,\r\n    margin: 16,\r\n    padding: 16,\r\n  },\r\n  recommendation: {\r\n    color: Colors.text,\r\n    fontSize: 14,\r\n    fontStyle: \"italic\",\r\n  },\r\n  temperature: {\r\n    color: Colors.text,\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n  },\r\n  textContainer: {\r\n    marginLeft: 12,\r\n  },\r\n  weatherInfo: {\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: 8,\r\n  },\r\n});\r\n\r\nexport default WeatherCard;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\atlanta.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\boston.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\chicago.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\london.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\losAngeles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\miami.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\newYork.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\philadelphia.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\sanFrancisco.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\seattle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\tokyo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\config\\regions\\washington.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\constants\\colors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3100,3103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3100,3103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const lightColors = {\r\n  primary: \"#4A80F0\",\r\n  primaryForeground: '#FFFFFF',\r\n  secondary: \"#67D295\",\r\n  secondaryForeground: '#06260F',\r\n  background: \"#FFFFFF\",\r\n  surface: \"#F8F9FA\",\r\n  surfaceAlt: '#EFF1F3',\r\n  text: \"#222222\",\r\n  textSecondary: \"#555555\",\r\n  border: \"#E0E0E0\",\r\n  error: \"#D93025\",\r\n  errorForeground: '#FFFFFF',\r\n  success: \"#1E8E3E\",\r\n  successForeground: '#FFFFFF',\r\n  warning: \"#B56200\",\r\n  warningForeground: '#FFFFFF',\r\n  info: '#1A56B3',\r\n  infoForeground: '#FFFFFF',\r\n  focus: '#1A73E8',\r\n  // Transit\r\n  subway: \"#FF9500\",\r\n  bus: \"#4285F4\",\r\n  train: \"#34A853\",\r\n  walk: \"#9C27B0\",\r\n  // Map\r\n  mapWater: \"#A5D7F7\",\r\n  mapPark: \"#B8E39B\",\r\n  mapRoad: \"#FFFFFF\",\r\n  mapBuilding: \"#E6E6E6\",\r\n  // Misc\r\n  overlay: 'rgba(0,0,0,0.5)'\r\n} as const;\r\n\r\nexport const darkColors = {\r\n  ...lightColors,\r\n  background: '#0D1117',\r\n  surface: '#161B22',\r\n  surfaceAlt: '#1F242B',\r\n  text: '#F1F5F9',\r\n  textSecondary: '#A0A6AE',\r\n  border: '#2D333B',\r\n  primary: '#5391FF',\r\n  secondary: '#55C686',\r\n  focus: '#3182F6',\r\n  error: '#F85149',\r\n  success: '#34D058',\r\n  warning: '#E3B341',\r\n  info: '#3693F3',\r\n  mapRoad: '#2D333B',\r\n  mapBuilding: '#3A424B',\r\n  overlay: 'rgba(255,255,255,0.4)'\r\n} as const;\r\n\r\nexport const highContrastColors = {\r\n  ...lightColors,\r\n  background: '#000000',\r\n  surface: '#111111',\r\n  surfaceAlt: '#1A1A1A',\r\n  text: '#FFFFFF',\r\n  textSecondary: '#E0E0E0',\r\n  border: '#FFFFFF',\r\n  primary: '#FFFF00',\r\n  primaryForeground: '#000000',\r\n  secondary: '#00FFFF',\r\n  secondaryForeground: '#000000',\r\n  focus: '#FF00FF',\r\n  error: '#FF5555',\r\n  success: '#33FF66',\r\n  warning: '#FFA500',\r\n  info: '#00A2FF'\r\n} as const;\r\n\r\n// Permit any string values for palette keys, not locked to light palette literal types\r\nexport type Palette = { [K in keyof typeof lightColors]: string };\r\n\r\nexport const palettes: Record<'light' | 'dark' | 'highContrast', Palette> = {\r\n  light: lightColors as Palette,\r\n  dark: darkColors as Palette,\r\n  highContrast: highContrastColors as Palette,\r\n};\r\n\r\n// Backward compatibility shim: many components still reference legacy semantic keys\r\n// like Colors.card, Colors.textLight, Colors.background, etc. We expose a proxy object\r\n// that maps old keys to the nearest palette equivalents, preserving existing imports\r\n// while allowing incremental migration to theme context usage.\r\ntype LegacyKeys = {\r\n  card: string;\r\n  textLight: string; // maps to textSecondary\r\n  white: string; // maps to primaryForeground or '#FFFFFF'\r\n  primaryLight: string; // lighten(primary) approximation\r\n  secondaryLight: string; // lighten(secondary) approximation\r\n  androidRipple: string; // semi-transparent ripple color\r\n  background: string;\r\n  text: string;\r\n  border: string;\r\n  primary: string;\r\n  secondary: string;\r\n  error: string;\r\n  warning: string;\r\n  success: string;\r\n};\r\n\r\n// Determine current scheme (temporary simplistic approach; can be wired to ThemeProvider later)\r\nconst activeScheme: keyof typeof palettes = 'light';\r\nconst base = palettes[activeScheme];\r\n\r\nconst legacy: LegacyKeys & Palette = new Proxy(base as any, {\r\n  get(target, prop: string) {\r\n    if (prop === 'card') return target.surface;\r\n    if (prop === 'textLight') return target.textSecondary;\r\n    if (prop === 'white') return '#FFFFFF';\r\n    if (prop === 'primaryLight') {\r\n      // naive lighten: blend with white\r\n      const c = target.primary.replace('#', '');\r\n      const r = parseInt(c.substring(0, 2), 16);\r\n      const g = parseInt(c.substring(2, 4), 16);\r\n      const b = parseInt(c.substring(4, 6), 16);\r\n      const lr = Math.min(255, Math.round(r + (255 - r) * 0.25));\r\n      const lg = Math.min(255, Math.round(g + (255 - g) * 0.25));\r\n      const lb = Math.min(255, Math.round(b + (255 - b) * 0.25));\r\n      return `#${lr.toString(16).padStart(2, '0')}${lg.toString(16).padStart(2, '0')}${lb.toString(16).padStart(2, '0')}`;\r\n    }\r\n    if (prop === 'secondaryLight') {\r\n      const c = target.secondary.replace('#', '');\r\n      const r = parseInt(c.substring(0, 2), 16);\r\n      const g = parseInt(c.substring(2, 4), 16);\r\n      const b = parseInt(c.substring(4, 6), 16);\r\n      const lr = Math.min(255, Math.round(r + (255 - r) * 0.25));\r\n      const lg = Math.min(255, Math.round(g + (255 - g) * 0.25));\r\n      const lb = Math.min(255, Math.round(b + (255 - b) * 0.25));\r\n      return `#${lr.toString(16).padStart(2, '0')}${lg.toString(16).padStart(2, '0')}${lb.toString(16).padStart(2, '0')}`;\r\n    }\r\n    if (prop === 'androidRipple') return 'rgba(0,0,0,0.12)';\r\n    return target[prop];\r\n  }\r\n});\r\n\r\nexport default legacy;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\constants\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\eslint.config.cjs","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":4,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":4,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":6,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":8,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":23,"column":21,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":23,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":23,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":27,"column":35,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":27,"endColumn":78},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":27,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":42},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":28,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":28,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":28,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":27},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":29,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":29,"endColumn":64},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":29,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":35},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":30,"column":29,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":30,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":30,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":36},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":31,"column":21,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":31,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":31,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":28}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Flat ESLint config migrated from legacy .eslintrc.cjs for ESLint v9+\r\n// Keeps existing rules and transitional legacy color key guard.\r\n\r\nconst js = require('@eslint/js');\r\nconst { FlatCompat } = require('@eslint/eslintrc');\r\nconst compat = new FlatCompat({ baseDirectory: __dirname });\r\n\r\nmodule.exports = [\r\n    // Base JS recommended\r\n    js.configs.recommended,\r\n    // Bring in plugin recommended configs via compat (mirrors previous extends)\r\n    ...compat.extends(\r\n        'plugin:@typescript-eslint/recommended',\r\n        'plugin:react/recommended',\r\n        'plugin:react-hooks/recommended',\r\n        'plugin:react-native/all'\r\n    ),\r\n    // Global language / parser setup\r\n    {\r\n        files: ['**/*.{ts,tsx,js,jsx}'],\r\n        ignores: ['dist', 'web-build', 'node_modules', '.expo', 'coverage'],\r\n        languageOptions: {\r\n            parser: require('@typescript-eslint/parser'),\r\n            parserOptions: { ecmaVersion: 'latest', sourceType: 'module' }\r\n        },\r\n        plugins: {\r\n            '@typescript-eslint': require('@typescript-eslint/eslint-plugin'),\r\n            react: require('eslint-plugin-react'),\r\n            'react-hooks': require('eslint-plugin-react-hooks'),\r\n            'react-native': require('eslint-plugin-react-native'),\r\n            import: require('eslint-plugin-import')\r\n        },\r\n        settings: { react: { version: 'detect' } },\r\n        rules: {\r\n            'react/react-in-jsx-scope': 'off',\r\n            'react/prop-types': 'off',\r\n            '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],\r\n            'import/order': ['warn', { 'newlines-between': 'always', alphabetize: { order: 'asc', caseInsensitive: true } }]\r\n        }\r\n    },\r\n    // Prevent JSX in .test.ts files\r\n    {\r\n        files: ['**/*.test.ts'],\r\n        rules: {\r\n            'no-restricted-syntax': [\r\n                'error',\r\n                { selector: 'Program:has(JSXElement)', message: 'JSX detected in .test.ts file; rename to .test.tsx' }\r\n            ]\r\n        }\r\n    },\r\n    // Transitional legacy color key guard (warn level to avoid failing existing uses)\r\n    {\r\n        files: ['**/*.{ts,tsx}'],\r\n        rules: {\r\n            'no-restricted-properties': [\r\n                'warn',\r\n                { object: 'Colors', property: 'card', message: 'Legacy color key card: migrate to theme.colors.surface or useTheme().' },\r\n                { object: 'Colors', property: 'textLight', message: 'Use theme.colors.textSecondary instead of textLight.' },\r\n                { object: 'Colors', property: 'primaryLight', message: 'Derive a lighter shade or introduce semantic token; avoid primaryLight.' },\r\n                { object: 'Colors', property: 'secondaryLight', message: 'Derive lighter secondary shade; avoid secondaryLight.' },\r\n                { object: 'Colors', property: 'androidRipple', message: 'Use Platform.select ripple logic; avoid androidRipple.' },\r\n                { object: 'Colors', property: 'white', message: 'Use semantic foreground token or explicit #FFF.' }\r\n            ]\r\n        }\r\n    }\r\n];\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\eslint.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":4,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":4,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":31},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":6,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":8,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":20,"column":21,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":20,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":20,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":28},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":24,"column":35,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":24,"endColumn":78},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":24,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":42},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":25,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":25,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":25,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":27},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":26,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":26,"endColumn":64},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":26,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":35},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":27,"column":29,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":27,"endColumn":66},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":27,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":36},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":28,"column":21,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":28,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":28,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":28}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Flat ESLint configuration (final) adapted from previous .eslintrc.cjs\r\n// Using FlatCompat to reuse plugin recommended sets.\r\n\r\nconst { FlatCompat } = require('@eslint/eslintrc');\r\nconst js = require('@eslint/js');\r\nconst compat = new FlatCompat({ baseDirectory: __dirname });\r\n\r\nmodule.exports = [\r\n    js.configs.recommended,\r\n    ...compat.extends(\r\n        'plugin:@typescript-eslint/recommended',\r\n        'plugin:react/recommended',\r\n        'plugin:react-hooks/recommended',\r\n        'plugin:react-native/all'\r\n    ),\r\n    {\r\n        files: ['**/*.{js,jsx,ts,tsx}'],\r\n        ignores: ['dist', 'web-build', 'node_modules', '.expo', 'coverage'],\r\n        languageOptions: {\r\n            parser: require('@typescript-eslint/parser'),\r\n            parserOptions: { ecmaVersion: 2023, sourceType: 'module' }\r\n        },\r\n        plugins: {\r\n            '@typescript-eslint': require('@typescript-eslint/eslint-plugin'),\r\n            react: require('eslint-plugin-react'),\r\n            'react-hooks': require('eslint-plugin-react-hooks'),\r\n            'react-native': require('eslint-plugin-react-native'),\r\n            import: require('eslint-plugin-import')\r\n        },\r\n        settings: { react: { version: 'detect' } },\r\n        rules: {\r\n            'react/react-in-jsx-scope': 'off',\r\n            'react/prop-types': 'off',\r\n            '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],\r\n            'import/order': ['warn', { 'newlines-between': 'always', alphabetize: { order: 'asc', caseInsensitive: true } }]\r\n        }\r\n    },\r\n    {\r\n        files: ['**/*.test.ts'],\r\n        rules: {\r\n            'no-restricted-syntax': [\r\n                'error',\r\n                { selector: 'Program:has(JSXElement)', message: 'JSX detected in .test.ts file; rename to .test.tsx' }\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        files: ['**/*.{ts,tsx}'],\r\n        rules: {\r\n            'no-restricted-properties': [\r\n                'warn',\r\n                { object: 'Colors', property: 'card', message: 'Legacy color key card: migrate to theme.colors.surface or useTheme().' },\r\n                { object: 'Colors', property: 'textLight', message: 'Use theme.colors.textSecondary instead of textLight.' },\r\n                { object: 'Colors', property: 'primaryLight', message: 'Introduce semantic token or derive shade; avoid primaryLight.' },\r\n                { object: 'Colors', property: 'secondaryLight', message: 'Introduce semantic token or derive shade; avoid secondaryLight.' },\r\n                { object: 'Colors', property: 'androidRipple', message: 'Use Platform.select ripple logic; avoid androidRipple.' },\r\n                { object: 'Colors', property: 'white', message: 'Use semantic foreground token or explicit #FFF.' }\r\n            ]\r\n        }\r\n    }\r\n];\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\expo-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useAsyncStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useLocation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Location from \"expo-location\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Platform, Alert } from \"react-native\";\r\n\r\nexport type LocationData = {\r\n  latitude: number;\r\n  longitude: number;\r\n  error: string | null;\r\n};\r\n\r\nexport default function useLocation() {\r\n  const [location, setLocation] = useState<LocationData>({\r\n    latitude: 40.7128,\r\n    longitude: -74.0060,\r\n    error: null,\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const hasLocation = !location.error && typeof location.latitude === 'number' && typeof location.longitude === 'number';\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        if (Platform.OS === \"web\") {\r\n          // Web geolocation API\r\n          if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n              (position) => {\r\n                setLocation({\r\n                  latitude: position.coords.latitude,\r\n                  longitude: position.coords.longitude,\r\n                  error: null,\r\n                });\r\n                setLoading(false);\r\n              },\r\n              (error) => {\r\n                setLocation(prev => ({\r\n                  ...prev,\r\n                  error: \"Could not get your location\"\r\n                }));\r\n                setLoading(false);\r\n              }\r\n            );\r\n          }\r\n          return;\r\n        }\r\n\r\n        // Request permissions for mobile platforms\r\n        const { status } = await Location.requestForegroundPermissionsAsync();\r\n\r\n        if (status !== \"granted\") {\r\n          // Android-specific permission handling\r\n          if (Platform.OS === 'android') {\r\n            Alert.alert(\r\n              \"Location Permission\",\r\n              \"This app needs location access to show you nearby places and directions. Please enable location in your device settings.\",\r\n              [\r\n                { text: \"Cancel\", style: \"cancel\" },\r\n                {\r\n                  text: \"Settings\", onPress: () => {\r\n                    // On Android, we can't directly open settings, but we can guide the user\r\n                    Alert.alert(\"Enable Location\", \"Go to Settings > Apps > KidMap > Permissions > Location\");\r\n                  }\r\n                }\r\n              ]\r\n            );\r\n          }\r\n\r\n          setLocation(prev => ({\r\n            ...prev,\r\n            error: \"Permission to access location was denied\"\r\n          }));\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Get current location with Android-optimized settings\r\n        const locationOptions = Platform.OS === 'android'\r\n          ? {\r\n            accuracy: Location.Accuracy.Balanced,\r\n            timeout: 15000,\r\n            maximumAge: 10000,\r\n          }\r\n          : {\r\n            accuracy: Location.Accuracy.Balanced,\r\n          };\r\n\r\n        const currentLocation = await Location.getCurrentPositionAsync(locationOptions);\r\n\r\n        setLocation({\r\n          latitude: currentLocation.coords.latitude,\r\n          longitude: currentLocation.coords.longitude,\r\n          error: null,\r\n        });\r\n      } catch (error) {\r\n        console.log(\"Location error:\", error);\r\n        setLocation(prev => ({\r\n          ...prev,\r\n          error: \"Could not get your location\"\r\n        }));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const safeCoordinates = () => hasLocation ? { latitude: location.latitude, longitude: location.longitude } : undefined;\r\n\r\n  return { location, loading, hasLocation, safeCoordinates };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useNetworkStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useRegionalData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useRoutesQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useSafeZoneMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\hooks\\useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\jest.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Jest configuration for Expo + React Native + TypeScript.\r\n */\r\nmodule.exports = {\r\n    preset: 'jest-expo',\r\n    testEnvironment: 'jsdom',\r\n    transform: {\r\n        '^.+\\\\.(ts|tsx)$': 'ts-jest',\r\n    },\r\n    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],\r\n    moduleNameMapper: {\r\n        '^@/modules/(.*)$': '<rootDir>/src/modules/$1',\r\n        '^@/core/(.*)$': '<rootDir>/src/core/$1',\r\n        '^@/shared/(.*)$': '<rootDir>/src/shared/$1',\r\n        '^@/services/(.*)$': '<rootDir>/src/services/$1',\r\n        '^@/hooks-internal/(.*)$': '<rootDir>/src/hooks/$1',\r\n        '^@/hooks/(.*)$': '<rootDir>/hooks/$1',\r\n        '^@/utils/(.*)$': '<rootDir>/utils/$1',\r\n        '^@/(.*)$': '<rootDir>/$1',\r\n    },\r\n    setupFilesAfterEnv: ['@testing-library/jest-native/extend-expect'],\r\n    testMatch: [\r\n        '<rootDir>/_tests_/**/*.(test|spec).(ts|tsx|js)',\r\n        '<rootDir>/__tests__/**/*.(test|spec).(ts|tsx|js)'\r\n    ],\r\n    collectCoverageFrom: [\r\n        'components/**/*.{ts,tsx}',\r\n        'hooks/**/*.{ts,tsx}',\r\n        'stores/**/*.{ts,tsx}',\r\n        'utils/**/*.{ts,tsx}'\r\n    ],\r\n    coverageDirectory: 'coverage',\r\n    coverageReporters: ['text', 'lcov'],\r\n    coverageThreshold: {\r\n        global: {\r\n            lines: 0.8 * 100, // 80%\r\n            statements: 0.8 * 100,\r\n            branches: 0.7 * 100,\r\n            functions: 0.75 * 100,\r\n        }\r\n    },\r\n    verbose: true,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\metro.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":4,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":11,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":17,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { getDefaultConfig } = require('expo/metro-config');\r\n\r\n/** @type {import('expo/metro-config').MetroConfig} */\r\nconst config = getDefaultConfig(__dirname);\r\n\r\n// Ensure compatibility with web\r\nconfig.resolver.platforms = ['ios', 'android', 'native', 'web'];\r\n\r\n// Add support for TypeScript paths\r\nconfig.resolver.alias = {\r\n    '@': __dirname,\r\n};\r\n\r\n// Ensure proper module resolution\r\nconfig.resolver.sourceExts.push('web.js', 'web.ts', 'web.tsx');\r\n\r\nmodule.exports = config;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\mocks\\funFacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\mocks\\liveArrivals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\mocks\\places.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\mocks\\transit.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TransitStep' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Route, TransitStep } from \"@/types/navigation\";\r\n\r\nexport const sampleRoutes: Route[] = [\r\n  {\r\n    id: \"route1\",\r\n    totalDuration: 35,\r\n    departureTime: \"3:15 PM\",\r\n    arrivalTime: \"3:50 PM\",\r\n    steps: [\r\n      {\r\n        id: \"step1\",\r\n        type: \"walk\",\r\n        from: \"Current Location\",\r\n        to: \"Main St Station\",\r\n        duration: 5\r\n      },\r\n      {\r\n        id: \"step2\",\r\n        type: \"subway\",\r\n        line: \"A\",\r\n        color: \"#0039A6\",\r\n        from: \"Main St Station\",\r\n        to: \"Central Park Station\",\r\n        duration: 20,\r\n        departureTime: \"3:22 PM\",\r\n        arrivalTime: \"3:42 PM\",\r\n        stops: 4\r\n      },\r\n      {\r\n        id: \"step3\",\r\n        type: \"walk\",\r\n        from: \"Central Park Station\",\r\n        to: \"Central Park\",\r\n        duration: 8\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"route2\",\r\n    totalDuration: 40,\r\n    departureTime: \"3:15 PM\",\r\n    arrivalTime: \"3:55 PM\",\r\n    steps: [\r\n      {\r\n        id: \"step1\",\r\n        type: \"walk\",\r\n        from: \"Current Location\",\r\n        to: \"Downtown Station\",\r\n        duration: 7\r\n      },\r\n      {\r\n        id: \"step2\",\r\n        type: \"train\",\r\n        line: \"B\",\r\n        color: \"#FF6319\",\r\n        from: \"Downtown Station\",\r\n        to: \"Park Station\",\r\n        duration: 25,\r\n        departureTime: \"3:25 PM\",\r\n        arrivalTime: \"3:50 PM\",\r\n        stops: 3\r\n      },\r\n      {\r\n        id: \"step3\",\r\n        type: \"walk\",\r\n        from: \"Park Station\",\r\n        to: \"Central Park\",\r\n        duration: 5\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const subwayLines = [\r\n  { id: \"a\", name: \"A\", color: \"#0039A6\" },\r\n  { id: \"b\", name: \"B\", color: \"#FF6319\" },\r\n  { id: \"c\", name: \"C\", color: \"#00933C\" },\r\n  { id: \"d\", name: \"D\", color: \"#FF6319\" },\r\n  { id: \"e\", name: \"E\", color: \"#0039A6\" },\r\n  { id: \"f\", name: \"F\", color: \"#FF6319\" },\r\n  { id: \"g\", name: \"G\", color: \"#6CBE45\" }\r\n];\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\scripts\\build-production.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":4,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":4,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":7,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":10,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":15,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":19,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":22,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":24,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":25,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":29,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":32,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":34,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":35,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":39,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":42,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":44,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":48,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":51,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":52,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":53,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":54,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":58,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":59,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":74,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":77,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":133,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":133,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":135,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":136,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":136,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":137,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":137,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":138,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":8}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n\r\nconst { execSync } = require('child_process');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconsole.log('≡ƒÜÇ Starting production build process...\\n');\r\n\r\n// 1. Clean previous builds\r\nconsole.log('≡ƒº╣ Cleaning previous builds...');\r\ntry {\r\n  execSync('rm -rf .expo dist web-build', { stdio: 'inherit' });\r\n  console.log('Γ£à Cleaned previous builds\\n');\r\n} catch (error) {\r\n  console.warn('ΓÜá∩╕Å Warning: Could not clean previous builds\\n');\r\n}\r\n\r\n// 2. Install dependencies\r\nconsole.log('≡ƒôª Installing dependencies...');\r\ntry {\r\n  execSync('bun install', { stdio: 'inherit' });\r\n  console.log('Γ£à Dependencies installed\\n');\r\n} catch (error) {\r\n  console.error('Γ¥î Failed to install dependencies');\r\n  process.exit(1);\r\n}\r\n\r\n// 3. Run TypeScript check\r\nconsole.log('≡ƒöì Running TypeScript check...');\r\ntry {\r\n  execSync('npx tsc --noEmit', { stdio: 'inherit' });\r\n  console.log('Γ£à TypeScript check passed\\n');\r\n} catch (error) {\r\n  console.error('Γ¥î TypeScript check failed');\r\n  process.exit(1);\r\n}\r\n\r\n// 4. Run linting\r\nconsole.log('≡ƒöº Running linter...');\r\ntry {\r\n  execSync('npx eslint . --ext .ts,.tsx --max-warnings 0', { stdio: 'inherit' });\r\n  console.log('Γ£à Linting passed\\n');\r\n} catch (error) {\r\n  console.warn('ΓÜá∩╕Å Warning: Linting issues found, but continuing...\\n');\r\n}\r\n\r\n// 5. Build for web\r\nconsole.log('≡ƒîÉ Building for web...');\r\ntry {\r\n  execSync('npx expo export --platform web', { stdio: 'inherit' });\r\n  console.log('Γ£à Web build completed\\n');\r\n} catch (error) {\r\n  console.error('Γ¥î Web build failed');\r\n  process.exit(1);\r\n}\r\n\r\n// 6. Generate app.json for EAS Build (if needed)\r\nconsole.log('≡ƒô▒ Preparing mobile build configuration...');\r\nconst appJsonPath = path.join(__dirname, '..', 'app.json');\r\nconst appJson = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));\r\n\r\n// Update version for production\r\nconst now = new Date();\r\nconst buildNumber = `${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}.${now.getHours().toString().padStart(2, '0')}${now.getMinutes().toString().padStart(2, '0')}`;\r\n\r\nappJson.expo.version = appJson.expo.version || '1.0.0';\r\nappJson.expo.ios = appJson.expo.ios || {};\r\nappJson.expo.android = appJson.expo.android || {};\r\n\r\nappJson.expo.ios.buildNumber = buildNumber;\r\nappJson.expo.android.versionCode = parseInt(buildNumber.replace(/\\./g, ''));\r\n\r\nfs.writeFileSync(appJsonPath, JSON.stringify(appJson, null, 2));\r\nconsole.log(`Γ£à Updated build numbers: iOS ${buildNumber}, Android ${appJson.expo.android.versionCode}\\n`);\r\n\r\n// 7. Create deployment checklist\r\nconst checklistPath = path.join(__dirname, '..', 'DEPLOYMENT_CHECKLIST.md');\r\nconst checklist = `# Deployment Checklist\r\n\r\n## Pre-deployment\r\n- [ ] All TypeScript errors resolved\r\n- [ ] All tests passing\r\n- [ ] Performance testing completed\r\n- [ ] Accessibility testing completed\r\n- [ ] Security review completed\r\n- [ ] API endpoints configured for production\r\n- [ ] Environment variables set\r\n- [ ] Analytics configured\r\n- [ ] Crash reporting configured\r\n\r\n## Mobile App Store Deployment\r\n- [ ] App icons and splash screens updated\r\n- [ ] App store descriptions written\r\n- [ ] Screenshots prepared\r\n- [ ] Privacy policy updated\r\n- [ ] Terms of service updated\r\n- [ ] App store metadata configured\r\n\r\n### iOS App Store\r\n- [ ] Apple Developer account configured\r\n- [ ] Certificates and provisioning profiles updated\r\n- [ ] App Store Connect configured\r\n- [ ] TestFlight testing completed\r\n\r\n### Google Play Store\r\n- [ ] Google Play Console configured\r\n- [ ] Signing key configured\r\n- [ ] Internal testing completed\r\n- [ ] Store listing completed\r\n\r\n## Web Deployment\r\n- [ ] Domain configured\r\n- [ ] SSL certificate installed\r\n- [ ] CDN configured\r\n- [ ] Performance optimization completed\r\n- [ ] SEO metadata added\r\n\r\n## Post-deployment\r\n- [ ] Monitoring dashboards configured\r\n- [ ] Error tracking verified\r\n- [ ] Performance metrics baseline established\r\n- [ ] User feedback channels configured\r\n- [ ] Support documentation updated\r\n\r\n## Build Information\r\n- Build Date: ${now.toISOString()}\r\n- iOS Build Number: ${buildNumber}\r\n- Android Version Code: ${appJson.expo.android.versionCode}\r\n- App Version: ${appJson.expo.version}\r\n`;\r\n\r\nfs.writeFileSync(checklistPath, checklist);\r\nconsole.log('Γ£à Created deployment checklist\\n');\r\n\r\nconsole.log('≡ƒÄë Production build process completed!');\r\nconsole.log('≡ƒôï Check DEPLOYMENT_CHECKLIST.md for next steps');\r\nconsole.log('≡ƒîÉ Web build available in: dist/');\r\nconsole.log('≡ƒô▒ Mobile builds can be created with: npx eas build --platform all');\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\scripts\\dependency-manager.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":2,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":2,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":3,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":3,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":12,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":18,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":22,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":24,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":28,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":29,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":35,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":39,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":40,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":43,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":45,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":46,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":52,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":55,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":56,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":57,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":62,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":71,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":76,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":79,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":82,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":85,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":85,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":87,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":91,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":97,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":103,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":108,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":112,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":113,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'setInterval' is not defined.","line":119,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":120,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":120,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":125,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":125,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":150,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":150,"endColumn":12}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execSync } = require('child_process');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nclass DependencyManager {\r\n  constructor() {\r\n    this.packageJsonPath = path.join(process.cwd(), 'package.json');\r\n    this.packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));\r\n  }\r\n\r\n  async checkOutdated() {\r\n    console.log('≡ƒöì Checking for outdated packages...');\r\n    try {\r\n      const result = execSync('npm outdated --json', { encoding: 'utf8' });\r\n      const outdated = JSON.parse(result);\r\n\r\n      if (Object.keys(outdated).length === 0) {\r\n        console.log('Γ£à All packages are up to date!');\r\n        return [];\r\n      }\r\n\r\n      console.log('≡ƒôª Outdated packages found:');\r\n      Object.entries(outdated).forEach(([pkg, info]) => {\r\n        console.log(`  ${pkg}: ${info.current} ΓåÆ ${info.latest}`);\r\n      });\r\n\r\n      return Object.keys(outdated);\r\n    } catch (error) {\r\n      console.log('Γ£à All packages are up to date!');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async checkPeerDependencies() {\r\n    console.log('≡ƒöì Checking peer dependencies...');\r\n    try {\r\n      const result = execSync('npm ls --depth=0', { encoding: 'utf8' });\r\n      if (result.includes('UNMET') || result.includes('invalid')) {\r\n        console.log('ΓÜá∩╕Å  Peer dependency issues found:');\r\n        console.log(result);\r\n        return false;\r\n      }\r\n      console.log('Γ£à No peer dependency issues found!');\r\n      return true;\r\n    } catch (error) {\r\n      console.log('ΓÜá∩╕Å  Peer dependency issues detected');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async auditSecurity() {\r\n    console.log('≡ƒöÆ Running security audit...');\r\n    try {\r\n      execSync('npm audit --audit-level=moderate', { stdio: 'inherit' });\r\n      console.log('Γ£à No security vulnerabilities found!');\r\n    } catch (error) {\r\n      console.log('ΓÜá∩╕Å  Security vulnerabilities found. Run \"npm audit fix\" to resolve.');\r\n    }\r\n  }\r\n\r\n  async updateSafely() {\r\n    console.log('≡ƒöä Updating packages safely...');\r\n\r\n    // Update patch and minor versions only\r\n    execSync('npm update', { stdio: 'inherit' });\r\n\r\n    // Check if everything still works\r\n    const peerDepsOk = await this.checkPeerDependencies();\r\n\r\n    if (!peerDepsOk) {\r\n      console.log('ΓÜá∩╕Å  Peer dependency issues after update. Consider adding overrides.');\r\n    }\r\n  }\r\n\r\n  async fullHealthCheck() {\r\n    console.log('≡ƒÅÑ Running full dependency health check...\\n');\r\n\r\n    await this.checkOutdated();\r\n    console.log('');\r\n\r\n    await this.checkPeerDependencies();\r\n    console.log('');\r\n\r\n    await this.auditSecurity();\r\n    console.log('');\r\n\r\n    console.log('Γ£à Health check complete!');\r\n  }\r\n\r\n  async autoFix() {\r\n    console.log('≡ƒöº Auto-fixing dependency issues...\\n');\r\n\r\n    // Fix security issues\r\n    try {\r\n      execSync('npm audit fix', { stdio: 'inherit' });\r\n    } catch (error) {\r\n      console.log('ΓÜá∩╕Å  Some security issues require manual attention');\r\n    }\r\n\r\n    // Update packages safely\r\n    await this.updateSafely();\r\n\r\n    console.log('\\nΓ£à Auto-fix complete!');\r\n  }\r\n}\r\n\r\n// CLI interface\r\nconst command = process.argv[2];\r\nconst manager = new DependencyManager();\r\n\r\n// Handle auto-scheduling\r\nif (process.argv.includes('--auto-schedule')) {\r\n  console.log('≡ƒòÉ Starting daily dependency monitoring...');\r\n\r\n  // Run initial check\r\n  manager.fullHealthCheck();\r\n\r\n  // Schedule daily checks\r\n  setInterval(() => {\r\n    console.log('≡ƒôà Daily dependency check...');\r\n    manager.fullHealthCheck();\r\n  }, 24 * 60 * 60 * 1000); // 24 hours\r\n\r\n  // Keep the process running\r\n  console.log('Γ£à Auto-scheduler is running. Press Ctrl+C to stop.');\r\n  return;\r\n}\r\n\r\n// Regular CLI commands\r\nswitch (command) {\r\n  case 'check':\r\n    manager.fullHealthCheck();\r\n    break;\r\n  case 'update':\r\n    manager.updateSafely();\r\n    break;\r\n  case 'fix':\r\n    manager.autoFix();\r\n    break;\r\n  case 'outdated':\r\n    manager.checkOutdated();\r\n    break;\r\n  case 'peers':\r\n    manager.checkPeerDependencies();\r\n    break;\r\n  case 'audit':\r\n    manager.auditSecurity();\r\n    break;\r\n  default:\r\n    console.log(`\r\nUsage: node scripts/dependency-manager.js [command]\r\n\r\nCommands:\r\n  check           - Run full health check\r\n  update          - Update packages safely\r\n  fix             - Auto-fix issues\r\n  outdated        - Check for outdated packages\r\n  peers           - Check peer dependencies\r\n  audit           - Security audit\r\n  --auto-schedule - Start daily monitoring\r\n    `);\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\scripts\\pretypecheck-clean.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":4,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":4,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":7,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":35,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":41,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":10}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\r\n// Remove .test.ts files that contain JSX (likely misnamed) to prevent tsc parse errors.\r\n// Also specifically target routesCacheMetrics duplicate.\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst root = process.cwd();\r\nconst TEST_DIR = path.join(root, '_tests_');\r\n\r\nfunction fileHasJSX(p) {\r\n  try {\r\n    const txt = fs.readFileSync(p, 'utf8');\r\n    // Naive heuristic: looks for closing provider tag or angle brackets with capitalized component\r\n    return /<QueryClientProvider|<ComponentOnce|<\\w+\\s+[^>]*>/.test(txt);\r\n  } catch { return false; }\r\n}\r\n\r\nfunction scan(dir) {\r\n  if (!fs.existsSync(dir)) return [];\r\n  return fs.readdirSync(dir).flatMap(name => {\r\n    const full = path.join(dir, name);\r\n    const stat = fs.statSync(full);\r\n    if (stat.isDirectory()) return scan(full);\r\n    return [full];\r\n  });\r\n}\r\n\r\nconst candidates = scan(TEST_DIR).filter(f => /\\.test\\.ts$/.test(f));\r\nlet removed = 0;\r\nfor (const f of candidates) {\r\n  if (fileHasJSX(f)) {\r\n    fs.unlinkSync(f);\r\n    removed++;\r\n    // eslint-disable-next-line no-console\r\n    console.log('[pretypecheck-clean] Removed misnamed JSX test file:', path.relative(root, f));\r\n  }\r\n}\r\n\r\nif (removed === 0) {\r\n  // eslint-disable-next-line no-console\r\n  console.log('[pretypecheck-clean] No misnamed JSX .test.ts files found.');\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\shared\\navigation\\nav.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\core\\validation\\baseSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\core\\validation\\categorySchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\core\\validation\\checkInSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\core\\validation\\helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2330,2333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2330,2333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2364,2367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2364,2367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2423,2426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2423,2426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2581,2584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2581,2584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":96,"column":93,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":96,"endColumn":101},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":96,"column":110,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":96,"endColumn":118}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\r\n\r\n// Sanitizes a string input by trimming, truncating, and escaping basic HTML entities.\r\nexport function sanitizeInput(input: string, maxLength: number = 1000): string {\r\n    if (typeof input !== 'string') return '';\r\n    return input\r\n        .trim()\r\n        .slice(0, maxLength)\r\n        .replace(/[<>\"'&]/g, (match) => {\r\n            const entities: Record<string, string> = {\r\n                '<': '&lt;',\r\n                '>': '&gt;',\r\n                '\"': '&quot;',\r\n                \"'\": '&#x27;',\r\n                '&': '&amp;',\r\n            };\r\n            return entities[match] || match;\r\n        });\r\n}\r\n\r\nexport type ToastFn = (message: string, type?: 'success' | 'error' | 'info' | 'warning') => void;\r\n\r\n// Parses data with a zod schema and surfaces errors via a toast helper.\r\nexport function safeParseWithToast<T>(schema: z.ZodSchema<T>, data: unknown, toast?: ToastFn): T | null {\r\n    const result = schema.safeParse(data);\r\n    if (!result.success) {\r\n        const msg = result.error.issues.map(i => i.message).join('\\n');\r\n        toast?.(msg, 'error');\r\n        return null;\r\n    }\r\n    return result.data;\r\n}\r\n\r\n// Validation result shape reused for distance validator feedback.\r\nexport type ValidationResult = {\r\n    isValid: boolean;\r\n    errors: string[];\r\n    warnings?: string[];\r\n};\r\n\r\n// Basic distance sanity validation (meters) with warning thresholds.\r\nexport function validateDistance(distance: number, context: string = 'location'): ValidationResult {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    if (typeof distance !== 'number' || isNaN(distance)) {\r\n        errors.push(`${context} distance must be a valid number`);\r\n    } else if (distance < 0) {\r\n        errors.push(`${context} distance cannot be negative`);\r\n    } else if (distance > 20_000_000) { // ~20,000 km (half Earth circumference)\r\n        errors.push(`${context} distance is unrealistically large`);\r\n    } else if (distance > 1_000_000) { // 1000 km\r\n        warnings.push(`${context} distance is very large (>1000km)`);\r\n    }\r\n\r\n    return { isValid: errors.length === 0, errors, warnings };\r\n}\r\n\r\n// Form data validation + sanitization using a lightweight rule map (legacy support scenario).\r\nexport function validateAndSanitizeFormData(\r\n    data: Record<string, any>,\r\n    schema: Record<string, any>\r\n): { isValid: boolean; sanitizedData: Record<string, any>; errors: string[]; warnings: string[] } {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    const sanitizedData: Record<string, any> = {};\r\n\r\n    for (const [key, rules] of Object.entries(schema)) {\r\n        const value = data[key];\r\n        if (rules.required && (value === undefined || value === null || value === '')) {\r\n            errors.push(`${key} is required`);\r\n            continue;\r\n        }\r\n        if (!rules.required && (value === undefined || value === null || value === '')) continue;\r\n        if (rules.type && typeof value !== rules.type) {\r\n            errors.push(`${key} must be of type ${rules.type}`);\r\n            continue;\r\n        }\r\n        if (typeof value === 'string') {\r\n            const sanitized = sanitizeInput(value, rules.maxLength);\r\n            if (rules.minLength && sanitized.length < rules.minLength) errors.push(`${key} must be at least ${rules.minLength} characters`);\r\n            if (rules.maxLength && sanitized.length > rules.maxLength) warnings.push(`${key} was truncated to ${rules.maxLength} characters`);\r\n            if (rules.pattern && !rules.pattern.test(sanitized)) errors.push(`${key} format is invalid`);\r\n            sanitizedData[key] = sanitized;\r\n        } else {\r\n            sanitizedData[key] = value;\r\n        }\r\n    }\r\n\r\n    return { isValid: errors.length === 0, sanitizedData, errors, warnings };\r\n}\r\n\r\n/**\r\n * Deprecated: Prefer structured logging wrappers elsewhere.\r\n */\r\nexport function logValidationResult(context: string, result: ValidationResult, log: { warn: Function; debug: Function }) {\r\n    if (!result.isValid) log.warn?.(`Validation failed for ${context}`, { errors: result.errors });\r\n    if (result.warnings?.length) log.warn?.(`Validation warnings for ${context}`, { warnings: result.warnings });\r\n    if (result.isValid && !result.warnings?.length) log.debug?.(`Validation passed for ${context}`);\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\core\\validation\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\core\\validation\\safetySchemas.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":17,"column":31,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":32,"suggestions":[{"messageId":"removeEscape","fix":{"range":[741,742],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[741,741],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":17,"column":47,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":48,"suggestions":[{"messageId":"removeEscape","fix":{"range":[757,758],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[757,757],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":17,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":17,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[759,760],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[759,759],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\r\nimport { LocationSchema } from './baseSchemas';\r\n\r\nexport const SafeZoneSchema = z.object({\r\n    id: z.string().min(1, 'Safe zone ID is required'),\r\n    name: z.string().min(1, 'Safe zone name is required').max(100, 'Safe zone name exceeds 100 characters'),\r\n    center: LocationSchema,\r\n    radius: z.number().positive('Safe zone radius must be positive'),\r\n    isActive: z.boolean(),\r\n});\r\n\r\nexport const EmergencyContactSchema = z.object({\r\n    id: z.string().min(1, 'Contact ID is required'),\r\n    name: z.string().min(1, 'Contact name is required').max(150, 'Contact name exceeds 150 characters'),\r\n    phone: z.string().min(1, 'Contact phone number is required').refine(v => {\r\n        const phoneRegex = /^[\\+]?[1-9][\\d\\s\\-\\(\\)]{7,15}$/;\r\n        return phoneRegex.test(v.replace(/\\s/g, ''));\r\n    }, 'Phone number format is invalid'),\r\n    relationship: z.string().min(1, 'Contact relationship is required'),\r\n    isPrimary: z.boolean(),\r\n    canReceiveAlerts: z.boolean().default(false),\r\n});\r\n\r\nexport const EmergencyContactCreateSchema = EmergencyContactSchema.omit({ id: true }).extend({\r\n    canReceiveAlerts: z.boolean().optional(),\r\n});\r\n\r\nexport const ParentalSettingsSchema = z.object({\r\n    requirePinForParentMode: z.boolean(),\r\n    parentPin: z.string().min(4).max(8).regex(/^\\d+$/, 'PIN must contain only numbers').optional(),\r\n    allowChildCategoryCreation: z.boolean(),\r\n    requireApprovalForCategories: z.boolean(),\r\n    maxCustomCategories: z.number().int().min(1).max(100),\r\n    safeZoneAlerts: z.boolean(),\r\n    checkInReminders: z.boolean(),\r\n    emergencyContacts: z.array(EmergencyContactSchema).default([]),\r\n});\r\n\r\nexport const SafeZoneCreateSchema = SafeZoneSchema.omit({ id: true });\r\n\r\nexport const CheckInRequestCreateSchema = z.object({\r\n    message: z.string().min(1, 'Message required').max(240, 'Message too long'),\r\n    isUrgent: z.boolean().default(false),\r\n});\r\n\r\nexport const PinSchema = z.string()\r\n    .min(4, 'PIN must be at least 4 digits')\r\n    .max(8, 'PIN must be no more than 8 digits')\r\n    .regex(/^\\d+$/, 'PIN must contain only numbers');\r\n\r\nexport type SafeZoneData = z.infer<typeof SafeZoneSchema>;\r\nexport type EmergencyContact = z.infer<typeof EmergencyContactSchema>;\r\nexport type EmergencyContactCreate = z.infer<typeof EmergencyContactCreateSchema>;\r\nexport type ParentalSettingsData = z.infer<typeof ParentalSettingsSchema>;\r\nexport type SafeZoneCreate = z.infer<typeof SafeZoneCreateSchema>;\r\nexport type CheckInRequestCreate = z.infer<typeof CheckInRequestCreateSchema>;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\hooks\\useRoutesQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\__tests__\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\__tests__\\safety.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\DevicePingHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\DevicePingHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\ParentDashboard.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#4A80F0' }","line":20,"column":10,"nodeType":"ObjectExpression","endLine":20,"endColumn":101},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":21,"column":14,"nodeType":"ObjectExpression","endLine":21,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\r\n\r\ntype Props = { onExit: () => void };\r\n\r\nconst ParentDashboard: React.FC<Props> = ({ onExit }) => {\r\n\treturn (\r\n\t\t<View style={styles.container}>\r\n\t\t\t<Text style={styles.title}>Parent Dashboard</Text>\r\n\t\t\t<Pressable onPress={onExit} style={styles.button}>\r\n\t\t\t\t<Text style={styles.buttonText}>Exit</Text>\r\n\t\t\t</Pressable>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nexport default ParentDashboard;\r\n\r\nconst styles = StyleSheet.create({\r\n\tbutton: { backgroundColor: '#4A80F0', borderRadius: 8, paddingHorizontal: 16, paddingVertical: 10 },\r\n\tbuttonText: { color: '#fff', fontWeight: '600' },\r\n\tcontainer: { padding: 16 },\r\n\ttitle: { fontSize: 18, fontWeight: '600', marginBottom: 12 },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\SafeZoneActivityLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\SafeZoneIndicator.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#4B5563' }","line":17,"column":8,"nodeType":"ObjectExpression","endLine":20,"endColumn":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\n\r\nexport const SafeZoneIndicator: React.FC = () => {\r\n\treturn (\r\n\t\t<View style={styles.indicator}>\r\n\t\t\t<Text style={styles.text}>Safe Zones: OK</Text>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tindicator: {\r\n\t\tpaddingHorizontal: 16,\r\n\t\tpaddingVertical: 8,\r\n\t},\r\n\ttext: {\r\n\t\tcolor: '#4B5563',\r\n\t\tfontSize: 12,\r\n\t},\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\SafeZoneManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\SafeZoneStatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\SafetyDashboard.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":39,"column":28,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":39,"endColumn":39},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":43,"column":19,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":43,"endColumn":35},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":44,"column":22,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":44,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\n\r\nimport { useSafeZoneMonitor } from '../hooks/useSafeZoneMonitor';\n\r\nimport Colors from '@/constants/colors';\r\n\r\nconst SafetyDashboard: React.FC = () => {\r\n  const { isMonitoring, getCurrentSafeZoneStatus, events } = useSafeZoneMonitor();\r\n  const status = getCurrentSafeZoneStatus();\r\n  return (\r\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\r\n      <Text style={styles.title}>Safety Dashboard</Text>\r\n      <View style={styles.card}>\r\n        <Text style={styles.cardTitle}>Monitoring</Text>\r\n        <Text style={styles.value}>{isMonitoring ? 'Active' : 'Inactive'}</Text>\r\n      </View>\r\n      <View style={styles.card}>\r\n        <Text style={styles.cardTitle}>Safe Zones Inside</Text>\r\n        <Text style={styles.value}>{status?.inside.length ?? 0} / {status?.totalActive ?? 0}</Text>\r\n        {!!status?.inside.length && status.inside.map(z => (\r\n          <Text key={z.id} style={styles.listItem}>ΓÇó {z.name}</Text>\r\n        ))}\r\n      </View>\r\n      <View style={styles.card}>\r\n        <Text style={styles.cardTitle}>Recent Events</Text>\r\n        {events.length === 0 && <Text style={styles.empty}>No events yet</Text>}\r\n        {events.slice(0,5).map(e => (\r\n          <Text key={e.id} style={styles.listItem}>{e.type === 'entry' ? 'Γ¼ñ' : 'Γùï'} {e.zoneName}</Text>\r\n        ))}\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default SafetyDashboard;\r\n\r\nconst styles = StyleSheet.create({\r\n  card: { backgroundColor: Colors.card, borderRadius: 12, marginBottom: 16, padding: 16 },\r\n  cardTitle: { color: Colors.text, fontSize: 14, fontWeight: '600', marginBottom: 8 },\r\n  container: { backgroundColor: Colors.background, flex: 1 },\r\n  content: { padding: 16 },\r\n  empty: { color: Colors.textLight, fontSize: 12, fontStyle: 'italic' },\r\n  listItem: { color: Colors.textLight, fontSize: 12 },\r\n  title: { color: Colors.text, fontSize: 20, fontWeight: '700', marginBottom: 16 },\r\n  value: { color: Colors.primary, fontSize: 16, fontWeight: '700', marginBottom: 4 },\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\SafetyPanel.tsx","messages":[{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.card' is restricted from being used. Legacy color key card: migrate to theme.colors.surface or useTheme().","line":89,"column":20,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":89,"endColumn":31},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":101,"column":10,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":101,"endColumn":26},{"ruleId":"no-restricted-properties","severity":1,"message":"'Colors.textLight' is restricted from being used. Use theme.colors.textSecondary instead of textLight.","line":117,"column":10,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":117,"endColumn":26},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#FFF' }","line":121,"column":18,"nodeType":"ObjectExpression","endLine":121,"endColumn":68}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\r\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\n\r\nimport { useSafeZoneMonitor } from '../hooks/useSafeZoneMonitor';\r\nimport { useParentalStore } from '../stores/parentalStore';\n\r\nimport Toast from '@/components/Toast';\r\nimport Colors from '@/constants/colors';\r\nimport { useToast } from '@/hooks/useToast';\r\n\r\ntype SafetyPanelProps = {\r\n\tcurrentLocation?: { latitude: number; longitude: number } | null;\r\n\tcurrentPlace?: { id: string; name: string } | undefined;\r\n};\r\n\r\nconst SafetyPanel: React.FC<SafetyPanelProps> = ({ currentLocation, currentPlace }) => {\r\n\tconst { settings } = useParentalStore();\r\n\tconst { isMonitoring, startMonitoring, stopMonitoring, getCurrentSafeZoneStatus, events } = useSafeZoneMonitor();\r\n\tconst status = getCurrentSafeZoneStatus();\r\n\tconst lastEventIdRef = useRef<string | null>(null);\r\n\tconst { toast, showToast, hideToast } = useToast();\r\n\r\n\t// Show toast for new entry/exit events if enabled\r\n\tuseEffect(() => {\r\n\t\tif (!settings.safeZoneAlerts) return;\r\n\t\tconst latest = events[0];\r\n\t\tif (latest && latest.id !== lastEventIdRef.current) {\r\n\t\t\tlastEventIdRef.current = latest.id;\r\n\t\t\tconst verb = latest.type === 'entry' ? 'Entered' : 'Exited';\r\n\t\t\tshowToast(`${verb} ${latest.zoneName}`, latest.type === 'entry' ? 'success' : 'warning');\r\n\t\t}\r\n\t}, [events, settings.safeZoneAlerts, showToast]);\r\n\r\n\tconst insideCount = status?.inside.length ?? 0;\r\n\tconst activeCount = status?.totalActive ?? 0;\r\n\r\n\treturn (\r\n\t\t<View style={styles.container}>\r\n\t\t\t<View style={styles.headerRow}>\r\n\t\t\t\t<Text style={styles.title}>Safety</Text>\r\n\t\t\t\t<Pressable\r\n\t\t\t\t\taccessibilityLabel={isMonitoring ? 'Stop monitoring safe zones' : 'Start monitoring safe zones'}\r\n\t\t\t\t\tstyle={[styles.monitorButton, isMonitoring ? styles.stopBtn : styles.startBtn]}\r\n\t\t\t\t\tonPress={isMonitoring ? stopMonitoring : startMonitoring}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Text style={styles.monitorBtnText}>{isMonitoring ? 'Stop' : 'Start'}</Text>\r\n\t\t\t\t</Pressable>\r\n\t\t\t</View>\r\n\t\t\t<View style={styles.row}>\r\n\t\t\t\t<Text style={styles.label}>Destination:</Text>\r\n\t\t\t\t<Text style={styles.value}>{currentPlace ? currentPlace.name : 'None'}</Text>\r\n\t\t\t</View>\r\n\t\t\t{currentLocation && (\r\n\t\t\t\t<View style={styles.row}>\r\n\t\t\t\t\t<Text style={styles.label}>Location:</Text>\r\n\t\t\t\t\t<Text style={styles.value}>\r\n\t\t\t\t\t\t{currentLocation.latitude.toFixed(3)}, {currentLocation.longitude.toFixed(3)}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t</View>\r\n\t\t\t)}\r\n\t\t\t<View style={styles.row}>\r\n\t\t\t\t<Text style={styles.label}>Zones Inside:</Text>\r\n\t\t\t\t<Text style={styles.value}>{insideCount}/{activeCount}</Text>\r\n\t\t\t</View>\r\n\t\t\t{!!status?.inside.length && (\r\n\t\t\t\t<View style={styles.zoneList}>\r\n\t\t\t\t\t{status.inside.map(z => (\r\n\t\t\t\t\t\t<Text key={z.id} style={styles.zoneItem}>ΓÇó {z.name}</Text>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</View>\r\n\t\t\t)}\r\n\t\t\t{!!events.length && (\r\n\t\t\t\t<View style={styles.eventContainer}>\r\n\t\t\t\t\t<Text style={styles.eventsTitle}>Recent Events</Text>\r\n\t\t\t\t\t{events.slice(0,3).map(e => (\r\n\t\t\t\t\t\t<Text key={e.id} style={styles.eventItem}>{e.type === 'entry' ? 'Γ¼ñ' : 'Γùï'} {e.zoneName}</Text>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</View>\r\n\t\t\t)}\r\n\t\t\t<Toast message={toast.message} type={toast.type} visible={toast.visible} onHide={hideToast} />\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nexport default SafetyPanel;\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tbackgroundColor: Colors.card,\r\n\t\tborderRadius: 12,\r\n\t\tmarginBottom: 16,\r\n\t\tpadding: 12,\r\n\t},\r\n\teventContainer: {\r\n\t\tborderTopColor: Colors.border,\r\n\t\tborderTopWidth: 1,\r\n\t\tmarginTop: 10,\r\n\t\tpaddingTop: 8,\r\n\t},\r\n\teventItem: {\r\n\t\tcolor: Colors.textLight,\r\n\t\tfontSize: 11,\r\n\t},\r\n\teventsTitle: {\r\n\t\tcolor: Colors.text,\r\n\t\tfontSize: 12,\r\n\t\tfontWeight: '600',\r\n\t\tmarginBottom: 4,\r\n\t},\r\n\theaderRow: {\r\n\t\talignItems: 'center',\r\n\t\tflexDirection: 'row',\r\n\t\tjustifyContent: 'space-between',\r\n\t\tmarginBottom: 4,\r\n\t},\r\n\tlabel: {\r\n\t\tcolor: Colors.textLight,\r\n\t\tfontSize: 12,\r\n\t\twidth: 90,\r\n\t},\r\n\tmonitorBtnText: { color: '#FFF', fontSize: 12, fontWeight: '600' },\r\n\tmonitorButton: {\r\n\t\tborderRadius: 16,\r\n\t\tpaddingHorizontal: 12,\r\n\t\tpaddingVertical: 6,\r\n\t},\r\n\trow: {\r\n\t\tflexDirection: 'row',\r\n\t\tmarginTop: 4,\r\n\t},\r\n\tstartBtn: { backgroundColor: Colors.primary },\r\n\tstopBtn: { backgroundColor: Colors.error },\r\n\ttitle: {\r\n\t\tcolor: Colors.text,\r\n\t\tfontSize: 16,\r\n\t\tfontWeight: '700',\r\n\t},\r\n\tvalue: {\r\n\t\tcolor: Colors.text,\r\n\t\tflex: 1,\r\n\t\tfontSize: 12,\r\n\t},\r\n\tzoneItem: {\r\n\t\tcolor: Colors.primary,\r\n\t\tfontSize: 12,\r\n\t},\r\n\tzoneList: {\r\n\t\tmarginTop: 8,\r\n\t},\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\hooks\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\hooks\\useSafeZoneMonitor.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'forceRefresh'. Either include it or remove the dependency array.","line":58,"column":8,"nodeType":"ArrayExpression","endLine":58,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [forceRefresh, isMonitoring]","fix":{"range":[1961,1975],"text":"[forceRefresh, isMonitoring]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\stores\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\stores\\parentalStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3120,3123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3120,3123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import createContextHook from '@nkzw/create-context-hook';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useState, useEffect } from 'react';\n\r\nimport {\r\n    SafeZone,\r\n    CheckInRequest,\r\n    ParentalSettings,\r\n    EmergencyContact,\r\n    ParentDashboardData,\r\n    DevicePingRequest\r\n} from '../types/parental';\n\r\nimport { safeParseWithToast, ToastFn } from '@/core/validation';\r\nimport { SafeZoneCreateSchema, EmergencyContactCreateSchema, ParentalSettingsSchema, CheckInRequestCreateSchema } from '@/core/validation/safetySchemas';\r\n\r\nconst DEFAULT_EMERGENCY_CONTACTS: EmergencyContact[] = [\r\n    {\r\n        id: 'emergency_911',\r\n        name: 'Emergency Services',\r\n        phone: '911',\r\n        relationship: 'Emergency',\r\n        isPrimary: false,\r\n        canReceiveAlerts: false,\r\n    },\r\n];\r\n\r\nconst DEFAULT_SETTINGS: ParentalSettings = {\r\n    requirePinForParentMode: true,\r\n    parentPin: undefined,\r\n    allowChildCategoryCreation: true,\r\n    requireApprovalForCategories: true,\r\n    maxCustomCategories: 20,\r\n    safeZoneAlerts: true,\r\n    checkInReminders: true,\r\n    emergencyContacts: DEFAULT_EMERGENCY_CONTACTS,\r\n};\r\n\r\nconst STORAGE_KEYS = {\r\n    SETTINGS: 'kidmap_parental_settings',\r\n    SAFE_ZONES: 'kidmap_safe_zones',\r\n    CHECK_IN_REQUESTS: 'kidmap_check_in_requests',\r\n    DASHBOARD_DATA: 'kidmap_dashboard_data',\r\n    DEVICE_PINGS: 'kidmap_device_pings',\r\n};\r\n\r\nexport const [ParentalProvider, useParentalStore] = createContextHook(() => {\r\n    const [settings, setSettings] = useState<ParentalSettings>(DEFAULT_SETTINGS);\r\n    const [safeZones, setSafeZones] = useState<SafeZone[]>([]);\r\n    const [checkInRequests, setCheckInRequests] = useState<CheckInRequest[]>([]);\r\n    const [dashboardData, setDashboardData] = useState<ParentDashboardData>({\r\n        recentCheckIns: [],\r\n        pendingCategoryApprovals: [],\r\n        safeZoneActivity: [],\r\n    });\r\n    const [devicePings, setDevicePings] = useState<DevicePingRequest[]>([]);\r\n    const [isParentMode, setIsParentMode] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Load data from storage\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            try {\r\n                const [\r\n                    storedSettings,\r\n                    storedSafeZones,\r\n                    storedCheckInRequests,\r\n                    storedDashboardData,\r\n                    storedDevicePings,\r\n                ] = await Promise.all([\r\n                    AsyncStorage.getItem(STORAGE_KEYS.SETTINGS),\r\n                    AsyncStorage.getItem(STORAGE_KEYS.SAFE_ZONES),\r\n                    AsyncStorage.getItem(STORAGE_KEYS.CHECK_IN_REQUESTS),\r\n                    AsyncStorage.getItem(STORAGE_KEYS.DASHBOARD_DATA),\r\n                    AsyncStorage.getItem(STORAGE_KEYS.DEVICE_PINGS),\r\n                ]);\r\n\r\n                if (storedSettings) {\r\n                    const raw = JSON.parse(storedSettings);\r\n                    if (raw && Array.isArray(raw.emergencyContacts)) {\r\n                        raw.emergencyContacts = raw.emergencyContacts.map((c: any) => ({\r\n                            ...c,\r\n                            canReceiveAlerts: typeof c.canReceiveAlerts === 'boolean' ? c.canReceiveAlerts : false,\r\n                        }));\r\n                    }\r\n                    setSettings(raw);\r\n                }\r\n                if (storedSafeZones) {\r\n                    setSafeZones(JSON.parse(storedSafeZones));\r\n                }\r\n                if (storedCheckInRequests) {\r\n                    setCheckInRequests(JSON.parse(storedCheckInRequests));\r\n                }\r\n                if (storedDashboardData) {\r\n                    setDashboardData(JSON.parse(storedDashboardData));\r\n                }\r\n                if (storedDevicePings) {\r\n                    setDevicePings(JSON.parse(storedDevicePings));\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to load parental data:', error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        loadData();\r\n    }, []);\r\n\r\n    // Save functions\r\n    const saveSettings = async (newSettings: ParentalSettings, toast?: ToastFn) => {\r\n        try {\r\n            const parsed = safeParseWithToast(ParentalSettingsSchema, newSettings, toast);\r\n            if (!parsed) return false;\r\n            await AsyncStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(parsed));\r\n            setSettings(parsed);\r\n            toast?.('Settings saved', 'success');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Failed to save settings:', error);\r\n            toast?.('Failed to save settings', 'error');\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const saveSafeZones = async (newSafeZones: SafeZone[]) => {\r\n        try {\r\n            await AsyncStorage.setItem(STORAGE_KEYS.SAFE_ZONES, JSON.stringify(newSafeZones));\r\n            setSafeZones(newSafeZones);\r\n        } catch (error) {\r\n            console.error('Failed to save safe zones:', error);\r\n        }\r\n    };\r\n\r\n    const saveCheckInRequests = async (newRequests: CheckInRequest[]) => {\r\n        try {\r\n            await AsyncStorage.setItem(STORAGE_KEYS.CHECK_IN_REQUESTS, JSON.stringify(newRequests));\r\n            setCheckInRequests(newRequests);\r\n        } catch (error) {\r\n            console.error('Failed to save check-in requests:', error);\r\n        }\r\n    };\r\n\r\n    const saveDashboardData = async (newData: ParentDashboardData) => {\r\n        try {\r\n            await AsyncStorage.setItem(STORAGE_KEYS.DASHBOARD_DATA, JSON.stringify(newData));\r\n            setDashboardData(newData);\r\n        } catch (error) {\r\n            console.error('Failed to save dashboard data:', error);\r\n        }\r\n    };\r\n\r\n    const saveDevicePings = async (newPings: DevicePingRequest[]) => {\r\n        try {\r\n            await AsyncStorage.setItem(STORAGE_KEYS.DEVICE_PINGS, JSON.stringify(newPings));\r\n            setDevicePings(newPings);\r\n        } catch (error) {\r\n            console.error('Failed to save device pings:', error);\r\n        }\r\n    };\r\n\r\n    // Parent mode authentication\r\n    const authenticateParentMode = async (pin: string): Promise<boolean> => {\r\n        if (!settings.requirePinForParentMode) {\r\n            setIsParentMode(true);\r\n            return true;\r\n        }\r\n\r\n        if (settings.parentPin === pin) {\r\n            setIsParentMode(true);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const exitParentMode = () => {\r\n        setIsParentMode(false);\r\n    };\r\n\r\n    const setParentPin = async (pin: string) => {\r\n        const newSettings = { ...settings, parentPin: pin };\r\n        await saveSettings(newSettings);\r\n    };\r\n\r\n    // Safe zone management\r\n    const addSafeZone = async (safeZone: Omit<SafeZone, 'id' | 'createdAt'>, toast?: ToastFn) => {\r\n        const parsed = safeParseWithToast(SafeZoneCreateSchema, {\r\n            name: safeZone.name,\r\n            center: { latitude: safeZone.latitude, longitude: safeZone.longitude },\r\n            radius: safeZone.radius,\r\n            isActive: safeZone.isActive,\r\n        }, toast);\r\n        if (!parsed) return null;\r\n        const newSafeZone: SafeZone = {\r\n            ...safeZone,\r\n            id: `safe_zone_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            createdAt: Date.now(),\r\n        };\r\n        const updatedSafeZones = [...safeZones, newSafeZone];\r\n        await saveSafeZones(updatedSafeZones);\r\n        toast?.('Safe zone added', 'success');\r\n        return newSafeZone;\r\n    };\r\n\r\n    const updateSafeZone = async (id: string, updates: Partial<SafeZone>) => {\r\n        const updatedSafeZones = safeZones.map(zone =>\r\n            zone.id === id ? { ...zone, ...updates } : zone\r\n        );\r\n        await saveSafeZones(updatedSafeZones);\r\n    };\r\n\r\n    const deleteSafeZone = async (id: string) => {\r\n        const updatedSafeZones = safeZones.filter(zone => zone.id !== id);\r\n        await saveSafeZones(updatedSafeZones);\r\n    };\r\n\r\n    // Check-in request management\r\n    const requestCheckIn = async (message: string, isUrgent: boolean = false, toast?: ToastFn) => {\r\n        const parsed = safeParseWithToast(CheckInRequestCreateSchema, { message, isUrgent }, toast);\r\n        if (!parsed) return null;\r\n        const newRequest: CheckInRequest = {\r\n            id: `check_in_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            childId: 'current_child',\r\n            requestedAt: Date.now(),\r\n            message: parsed.message,\r\n            isUrgent: parsed.isUrgent ?? false,\r\n            status: 'pending',\r\n        };\r\n        const updatedRequests = [...checkInRequests, newRequest];\r\n        await saveCheckInRequests(updatedRequests);\r\n        toast?.('Check-in requested', 'success');\r\n        return newRequest;\r\n    };\r\n\r\n    const completeCheckIn = async (requestId: string, location?: { latitude: number; longitude: number; placeName?: string }) => {\r\n        const updatedRequests = checkInRequests.map(request =>\r\n            request.id === requestId\r\n                ? { ...request, status: 'completed' as const, completedAt: Date.now(), location }\r\n                : request\r\n        );\r\n        await saveCheckInRequests(updatedRequests);\r\n    };\r\n\r\n    // Emergency contact management\r\n    const addEmergencyContact = async (contact: Omit<EmergencyContact, 'id'>, toast?: ToastFn) => {\r\n        const parsed = safeParseWithToast(EmergencyContactCreateSchema, contact, toast);\r\n        if (!parsed) return null;\r\n        const newContact: EmergencyContact = {\r\n            ...contact,\r\n            id: `contact_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        };\r\n        const updatedContacts = [...settings.emergencyContacts, newContact];\r\n        const newSettings = { ...settings, emergencyContacts: updatedContacts };\r\n        await saveSettings(newSettings, toast);\r\n        toast?.('Emergency contact added', 'success');\r\n        return newContact;\r\n    };\r\n\r\n    const updateEmergencyContact = async (id: string, updates: Partial<EmergencyContact>) => {\r\n        const updatedContacts = settings.emergencyContacts.map(contact =>\r\n            contact.id === id ? { ...contact, ...updates } : contact\r\n        );\r\n        const newSettings = { ...settings, emergencyContacts: updatedContacts };\r\n        await saveSettings(newSettings);\r\n    };\r\n\r\n    const deleteEmergencyContact = async (id: string) => {\r\n        const updatedContacts = settings.emergencyContacts.filter(contact => contact.id !== id);\r\n        const newSettings = { ...settings, emergencyContacts: updatedContacts };\r\n        await saveSettings(newSettings);\r\n    };\r\n\r\n    // Device ping management\r\n    const sendDevicePing = async (type: DevicePingRequest['type'], message?: string) => {\r\n        const newPing: DevicePingRequest = {\r\n            id: `ping_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            type,\r\n            message,\r\n            requestedAt: Date.now(),\r\n            status: 'pending',\r\n        };\r\n\r\n        const updatedPings = [...devicePings, newPing];\r\n        await saveDevicePings(updatedPings);\r\n        return newPing;\r\n    };\r\n\r\n    const acknowledgePing = async (pingId: string, location?: { latitude: number; longitude: number }) => {\r\n        const updatedPings = devicePings.map(ping =>\r\n            ping.id === pingId\r\n                ? {\r\n                    ...ping,\r\n                    status: 'acknowledged' as const,\r\n                    response: {\r\n                        timestamp: Date.now(),\r\n                        location,\r\n                    },\r\n                }\r\n                : ping\r\n        );\r\n        await saveDevicePings(updatedPings);\r\n    };\r\n\r\n    // Dashboard data management\r\n    const addCheckInToDashboard = (checkIn: ParentDashboardData['recentCheckIns'][0]) => {\r\n        const updatedData = {\r\n            ...dashboardData,\r\n            recentCheckIns: [checkIn, ...dashboardData.recentCheckIns].slice(0, 10), // Keep last 10\r\n        };\r\n        saveDashboardData(updatedData);\r\n    };\r\n\r\n    const updateLastKnownLocation = (location: NonNullable<ParentDashboardData['lastKnownLocation']>) => {\r\n        const updatedData = {\r\n            ...dashboardData,\r\n            lastKnownLocation: location,\r\n        };\r\n        saveDashboardData(updatedData);\r\n    };\r\n\r\n    return {\r\n        // State\r\n        settings,\r\n        safeZones,\r\n        checkInRequests,\r\n        dashboardData,\r\n        devicePings,\r\n        isParentMode,\r\n        isLoading,\r\n\r\n        // Authentication\r\n        authenticateParentMode,\r\n        exitParentMode,\r\n        setParentPin,\r\n\r\n        // Settings\r\n        saveSettings,\r\n\r\n        // Safe zones\r\n        addSafeZone,\r\n        updateSafeZone,\r\n        deleteSafeZone,\r\n\r\n        // Check-ins\r\n        requestCheckIn,\r\n        completeCheckIn,\r\n\r\n        // Emergency contacts\r\n        addEmergencyContact,\r\n        updateEmergencyContact,\r\n        deleteEmergencyContact,\r\n\r\n        // Device pings\r\n        sendDevicePing,\r\n        acknowledgePing,\r\n\r\n        // Dashboard\r\n        addCheckInToDashboard,\r\n        updateLastKnownLocation,\r\n        saveDashboardData,\r\n    };\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\types\\parental.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\utils\\errorHandling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\utils\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\utils\\locationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\utils\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\utils\\notification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\modules\\safety\\utils\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\services\\routeService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { sampleRoutes } from '@/mocks/transit';\r\nimport { Route, TravelMode } from '@/types/navigation';\r\nimport { Place, RouteOptions } from '@/types/navigation';\r\n\r\n// Simple metrics collector (dev/test). Counts network-like fetches actually executed.\r\nlet fetchCount = 0;\r\nexport function __resetRouteServiceMetrics() { fetchCount = 0; }\r\nexport function getRouteServiceMetrics() { return { fetchCount }; }\r\n\r\nexport type FetchRoutesParams = {\r\n    origin: Place;\r\n    destination: Place;\r\n    mode: TravelMode;\r\n    options: RouteOptions;\r\n};\r\n\r\n// Simulated latency to mimic network; adjustable for tests.\r\nconst DEFAULT_LATENCY_MS = 120;\r\n\r\nexport async function fetchRoutes({ origin, destination, mode, options }: FetchRoutesParams): Promise<Route[]> {\r\n    // Simple artificial delay\r\n    await new Promise(res => setTimeout(res, DEFAULT_LATENCY_MS));\r\n    fetchCount += 1;\r\n\r\n    const base = sampleRoutes;\r\n\r\n    if (mode === 'walking') {\r\n        return base.map(r => ({\r\n            ...r,\r\n            id: `walk_${r.id}`,\r\n            steps: [{ id: 'walk_step', type: 'walk', from: origin.name, to: destination.name, duration: Math.ceil(r.totalDuration * 1.5) }],\r\n            totalDuration: Math.ceil(r.totalDuration * 1.5),\r\n        }));\r\n    }\r\n    if (mode === 'biking') {\r\n        return base.map(r => ({\r\n            ...r,\r\n            id: `bike_${r.id}`,\r\n            steps: [{ id: 'bike_step', type: 'bike', from: origin.name, to: destination.name, duration: Math.ceil(r.totalDuration * 0.7) }],\r\n            totalDuration: Math.ceil(r.totalDuration * 0.7),\r\n        }));\r\n    }\r\n    if (mode === 'driving') {\r\n        return base.map(r => ({\r\n            ...r,\r\n            id: `drive_${r.id}`,\r\n            steps: [{ id: 'drive_step', type: 'car', from: origin.name, to: destination.name, duration: Math.ceil(r.totalDuration * 0.4) }],\r\n            totalDuration: Math.ceil(r.totalDuration * 0.4),\r\n        }));\r\n    }\r\n\r\n    return base;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\src\\shared\\navigation\\nav.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1142,1145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1142,1145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1239,1242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1239,1242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1281,1284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1281,1284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1530,1533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1530,1533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1630,1633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1630,1633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1675,1678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1675,1678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1754,1757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1754,1757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2050,2053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2050,2053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2347,2350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2347,2350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2444,2447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2444,2447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2486,2489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2486,2489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { router } from \"expo-router\";\r\n\r\n// Centralized navigation helpers to keep call sites clean.\r\n// Accepts either a path string (e.g., \"/search\") or an object with pathname + optional params.\r\nexport type RouteMap = {\r\n    \"/\": void;\r\n    \"/search\": { category?: string } | void;\r\n    \"/map\": void;\r\n    \"/transit\": void;\r\n    \"/achievements\": void;\r\n    \"/settings\": void;\r\n    \"/onboarding\": void;\r\n    \"/(tabs)\": void;\r\n    // Dynamic route example\r\n    \"/route/:id\": { id: string };\r\n};\r\n\r\ntype PathFrom<K extends keyof RouteMap> = K;\r\ntype ExtractParams<T> = Extract<T, object>;\r\ntype ParamsFor<K extends keyof RouteMap> = [ExtractParams<RouteMap[K]>] extends [never]\r\n    ? undefined\r\n    : ExtractParams<RouteMap[K]> | undefined;\r\n\r\nexport type NavTarget = string | { pathname: string; params?: Record<string, string | number | boolean | undefined> };\r\n\r\nexport const nav = {\r\n    // Typed overloads\r\n    push<K extends keyof RouteMap>(path: PathFrom<K>, params?: ParamsFor<K>) {\r\n        if (params && path === \"/route/:id\") {\r\n            const p = params as { id: string };\r\n            return router.push(`/route/${p.id}` as any);\r\n        }\r\n        if (params) return router.push({ pathname: path as string, params } as any);\r\n        return router.push(path as any);\r\n    },\r\n    replace<K extends keyof RouteMap>(path: PathFrom<K>, params?: ParamsFor<K>) {\r\n        if (params && path === \"/route/:id\") {\r\n            const p = params as { id: string };\r\n            return router.replace(`/route/${p.id}` as any);\r\n        }\r\n        if (params) return router.replace({ pathname: path as string, params } as any);\r\n        return router.replace(path as any);\r\n    },\r\n    replaceTabs() {\r\n        return router.replace(\"/(tabs)\" as any);\r\n    },\r\n    toTab(tab: \"index\" | \"map\" | \"transit\" | \"achievements\" | \"settings\") {\r\n        // In Expo Router, group segments (e.g., (tabs)) are omitted from the URL.\r\n        // Navigating to \"/map\" etc. takes you to that tab route.\r\n        return router.push((`/${tab}` as unknown) as any);\r\n    },\r\n    back() {\r\n        return router.back();\r\n    },\r\n    href<K extends keyof RouteMap>(path: PathFrom<K>, params?: ParamsFor<K>) {\r\n        if (params && path === \"/route/:id\") {\r\n            const p = params as { id: string };\r\n            return (`/route/${p.id}` as unknown) as any;\r\n        }\r\n        if (params) return ({ pathname: path as string, params } as unknown) as any;\r\n        return (path as unknown) as any;\r\n    },\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\stores\\categoryStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4275,4278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4275,4278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4894,4897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4894,4897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":254,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import createContextHook from '@nkzw/create-context-hook';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useState, useEffect } from 'react';\n\r\nimport { CategoryCreateSchema, CategoryUpdateSchema } from '@/core/validation';\r\nimport { CustomCategory, CategoryManagementSettings, PlaceCategory } from '@/types/navigation';\r\n\r\nconst DEFAULT_CATEGORIES: CustomCategory[] = [\r\n  {\r\n    id: 'home',\r\n    name: 'Home',\r\n    icon: 'Home',\r\n    color: '#007AFF',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'school',\r\n    name: 'School',\r\n    icon: 'GraduationCap',\r\n    color: '#FF9500',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'park',\r\n    name: 'Park',\r\n    icon: 'Trees',\r\n    color: '#34C759',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'library',\r\n    name: 'Library',\r\n    icon: 'BookOpen',\r\n    color: '#9C27B0',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'store',\r\n    name: 'Store',\r\n    icon: 'ShoppingBag',\r\n    color: '#4285F4',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'restaurant',\r\n    name: 'Food',\r\n    icon: 'Pizza',\r\n    color: '#FF6B6B',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'friend',\r\n    name: 'Friends',\r\n    icon: 'Users',\r\n    color: '#00BCD4',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n  {\r\n    id: 'family',\r\n    name: 'Family',\r\n    icon: 'Heart',\r\n    color: '#FF4081',\r\n    isDefault: true,\r\n    createdBy: 'parent',\r\n    isApproved: true,\r\n    createdAt: Date.now(),\r\n  },\r\n];\r\n\r\nconst DEFAULT_SETTINGS: CategoryManagementSettings = {\r\n  allowChildToCreateCategories: true,\r\n  requireParentApproval: true,\r\n  maxCustomCategories: 20,\r\n};\r\n\r\nconst STORAGE_KEYS = {\r\n  CATEGORIES: 'kidmap_custom_categories',\r\n  SETTINGS: 'kidmap_category_settings',\r\n};\r\n\r\nexport const [CategoryProvider, useCategoryStoreInternal] = createContextHook(() => {\r\n  const [categories, setCategories] = useState<CustomCategory[]>(DEFAULT_CATEGORIES);\r\n  const [settings, setSettings] = useState<CategoryManagementSettings>(DEFAULT_SETTINGS);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Load data from storage\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        const [storedCategories, storedSettings] = await Promise.all([\r\n          AsyncStorage.getItem(STORAGE_KEYS.CATEGORIES),\r\n          AsyncStorage.getItem(STORAGE_KEYS.SETTINGS),\r\n        ]);\r\n\r\n        if (storedCategories) {\r\n          const parsedCategories = JSON.parse(storedCategories);\r\n          setCategories(parsedCategories);\r\n        }\r\n\r\n        if (storedSettings) {\r\n          const parsedSettings = JSON.parse(storedSettings);\r\n          setSettings(parsedSettings);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load category data:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // Save categories to storage\r\n  const saveCategories = async (newCategories: CustomCategory[]) => {\r\n    try {\r\n      await AsyncStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(newCategories));\r\n      setCategories(newCategories);\r\n    } catch (error) {\r\n      console.error('Failed to save categories:', error);\r\n    }\r\n  };\r\n\r\n  // Save settings to storage\r\n  const saveSettings = async (newSettings: CategoryManagementSettings) => {\r\n    try {\r\n      await AsyncStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(newSettings));\r\n      setSettings(newSettings);\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n    }\r\n  };\r\n\r\n  // Add a new category\r\n  const addCategory = async (category: Omit<CustomCategory, 'id' | 'createdAt'>) => {\r\n    const parsed = CategoryCreateSchema.safeParse(category);\r\n    if (!parsed.success) {\r\n      throw new Error(parsed.error.issues.map((i: any) => i.message).join('; '));\r\n    }\r\n    const newCategory: CustomCategory = {\r\n      ...parsed.data,\r\n      id: `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      createdAt: Date.now(),\r\n    };\r\n    const updatedCategories = [...categories, newCategory];\r\n    await saveCategories(updatedCategories);\r\n    return newCategory;\r\n  };\r\n\r\n  // Update an existing category\r\n  const updateCategory = async (id: string, updates: Partial<CustomCategory>) => {\r\n    const parsed = CategoryUpdateSchema.safeParse(updates);\r\n    if (!parsed.success) {\r\n      throw new Error(parsed.error.issues.map((i: any) => i.message).join('; '));\r\n    }\r\n    const updatedCategories = categories.map(cat =>\r\n      cat.id === id ? { ...cat, ...parsed.data } : cat\r\n    );\r\n    await saveCategories(updatedCategories);\r\n  };\r\n\r\n  // Delete a category (only custom ones)\r\n  const deleteCategory = async (id: string) => {\r\n    const category = categories.find(cat => cat.id === id);\r\n    if (category && !category.isDefault) {\r\n      const updatedCategories = categories.filter(cat => cat.id !== id);\r\n      await saveCategories(updatedCategories);\r\n    }\r\n  };\r\n\r\n  // Approve a category (parent action)\r\n  const approveCategory = async (id: string) => {\r\n    await updateCategory(id, { isApproved: true });\r\n  };\r\n\r\n  // Get approved categories only\r\n  const getApprovedCategories = (): CustomCategory[] => {\r\n    return categories.filter(cat => cat.isApproved);\r\n  };\r\n\r\n  // Get pending categories (waiting for approval)\r\n  const getPendingCategories = (): CustomCategory[] => {\r\n    return categories.filter(cat => !cat.isApproved && cat.createdBy === 'child');\r\n  };\r\n\r\n  // Convert custom category to place category for compatibility\r\n  const getPlaceCategory = (customCategoryId: string): PlaceCategory => {\r\n    const category = categories.find(cat => cat.id === customCategoryId);\r\n    if (category && category.isDefault) {\r\n      return customCategoryId as PlaceCategory;\r\n    }\r\n    return 'other';\r\n  };\r\n\r\n  // Get available icons for category creation\r\n  const getAvailableIcons = () => [\r\n    'Home', 'GraduationCap', 'Trees', 'BookOpen', 'ShoppingBag', 'Pizza',\r\n    'Users', 'Heart', 'Car', 'Bike', 'Bus', 'Train', 'Plane', 'Hospital',\r\n    'Church', 'Building', 'Gamepad2', 'Music', 'Camera', 'Gift',\r\n    'Coffee', 'IceCream', 'Candy', 'Apple', 'Dumbbell', 'Palette',\r\n    'Star', 'Sun', 'Moon', 'Cloud', 'Umbrella', 'Flower'\r\n  ];\r\n\r\n  // Get available colors for category creation\r\n  const getAvailableColors = () => [\r\n    '#007AFF', '#FF9500', '#34C759', '#9C27B0', '#4285F4', '#FF6B6B',\r\n    '#00BCD4', '#FF4081', '#FFC107', '#795548', '#607D8B', '#E91E63',\r\n    '#3F51B5', '#009688', '#8BC34A', '#CDDC39', '#FFEB3B', '#FF5722',\r\n    '#9E9E9E', '#673AB7', '#2196F3', '#03DAC6', '#FF1744', '#00E676'\r\n  ];\r\n\r\n  return {\r\n    categories,\r\n    settings,\r\n    isLoading,\r\n    addCategory,\r\n    updateCategory,\r\n    deleteCategory,\r\n    approveCategory,\r\n    getApprovedCategories,\r\n    getPendingCategories,\r\n    getPlaceCategory,\r\n    getAvailableIcons,\r\n    getAvailableColors,\r\n    saveSettings,\r\n  };\r\n});\r\n\r\n// Safe wrapper that provides fallback values\r\nexport const useCategoryStore = () => {\r\n  try {\r\n    return useCategoryStoreInternal();\r\n  } catch (error) {\r\n    console.warn('CategoryStore not available, using fallback');\r\n    // Return fallback values\r\n    return {\r\n      categories: DEFAULT_CATEGORIES,\r\n      settings: DEFAULT_SETTINGS,\r\n      isLoading: false,\r\n      addCategory: async () => DEFAULT_CATEGORIES[0],\r\n      updateCategory: async () => { },\r\n      deleteCategory: async () => { },\r\n      approveCategory: async () => { },\r\n      getApprovedCategories: () => DEFAULT_CATEGORIES,\r\n      getPendingCategories: () => [],\r\n      getPlaceCategory: () => 'other' as const,\r\n      getAvailableIcons: () => ['Home', 'GraduationCap', 'Trees'],\r\n      getAvailableColors: () => ['#007AFF', '#FF9500', '#34C759'],\r\n      saveSettings: async () => { },\r\n    };\r\n  }\r\n};\r\n\r\nexport const useCategoryManagement = () => {\r\n  const store = useCategoryStore();\r\n\r\n  return {\r\n    ...store,\r\n    canCreateCategory: (createdBy: 'parent' | 'child') => {\r\n      if (createdBy === 'parent') return true;\r\n      if (!store.settings.allowChildToCreateCategories) return false;\r\n\r\n      const customCategoriesCount = store.categories.filter(cat => !cat.isDefault).length;\r\n      return customCategoriesCount < store.settings.maxCustomCategories;\r\n    },\r\n    needsApproval: (createdBy: 'parent' | 'child') => {\r\n      return createdBy === 'child' && store.settings.requireParentApproval;\r\n    },\r\n  };\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\stores\\gamificationStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'from' is defined but never used. Allowed unused args must match /^_/u.","line":112,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'to' is defined but never used. Allowed unused args must match /^_/u.","line":112,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\r\nimport { Achievement, UserStats, SafetyContact, TripJournal } from \"@/types/gamification\";\r\n\r\ntype GamificationState = {\r\n  userStats: UserStats;\r\n  achievements: Achievement[];\r\n  safetyContacts: SafetyContact[];\r\n  tripJournal: TripJournal[];\r\n  \r\n  // Actions\r\n  addPoints: (points: number) => void;\r\n  unlockAchievement: (achievementId: string) => void;\r\n  completeTrip: (from: string, to: string) => void;\r\n  addSafetyContact: (contact: Omit<SafetyContact, 'id'>) => void;\r\n  addTripEntry: (entry: Omit<TripJournal, 'id'>) => void;\r\n  updateStats: (updates: Partial<UserStats>) => void;\r\n};\r\n\r\nconst initialAchievements: Achievement[] = [\r\n  {\r\n    id: \"first-trip\",\r\n    title: \"First Adventure!\",\r\n    description: \"Complete your first trip using KidMap\",\r\n    icon: \"≡ƒÄë\",\r\n    points: 50,\r\n    unlocked: false\r\n  },\r\n  {\r\n    id: \"subway-explorer\",\r\n    title: \"Subway Explorer\",\r\n    description: \"Use the subway 5 times\",\r\n    icon: \"≡ƒÜç\",\r\n    points: 100,\r\n    unlocked: false\r\n  },\r\n  {\r\n    id: \"neighborhood-navigator\",\r\n    title: \"Neighborhood Navigator\", \r\n    description: \"Visit 10 different places\",\r\n    icon: \"≡ƒù║∩╕Å\",\r\n    points: 150,\r\n    unlocked: false\r\n  },\r\n  {\r\n    id: \"safety-star\",\r\n    title: \"Safety Star\",\r\n    description: \"Add emergency contacts\",\r\n    icon: \"Γ¡É\",\r\n    points: 75,\r\n    unlocked: false\r\n  },\r\n  {\r\n    id: \"photo-journalist\",\r\n    title: \"Photo Journalist\",\r\n    description: \"Take photos during 3 trips\",\r\n    icon: \"≡ƒô╕\",\r\n    points: 80,\r\n    unlocked: false\r\n  }\r\n];\r\n\r\nexport const useGamificationStore = create<GamificationState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      userStats: {\r\n        totalTrips: 0,\r\n        totalPoints: 0,\r\n        placesVisited: 0,\r\n        favoriteTransitMode: \"walk\",\r\n        streakDays: 0,\r\n        level: 1\r\n      },\r\n      achievements: initialAchievements,\r\n      safetyContacts: [],\r\n      tripJournal: [],\r\n\r\n      addPoints: (points) => set((state) => {\r\n        const newPoints = state.userStats.totalPoints + points;\r\n        const newLevel = Math.floor(newPoints / 200) + 1;\r\n        \r\n        return {\r\n          userStats: {\r\n            ...state.userStats,\r\n            totalPoints: newPoints,\r\n            level: newLevel\r\n          }\r\n        };\r\n      }),\r\n\r\n      unlockAchievement: (achievementId) => set((state) => {\r\n        const achievement = state.achievements.find(a => a.id === achievementId);\r\n        if (!achievement || achievement.unlocked) return state;\r\n\r\n        const updatedAchievements = state.achievements.map(a =>\r\n          a.id === achievementId \r\n            ? { ...a, unlocked: true, unlockedAt: new Date() }\r\n            : a\r\n        );\r\n\r\n        return {\r\n          achievements: updatedAchievements,\r\n          userStats: {\r\n            ...state.userStats,\r\n            totalPoints: state.userStats.totalPoints + achievement.points\r\n          }\r\n        };\r\n      }),\r\n\r\n      completeTrip: (from, to) => set((state) => {\r\n        const newStats = {\r\n          ...state.userStats,\r\n          totalTrips: state.userStats.totalTrips + 1,\r\n          placesVisited: state.userStats.placesVisited + 1\r\n        };\r\n\r\n        // Check for achievement unlocks\r\n        const { unlockAchievement } = get();\r\n        if (newStats.totalTrips === 1) {\r\n          unlockAchievement(\"first-trip\");\r\n        }\r\n        if (newStats.placesVisited >= 10) {\r\n          unlockAchievement(\"neighborhood-navigator\");\r\n        }\r\n\r\n        return { userStats: newStats };\r\n      }),\r\n\r\n      addSafetyContact: (contact) => set((state) => {\r\n        const newContact = {\r\n          ...contact,\r\n          id: Date.now().toString()\r\n        };\r\n\r\n        const { unlockAchievement } = get();\r\n        if (state.safetyContacts.length === 0) {\r\n          unlockAchievement(\"safety-star\");\r\n        }\r\n\r\n        return {\r\n          safetyContacts: [...state.safetyContacts, newContact]\r\n        };\r\n      }),\r\n\r\n      addTripEntry: (entry) => set((state) => {\r\n        const newEntry = {\r\n          ...entry,\r\n          id: Date.now().toString()\r\n        };\r\n\r\n        const entriesWithPhotos = state.tripJournal.filter(e => e.photos.length > 0).length;\r\n        const { unlockAchievement } = get();\r\n        if (entry.photos.length > 0 && entriesWithPhotos >= 2) {\r\n          unlockAchievement(\"photo-journalist\");\r\n        }\r\n\r\n        return {\r\n          tripJournal: [...state.tripJournal, newEntry]\r\n        };\r\n      }),\r\n\r\n      updateStats: (updates) => set((state) => ({\r\n        userStats: { ...state.userStats, ...updates }\r\n      }))\r\n    }),\r\n    {\r\n      name: \"gamification-storage\",\r\n      storage: createJSONStorage(() => AsyncStorage)\r\n    }\r\n  )\r\n);\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\stores\\navigationStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sampleRoutes' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2275,2278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2275,2278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3831,3834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3831,3834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":140,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":143,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3867,3870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3867,3870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from \"zustand\";\n\r\nimport { PhotoCheckInSchema } from '@/core/validation';\r\nimport { favoriteLocations } from \"@/mocks/places\";\r\nimport { sampleRoutes } from \"@/mocks/transit\";\r\nimport { fetchRoutes } from '@/services/routeService';\r\nimport { Place, Route, PhotoCheckIn, TravelMode, RouteOptions } from \"@/types/navigation\";\r\nimport { invariant } from '@/utils/invariant';\r\nimport { verifyLocationProximity } from \"@/utils/locationUtils\";\r\nimport { savePersistedState, loadPersistedState } from '@/utils/persistence';\r\n\r\ntype AccessibilitySettings = {\r\n  largeText: boolean;\r\n  highContrast: boolean;\r\n  voiceDescriptions: boolean;\r\n  simplifiedMode: boolean;\r\n};\r\n\r\ntype WeatherInfo = {\r\n  temperature: number;\r\n  condition: string;\r\n  humidity: number;\r\n};\r\n\r\ntype NavigationState = {\r\n  favorites: Place[];\r\n  recentSearches: Place[];\r\n  origin: Place | null;\r\n  destination: Place | null;\r\n  selectedRoute: Route | null;\r\n  searchQuery: string;\r\n  accessibilitySettings: AccessibilitySettings;\r\n  photoCheckIns: PhotoCheckIn[];\r\n  weatherInfo: WeatherInfo | null;\r\n  selectedTravelMode: TravelMode;\r\n  routeOptions: RouteOptions;\r\n  routesLoading: boolean;\r\n  isHydrated: boolean;\r\n  hydrate: () => Promise<void>;\r\n\r\n  // Actions\r\n  setOrigin: (place: Place | null) => void;\r\n  setDestination: (place: Place | null) => void;\r\n  addToFavorites: (place: Place) => void;\r\n  removeFromFavorites: (placeId: string) => void;\r\n  addToRecentSearches: (place: Place) => void;\r\n  clearRecentSearches: () => void;\r\n  setSearchQuery: (query: string) => void;\r\n  findRoutes: () => void;\r\n  findRoutesAsync: () => Promise<void>;\r\n  selectRoute: (route: Route) => void;\r\n  clearRoute: () => void;\r\n  updateAccessibilitySettings: (settings: Partial<AccessibilitySettings>) => void;\r\n  addPhotoCheckIn: (checkIn: Omit<PhotoCheckIn, 'id'>) => void;\r\n  setWeatherInfo: (weather: WeatherInfo) => void;\r\n  setTravelMode: (mode: TravelMode) => void;\r\n  updateRouteOptions: (options: Partial<RouteOptions>) => void;\r\n  addLocationVerifiedPhotoCheckIn: (checkIn: Omit<PhotoCheckIn, 'id'>, currentLocation: { latitude: number; longitude: number }, placeLocation: { latitude: number; longitude: number }) => { isWithinRadius: boolean; distance: number };\r\n};\r\n\r\nlet persistTimer: any = null;\r\nconst PERSIST_DEBOUNCE_MS = 300;\r\n\r\nfunction schedulePersist(get: () => NavigationState) {\r\n  if (persistTimer) clearTimeout(persistTimer);\r\n  persistTimer = setTimeout(() => {\r\n    const { favorites, recentSearches, accessibilitySettings, photoCheckIns, selectedTravelMode, routeOptions } = get();\r\n    savePersistedState({ favorites, recentSearches, accessibilitySettings, photoCheckIns, selectedTravelMode, routeOptions });\r\n  }, PERSIST_DEBOUNCE_MS);\r\n}\r\n\r\nexport const useNavigationStore = create<NavigationState>((set, get) => ({\r\n  favorites: favoriteLocations,\r\n  recentSearches: [],\r\n  origin: null,\r\n  destination: null,\r\n  selectedRoute: null,\r\n  searchQuery: \"\",\r\n  accessibilitySettings: {\r\n    largeText: false,\r\n    highContrast: false,\r\n    voiceDescriptions: false,\r\n    simplifiedMode: false,\r\n  },\r\n  photoCheckIns: [],\r\n  weatherInfo: null,\r\n  selectedTravelMode: \"transit\",\r\n  routeOptions: {\r\n    travelMode: \"transit\",\r\n    avoidTolls: false,\r\n    avoidHighways: false,\r\n    accessibilityMode: false,\r\n  },\r\n  routesLoading: false,\r\n  isHydrated: false,\r\n  hydrate: async () => {\r\n    try {\r\n      const data = await loadPersistedState();\r\n      if (data) {\r\n        set({\r\n          favorites: data.favorites ?? [],\r\n          recentSearches: data.recentSearches ?? [],\r\n          accessibilitySettings: data.accessibilitySettings ?? get().accessibilitySettings,\r\n          photoCheckIns: data.photoCheckIns ?? [],\r\n          selectedTravelMode: (['transit', 'walking', 'biking', 'driving'] as const).includes((data as any).selectedTravelMode) ? (data as any).selectedTravelMode as TravelMode : 'transit',\r\n          routeOptions: data.routeOptions ?? get().routeOptions,\r\n        });\r\n      }\r\n    } finally {\r\n      set({ isHydrated: true });\r\n    }\r\n  },\r\n\r\n  setOrigin: (place) => { set({ origin: place }); schedulePersist(get); },\r\n\r\n  setDestination: (place) => { set({ destination: place }); schedulePersist(get); },\r\n\r\n  addToFavorites: (place) => set((state) => {\r\n    // Check if already in favorites\r\n    if (state.favorites.some(fav => fav.id === place.id)) {\r\n      return state;\r\n    }\r\n\r\n    const updatedPlace = { ...place, isFavorite: true };\r\n    const next = { favorites: [...state.favorites, updatedPlace] } as Partial<NavigationState>;\r\n    schedulePersist(() => ({ ...state, ...next } as NavigationState));\r\n    return next;\r\n  }),\r\n\r\n  removeFromFavorites: (placeId) => set((state) => {\r\n    const next = { favorites: state.favorites.filter(place => place.id !== placeId) } as Partial<NavigationState>;\r\n    schedulePersist(() => ({ ...state, ...next } as NavigationState));\r\n    return next;\r\n  }),\r\n\r\n  addToRecentSearches: (place) => set((state) => {\r\n    // Remove if already exists to avoid duplicates\r\n    const filteredSearches = state.recentSearches.filter(p => p.id !== place.id);\r\n\r\n    // Add to beginning of array, limit to 5 recent searches\r\n    const next = {\r\n      recentSearches: [place, ...filteredSearches].slice(0, 5)\r\n    } as Partial<NavigationState>;\r\n    schedulePersist(() => ({ ...state, ...next } as NavigationState));\r\n    return next;\r\n  }),\r\n\r\n  clearRecentSearches: () => { set({ recentSearches: [] }); schedulePersist(get); },\r\n\r\n  setSearchQuery: (query) => set({ searchQuery: query }),\r\n\r\n  findRoutes: () => { get().findRoutesAsync(); },\r\n\r\n  findRoutesAsync: async () => {\r\n    const { origin, destination, selectedTravelMode, routeOptions } = get();\r\n    if (!origin || !destination) {\r\n      set({ selectedRoute: null, routesLoading: false });\r\n      return;\r\n    }\r\n    set({ routesLoading: true });\r\n    try {\r\n      const routes = await fetchRoutes({ origin, destination, mode: selectedTravelMode, options: routeOptions });\r\n      invariant(origin.name.length > 0 && destination.name.length > 0, 'Origin or destination missing name');\r\n      set({ selectedRoute: routes[0] || null });\r\n    } catch (e) {\r\n      console.warn('Failed to fetch routes', e);\r\n      set({ selectedRoute: null });\r\n    } finally {\r\n      set({ routesLoading: false });\r\n    }\r\n  },\r\n\r\n  selectRoute: (route) => set({ selectedRoute: route }),\r\n\r\n  clearRoute: () => set({\r\n    origin: null,\r\n    destination: null,\r\n    selectedRoute: null,\r\n    searchQuery: \"\"\r\n  }),\r\n\r\n  updateAccessibilitySettings: (settings) => set((state) => {\r\n    const next = { accessibilitySettings: { ...state.accessibilitySettings, ...settings } } as Partial<NavigationState>;\r\n    schedulePersist(() => ({ ...state, ...next } as NavigationState));\r\n    return next;\r\n  }),\r\n\r\n  addPhotoCheckIn: (checkIn) => {\r\n    const parsed = PhotoCheckInSchema.safeParse(checkIn);\r\n    if (!parsed.success) {\r\n      console.warn('Invalid photo check-in:', parsed.error.issues);\r\n      return;\r\n    }\r\n    set((state) => {\r\n      const next = { photoCheckIns: [...state.photoCheckIns, { ...parsed.data, id: Date.now().toString() }] } as Partial<NavigationState>;\r\n      schedulePersist(() => ({ ...state, ...next } as NavigationState));\r\n      return next;\r\n    });\r\n  },\r\n\r\n  setWeatherInfo: (weather) => set({ weatherInfo: weather }),\r\n\r\n  setTravelMode: (mode) => {\r\n    set({ selectedTravelMode: mode });\r\n    // Automatically update route options and refind routes\r\n    const { findRoutes } = get();\r\n    set((state) => ({\r\n      routeOptions: { ...state.routeOptions, travelMode: mode }\r\n    }));\r\n    findRoutes();\r\n    schedulePersist(get);\r\n  },\r\n\r\n  updateRouteOptions: (options) => {\r\n    set((state) => ({\r\n      routeOptions: { ...state.routeOptions, ...options }\r\n    }));\r\n    // Refind routes with new options\r\n    const { findRoutes } = get();\r\n    findRoutes();\r\n    schedulePersist(get);\r\n  },\r\n\r\n  addLocationVerifiedPhotoCheckIn: (checkIn, currentLocation, placeLocation) => {\r\n    const verification = verifyLocationProximity(\r\n      currentLocation.latitude,\r\n      currentLocation.longitude,\r\n      placeLocation.latitude,\r\n      placeLocation.longitude,\r\n      100 // 100 meter radius\r\n    );\r\n\r\n    const verifiedCheckIn = {\r\n      ...checkIn,\r\n      id: Date.now().toString(),\r\n      location: currentLocation,\r\n      isLocationVerified: verification.isWithinRadius,\r\n      distanceFromPlace: verification.distance,\r\n    };\r\n\r\n    set((state) => {\r\n      const next = { photoCheckIns: [...state.photoCheckIns, verifiedCheckIn] } as Partial<NavigationState>;\r\n      schedulePersist(() => ({ ...state, ...next } as NavigationState));\r\n      return next;\r\n    });\r\n\r\n    return verification;\r\n  }\r\n}));\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\stores\\parentalStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\stores\\regionStore.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`@/config/regions/seattle` import should occur before import of `@/config/regions/tokyo`","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":58,"fix":{"range":[722,901],"text":"import { seattleConfig } from \"@/config/regions/seattle\";\r\nimport { tokyoConfig } from \"@/config/regions/tokyo\";\r\nimport { washingtonConfig } from \"@/config/regions/washington\";\r\n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\r\nimport { atlantaConfig } from \"@/config/regions/atlanta\";\r\nimport { bostonConfig } from \"@/config/regions/boston\";\r\nimport { chicagoConfig } from \"@/config/regions/chicago\";\r\nimport { londonConfig } from \"@/config/regions/london\";\r\nimport { losAngelesConfig } from \"@/config/regions/losAngeles\";\r\nimport { miamiConfig } from \"@/config/regions/miami\";\r\nimport { newYorkConfig } from \"@/config/regions/newYork\";\r\nimport { philadelphiaConfig } from \"@/config/regions/philadelphia\";\r\nimport { sanFranciscoConfig } from \"@/config/regions/sanFrancisco\";\r\nimport { tokyoConfig } from \"@/config/regions/tokyo\";\r\nimport { washingtonConfig } from \"@/config/regions/washington\";\r\nimport { seattleConfig } from \"@/config/regions/seattle\";\r\nimport { RegionConfig, UserRegionPreferences } from \"@/types/region\";\r\n\r\ntype RegionState = {\r\n  availableRegions: RegionConfig[];\r\n  currentRegion: RegionConfig;\r\n  userPreferences: UserRegionPreferences;\r\n  isConfigured: boolean;\r\n  isHydrated: boolean;\r\n  \r\n  // Actions\r\n  setRegion: (regionId: string) => void;\r\n  updatePreferences: (preferences: Partial<UserRegionPreferences>) => void;\r\n  completeOnboarding: () => void;\r\n  addCustomRegion: (region: RegionConfig) => void;\r\n  removeRegion: (regionId: string) => void;\r\n  updateRegionTransitData: (regionId: string, transitData: Partial<RegionConfig>) => void;\r\n  getCurrentTransitSystems: () => RegionConfig['transitSystems'];\r\n  getEmergencyNumber: () => string;\r\n  getSafetyTips: () => string[];\r\n  getFunFacts: () => string[];\r\n  getRegionsByCountry: (country: string) => RegionConfig[];\r\n  searchRegions: (query: string) => RegionConfig[];\r\n  setHydrated: () => void;\r\n};\r\n\r\nconst defaultPreferences: UserRegionPreferences = {\r\n  selectedRegion: \"nyc\",\r\n  preferredLanguage: \"en\",\r\n  preferredUnits: \"imperial\",\r\n  accessibilityMode: false,\r\n  parentalControls: true,\r\n};\r\n\r\nexport const useRegionStore = create<RegionState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      availableRegions: [\r\n        newYorkConfig, \r\n        chicagoConfig, \r\n        sanFranciscoConfig, \r\n        washingtonConfig, \r\n        bostonConfig, \r\n        losAngelesConfig, \r\n        seattleConfig,\r\n        philadelphiaConfig,\r\n        atlantaConfig,\r\n        miamiConfig,\r\n        londonConfig, \r\n        tokyoConfig\r\n      ],\r\n      currentRegion: newYorkConfig,\r\n      userPreferences: defaultPreferences,\r\n      isConfigured: false,\r\n      isHydrated: false,\r\n\r\n      setRegion: (regionId) => set((state) => {\r\n        const region = state.availableRegions.find(r => r.id === regionId);\r\n        if (region) {\r\n          return {\r\n            currentRegion: region,\r\n            userPreferences: {\r\n              ...state.userPreferences,\r\n              selectedRegion: regionId,\r\n            },\r\n          };\r\n        }\r\n        return state;\r\n      }),\r\n\r\n      updatePreferences: (preferences) => set((state) => ({\r\n        userPreferences: { ...state.userPreferences, ...preferences },\r\n      })),\r\n\r\n      completeOnboarding: () => set({ isConfigured: true }),\r\n\r\n      addCustomRegion: (region) => set((state) => ({\r\n        availableRegions: [...state.availableRegions, region],\r\n      })),\r\n\r\n      removeRegion: (regionId) => set((state) => ({\r\n        availableRegions: state.availableRegions.filter(r => r.id !== regionId),\r\n      })),\r\n\r\n      updateRegionTransitData: (regionId, transitData) => set((state) => ({\r\n        availableRegions: state.availableRegions.map(region => \r\n          region.id === regionId \r\n            ? { ...region, ...transitData }\r\n            : region\r\n        ),\r\n        currentRegion: state.currentRegion.id === regionId \r\n          ? { ...state.currentRegion, ...transitData }\r\n          : state.currentRegion\r\n      })),\r\n\r\n      getCurrentTransitSystems: () => {\r\n        return get().currentRegion.transitSystems;\r\n      },\r\n\r\n      getEmergencyNumber: () => {\r\n        return get().currentRegion.emergencyNumber;\r\n      },\r\n\r\n      getSafetyTips: () => {\r\n        return get().currentRegion.safetyTips;\r\n      },\r\n\r\n      getFunFacts: () => {\r\n        return get().currentRegion.funFacts;\r\n      },\r\n\r\n      getRegionsByCountry: (country) => {\r\n        return get().availableRegions.filter(region => region.country === country);\r\n      },\r\n\r\n      searchRegions: (query) => {\r\n        const regions = get().availableRegions;\r\n        const lowercaseQuery = query.toLowerCase();\r\n        return regions.filter(region => \r\n          region.name.toLowerCase().includes(lowercaseQuery) ||\r\n          region.country.toLowerCase().includes(lowercaseQuery)\r\n        );\r\n      },\r\n\r\n      setHydrated: () => set({ isHydrated: true }),\r\n    }),\r\n    {\r\n      name: \"region-storage\",\r\n      storage: createJSONStorage(() => AsyncStorage),\r\n      onRehydrateStorage: () => (state) => {\r\n        if (state) {\r\n          state.setHydrated();\r\n        }\r\n      },\r\n    }\r\n  )\r\n);\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\types\\gamification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\types\\navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\types\\parental.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\types\\region.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\accessibility.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'liveRegionPolite' is assigned a value but never used.","line":13,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'liveRegionAssertive' is assigned a value but never used.","line":14,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2475,2478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2475,2478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AccessibilityInfo, Platform } from 'react-native';\r\n\r\n/** Announcement politeness levels */\r\nexport type Politeness = 'polite' | 'assertive';\r\n\r\nexport interface AnnouncementOptions {\r\n  politeness?: Politeness; // default 'polite'\r\n  /** Suppress duplicate messages within debounce window */\r\n  dedupe?: boolean;\r\n}\r\n\r\n// Web live region singleton refs\r\nlet liveRegionPolite: HTMLElement | null = null;\r\nlet liveRegionAssertive: HTMLElement | null = null;\r\nlet lastMessage: string | null = null;\r\nlet lastTimestamp = 0;\r\nconst DEDUPE_WINDOW_MS = 600; // prevent rapid duplicate spam\r\n\r\nfunction ensureLiveRegion(politeness: Politeness): HTMLElement | null {\r\n  if (Platform.OS !== 'web') return null;\r\n  const id = politeness === 'assertive' ? '__a11y_live_assertive' : '__a11y_live_polite';\r\n  let el = document.getElementById(id) as HTMLElement | null;\r\n  if (!el) {\r\n    el = document.createElement('div');\r\n    el.id = id;\r\n    el.setAttribute('aria-live', politeness);\r\n    el.setAttribute('aria-atomic', 'true');\r\n    el.style.position = 'absolute';\r\n    el.style.width = '1px';\r\n    el.style.height = '1px';\r\n    el.style.margin = '-1px';\r\n    el.style.padding = '0';\r\n    el.style.overflow = 'hidden';\r\n    el.style.clip = 'rect(0 0 0 0)';\r\n    el.style.whiteSpace = 'nowrap';\r\n    document.body.appendChild(el);\r\n  }\r\n  if (politeness === 'assertive') liveRegionAssertive = el; else liveRegionPolite = el;\r\n  return el;\r\n}\r\n\r\n/**\r\n * Unified announce API.\r\n * Native: delegates to AccessibilityInfo.announceForAccessibility.\r\n * Web: writes to hidden live region (polite/assertive) or logs as fallback.\r\n */\r\nexport async function announce(message: string, options: AnnouncementOptions = {}) {\r\n  if (!message) return;\r\n  const { politeness = 'polite', dedupe = true } = options;\r\n\r\n  const now = Date.now();\r\n  if (dedupe && message === lastMessage && now - lastTimestamp < DEDUPE_WINDOW_MS) {\r\n    return; // suppress duplicate\r\n  }\r\n  lastMessage = message;\r\n  lastTimestamp = now;\r\n\r\n  try {\r\n    if (Platform.OS === 'web') {\r\n      const region = ensureLiveRegion(politeness) || null;\r\n      if (region) {\r\n        // Clear then set to force announcement even if string repeats after window\r\n        region.textContent = '';\r\n        setTimeout(() => { region.textContent = message; }, 10);\r\n      } else {\r\n        // eslint-disable-next-line no-console\r\n        console.log('A11Y_ANNOUNCE:', message);\r\n      }\r\n    } else if ((AccessibilityInfo as any)?.announceForAccessibility) {\r\n      await AccessibilityInfo.announceForAccessibility(message);\r\n    }\r\n  } catch {\r\n    // Swallow to avoid breaking UI flow\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated Use announce(message, { politeness }) instead. Will be removed after S3-T1.\r\n */\r\nexport const announceForAccessibility = (message: string) => {\r\n  if (!message) return;\r\n  announce(message, { politeness: 'assertive' });\r\n  if (__DEV__) {\r\n    // eslint-disable-next-line no-console\r\n    console.warn('[deprecation] announceForAccessibility is deprecated; use announce().');\r\n  }\r\n};\r\n\r\nexport const isScreenReaderEnabled = async (): Promise<boolean> => {\r\n  if (Platform.OS === 'web') {\r\n    return false; // Web screen reader detection is complex\r\n  }\r\n\r\n  try {\r\n    return await AccessibilityInfo.isScreenReaderEnabled();\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getAccessibilityLabel = (\r\n  text: string,\r\n  context?: string\r\n): string => {\r\n  if (context) {\r\n    return `${text}, ${context}`;\r\n  }\r\n  return text;\r\n};\r\n\r\nexport const getAccessibilityHint = (action: string): string => {\r\n  return `Double tap to ${action}`;\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[72,75],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[72,75],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[250,253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[250,253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[641,644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[641,644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[810,813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[810,813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1503,1506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1503,1506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type AnalyticsEvent = {\r\n  name: string;\r\n  properties?: Record<string, any>;\r\n  timestamp?: number;\r\n};\r\n\r\nclass Analytics {\r\n  private events: AnalyticsEvent[] = [];\r\n  private isEnabled = true;\r\n\r\n  track(name: string, properties?: Record<string, any>) {\r\n    if (!this.isEnabled) return;\r\n\r\n    const event: AnalyticsEvent = {\r\n      name,\r\n      properties,\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    this.events.push(event);\r\n    console.log('Analytics:', event);\r\n\r\n    // In a real app, you'd send this to your analytics service\r\n    // this.sendToAnalytics(event);\r\n  }\r\n\r\n  screen(screenName: string, properties?: Record<string, any>) {\r\n    this.track('screen_view', {\r\n      screen_name: screenName,\r\n      ...properties,\r\n    });\r\n  }\r\n\r\n  userAction(action: string, properties?: Record<string, any>) {\r\n    this.track('user_action', {\r\n      action,\r\n      ...properties,\r\n    });\r\n  }\r\n\r\n  error(error: Error, context?: string) {\r\n    this.track('error', {\r\n      error_message: error.message,\r\n      error_stack: error.stack,\r\n      context,\r\n    });\r\n  }\r\n\r\n  setEnabled(enabled: boolean) {\r\n    this.isEnabled = enabled;\r\n  }\r\n\r\n  getEvents() {\r\n    return [...this.events];\r\n  }\r\n\r\n  clearEvents() {\r\n    this.events = [];\r\n  }\r\n}\r\n\r\nexport const analytics = new Analytics();\r\n\r\n// Common tracking functions\r\nexport const trackScreenView = (screenName: string) => {\r\n  analytics.screen(screenName);\r\n};\r\n\r\nexport const trackUserAction = (action: string, properties?: Record<string, any>) => {\r\n  analytics.userAction(action, properties);\r\n};\r\n\r\nexport const trackError = (error: Error, context?: string) => {\r\n  analytics.error(error, context);\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Platform' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2208,2211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2208,2211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2414,2417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2414,2417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4016,4019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4016,4019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5526,5529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5526,5529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Platform } from 'react-native';\r\n\r\nconst API_BASE_URL = __DEV__ \r\n  ? 'http://localhost:3000/api' \r\n  : 'https://your-production-api.com/api';\r\n\r\nconst API_TIMEOUT = 10000; // 10 seconds\r\n\r\ntype ApiResponse<T> = {\r\n  data: T;\r\n  success: boolean;\r\n  message?: string;\r\n};\r\n\r\nclass ApiClient {\r\n  private baseURL: string;\r\n  private timeout: number;\r\n  private authToken: string | null = null;\r\n\r\n  constructor(baseURL: string, timeout: number = API_TIMEOUT) {\r\n    this.baseURL = baseURL;\r\n    this.timeout = timeout;\r\n    this.loadAuthToken();\r\n  }\r\n\r\n  private async loadAuthToken() {\r\n    try {\r\n      this.authToken = await AsyncStorage.getItem('auth_token');\r\n    } catch (error) {\r\n      console.warn('Failed to load auth token:', error);\r\n    }\r\n  }\r\n\r\n  private async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    const headers: Record<string, string> = {\r\n      'Content-Type': 'application/json',\r\n      ...(options.headers as Record<string, string>),\r\n    };\r\n\r\n    if (this.authToken) {\r\n      headers.Authorization = `Bearer ${this.authToken}`;\r\n    }\r\n\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers,\r\n        signal: controller.signal,\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      \r\n      if (error instanceof Error) {\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('Request timeout');\r\n        }\r\n        throw error;\r\n      }\r\n      \r\n      throw new Error('Unknown error occurred');\r\n    }\r\n  }\r\n\r\n  async get<T>(endpoint: string): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { method: 'GET' });\r\n  }\r\n\r\n  async post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'POST',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'PUT',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { method: 'DELETE' });\r\n  }\r\n\r\n  setAuthToken(token: string) {\r\n    this.authToken = token;\r\n    AsyncStorage.setItem('auth_token', token);\r\n  }\r\n\r\n  clearAuthToken() {\r\n    this.authToken = null;\r\n    AsyncStorage.removeItem('auth_token');\r\n  }\r\n}\r\n\r\nexport const apiClient = new ApiClient(API_BASE_URL);\r\n\r\n// Specific API functions\r\nexport const transitApi = {\r\n  getRoutes: (from: string, to: string) => \r\n    apiClient.get(`/transit/routes?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}`),\r\n  \r\n  getLiveArrivals: (stopId: string) => \r\n    apiClient.get(`/transit/arrivals/${stopId}`),\r\n  \r\n  getStops: (lat: number, lng: number, radius: number = 500) => \r\n    apiClient.get(`/transit/stops?lat=${lat}&lng=${lng}&radius=${radius}`),\r\n};\r\n\r\nexport const placesApi = {\r\n  search: (query: string, location?: { lat: number; lng: number }) => \r\n    apiClient.get(`/places/search?q=${encodeURIComponent(query)}${location ? `&lat=${location.lat}&lng=${location.lng}` : ''}`),\r\n  \r\n  getDetails: (placeId: string) => \r\n    apiClient.get(`/places/${placeId}`),\r\n  \r\n  getNearby: (lat: number, lng: number, type?: string) => \r\n    apiClient.get(`/places/nearby?lat=${lat}&lng=${lng}${type ? `&type=${type}` : ''}`),\r\n};\r\n\r\nexport const userApi = {\r\n  getProfile: () => apiClient.get('/user/profile'),\r\n  updateProfile: (data: any) => apiClient.put('/user/profile', data),\r\n  getAchievements: () => apiClient.get('/user/achievements'),\r\n  checkIn: (placeId: string, photo?: string) => \r\n    apiClient.post('/user/checkin', { placeId, photo }),\r\n};\r\n\r\n// Offline support\r\nexport const offlineStorage = {\r\n  async cacheResponse<T>(key: string, data: T): Promise<void> {\r\n    try {\r\n      await AsyncStorage.setItem(`cache_${key}`, JSON.stringify({\r\n        data,\r\n        timestamp: Date.now(),\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Failed to cache response:', error);\r\n    }\r\n  },\r\n\r\n  async getCachedResponse<T>(key: string, maxAge: number = 5 * 60 * 1000): Promise<T | null> {\r\n    try {\r\n      const cached = await AsyncStorage.getItem(`cache_${key}`);\r\n      if (!cached) return null;\r\n\r\n      const { data, timestamp } = JSON.parse(cached);\r\n      if (Date.now() - timestamp > maxAge) {\r\n        await AsyncStorage.removeItem(`cache_${key}`);\r\n        return null;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.warn('Failed to get cached response:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  async clearCache(): Promise<void> {\r\n    try {\r\n      const keys = await AsyncStorage.getAllKeys();\r\n      const cacheKeys = keys.filter(key => key.startsWith('cache_'));\r\n      await AsyncStorage.multiRemove(cacheKeys);\r\n    } catch (error) {\r\n      console.warn('Failed to clear cache:', error);\r\n    }\r\n  },\r\n};\r\n\r\n// Network-aware API wrapper\r\nexport const createNetworkAwareApi = <T extends any[], R>(\r\n  apiFunction: (...args: T) => Promise<ApiResponse<R>>,\r\n  cacheKey: string,\r\n  maxAge?: number\r\n) => {\r\n  return async (...args: T): Promise<ApiResponse<R>> => {\r\n    try {\r\n      // Try network request first\r\n      const response = await apiFunction(...args);\r\n      \r\n      // Cache successful response\r\n      if (response.success) {\r\n        await offlineStorage.cacheResponse(cacheKey, response);\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      // Fallback to cache on network error\r\n      console.warn('Network request failed, trying cache:', error);\r\n      \r\n      const cached = await offlineStorage.getCachedResponse<ApiResponse<R>>(cacheKey, maxAge);\r\n      if (cached) {\r\n        return {\r\n          ...cached,\r\n          message: 'Showing cached data (offline)',\r\n        };\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  };\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\deepLinking.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_rest' is assigned a value but never used.","line":21,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'placeId' is assigned a value but never used.","line":24,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Linking } from \"react-native\";\n\r\nimport { nav } from \"@/shared/navigation/nav\";\r\n\r\nexport type DeepLinkParams = {\r\n  screen?: string;\r\n  params?: Record<string, string>;\r\n};\r\n\r\nexport const handleDeepLink = (url: string) => {\r\n  try {\r\n    const parsedUrl = new URL(url);\r\n    const path = parsedUrl.pathname;\r\n    const searchParams = Object.fromEntries(parsedUrl.searchParams);\r\n\r\n    // Handle different deep link patterns\r\n    if (path.startsWith('/route/')) {\r\n      const routeId = path.split('/')[2];\r\n      nav.push(\"/route/:id\", { id: routeId });\r\n    } else if (path === '/search') {\r\n      const { category, ..._rest } = searchParams as Record<string, string>;\r\n      nav.push('/search', category ? { category } : undefined);\r\n    } else if (path.startsWith('/place/')) {\r\n      const placeId = path.split('/')[2];\r\n      // Navigate to place details or set as destination\r\n      nav.push('/map');\r\n    } else {\r\n      // Default to home\r\n      nav.push('/');\r\n    }\r\n  } catch (error) {\r\n    // Suppress noisy stack trace in test environment while preserving behavior\r\n    if (process.env.NODE_ENV !== 'test') {\r\n      console.error('Error handling deep link:', error);\r\n    }\r\n    nav.push('/');\r\n  }\r\n};\r\n\r\nexport const createShareableLink = (screen: string, params?: Record<string, string>) => {\r\n  const baseUrl = 'https://kidmap.app'; // Replace with your actual domain\r\n  const url = new URL(baseUrl);\r\n  url.pathname = screen;\r\n\r\n  if (params) {\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      url.searchParams.set(key, value);\r\n    });\r\n  }\r\n\r\n  return url.toString();\r\n};\r\n\r\nexport const shareRoute = async (routeId: string) => {\r\n  const url = createShareableLink(`/route/${routeId}`);\r\n  try {\r\n    await Linking.openURL(`sms:?body=Check out this route: ${url}`);\r\n  } catch (error) {\r\n    console.error('Error sharing route:', error);\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[727,730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[727,730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":126,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":126,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5812,5815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5812,5815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5999,6002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5999,6002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":345,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10654,10657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10654,10657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12147,12150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12147,12150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":436,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13317,13320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13317,13320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport React from 'react';\r\nimport { Platform } from 'react-native';\r\nimport { View, Text, Pressable } from 'react-native';\n\r\nimport { log } from './logger';\r\n\r\n// Enhanced error handling utilities for safety-critical operations\r\n\r\nexport type RetryOptions = {\r\n  maxAttempts: number;\r\n  delayMs: number;\r\n  backoffMultiplier?: number;\r\n  maxDelayMs?: number;\r\n  shouldRetry?: (error: Error, attempt: number) => boolean;\r\n};\r\n\r\nexport type StorageOperation<T> = {\r\n  key: string;\r\n  operation: 'get' | 'set' | 'remove';\r\n  value?: T;\r\n};\r\n\r\nexport type ErrorRecoveryStrategy = {\r\n  strategy: 'retry' | 'fallback' | 'ignore' | 'escalate';\r\n  fallbackValue?: any;\r\n  onError?: (error: Error) => void;\r\n};\r\n\r\n// Default retry configuration for different operation types\r\nexport const DEFAULT_RETRY_CONFIG: Record<string, RetryOptions> = {\r\n  storage: {\r\n    maxAttempts: 3,\r\n    delayMs: 100,\r\n    backoffMultiplier: 2,\r\n    maxDelayMs: 1000,\r\n    shouldRetry: (error: Error) => !error.message.includes('quota')\r\n  },\r\n  network: {\r\n    maxAttempts: 3,\r\n    delayMs: 1000,\r\n    backoffMultiplier: 2,\r\n    maxDelayMs: 5000,\r\n    shouldRetry: (error: Error) => !error.message.includes('404')\r\n  },\r\n  location: {\r\n    maxAttempts: 2,\r\n    delayMs: 500,\r\n    backoffMultiplier: 1.5,\r\n    maxDelayMs: 2000\r\n  },\r\n  critical: {\r\n    maxAttempts: 5,\r\n    delayMs: 200,\r\n    backoffMultiplier: 1.5,\r\n    maxDelayMs: 3000\r\n  }\r\n};\r\n\r\n// Generic retry mechanism with exponential backoff\r\nexport async function withRetry<T>(\r\n  operation: () => Promise<T>,\r\n  options: RetryOptions,\r\n  context: string = 'operation'\r\n): Promise<T> {\r\n  let lastError: Error;\r\n  let delay = options.delayMs;\r\n\r\n  for (let attempt = 1; attempt <= options.maxAttempts; attempt++) {\r\n    try {\r\n      log.debug(`Attempting ${context} (attempt ${attempt}/${options.maxAttempts})`);\r\n      const result = await operation();\r\n      \r\n      if (attempt > 1) {\r\n        log.info(`${context} succeeded after ${attempt} attempts`);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n      \r\n      log.warn(`${context} failed on attempt ${attempt}`, { \r\n        error: lastError.message,\r\n        attempt,\r\n        maxAttempts: options.maxAttempts\r\n      });\r\n\r\n      // Check if we should retry this error\r\n      if (options.shouldRetry && !options.shouldRetry(lastError, attempt)) {\r\n        log.error(`${context} failed with non-retryable error`, lastError);\r\n        throw lastError;\r\n      }\r\n\r\n      // Don't wait after the last attempt\r\n      if (attempt < options.maxAttempts) {\r\n        log.debug(`Waiting ${delay}ms before retry`);\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n        \r\n        // Apply backoff multiplier\r\n        if (options.backoffMultiplier) {\r\n          delay = Math.min(\r\n            delay * options.backoffMultiplier,\r\n            options.maxDelayMs || delay * options.backoffMultiplier\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  log.error(`${context} failed after ${options.maxAttempts} attempts`, lastError!);\r\n  throw lastError!;\r\n}\r\n\r\n// Enhanced AsyncStorage operations with retry and error recovery\r\nexport class SafeAsyncStorage {\r\n  private static async performOperation<T>(\r\n    operation: StorageOperation<T>,\r\n    recovery: ErrorRecoveryStrategy = { strategy: 'retry' }\r\n  ): Promise<T | null> {\r\n    const retryOptions = DEFAULT_RETRY_CONFIG.storage;\r\n    \r\n    try {\r\n      return await withRetry(async () => {\r\n        switch (operation.operation) {\r\n          case 'get':\r\n            const stored = await AsyncStorage.getItem(operation.key);\r\n            return stored ? JSON.parse(stored) : null;\r\n          \r\n          case 'set':\r\n            await AsyncStorage.setItem(operation.key, JSON.stringify(operation.value));\r\n            return operation.value;\r\n          \r\n          case 'remove':\r\n            await AsyncStorage.removeItem(operation.key);\r\n            return null;\r\n          \r\n          default:\r\n            throw new Error(`Unknown storage operation: ${operation.operation}`);\r\n        }\r\n      }, retryOptions, `AsyncStorage ${operation.operation} ${operation.key}`);\r\n      \r\n    } catch (error) {\r\n      const err = error as Error;\r\n      log.error(`Storage operation failed: ${operation.operation} ${operation.key}`, err);\r\n      \r\n      // Apply recovery strategy\r\n      switch (recovery.strategy) {\r\n        case 'fallback':\r\n          log.info(`Using fallback value for ${operation.key}`);\r\n          return recovery.fallbackValue || null;\r\n        \r\n        case 'ignore':\r\n          log.info(`Ignoring storage error for ${operation.key}`);\r\n          return null;\r\n        \r\n        case 'escalate':\r\n          if (recovery.onError) {\r\n            recovery.onError(err);\r\n          }\r\n          throw err;\r\n        \r\n        case 'retry':\r\n        default:\r\n          throw err;\r\n      }\r\n    }\r\n  }\r\n\r\n  static async getItem<T>(\r\n    key: string, \r\n    fallbackValue?: T,\r\n    recovery: ErrorRecoveryStrategy = { strategy: 'fallback', fallbackValue }\r\n  ): Promise<T | null> {\r\n    return this.performOperation({ key, operation: 'get' }, recovery);\r\n  }\r\n\r\n  static async setItem<T>(\r\n    key: string, \r\n    value: T,\r\n    recovery: ErrorRecoveryStrategy = { strategy: 'retry' }\r\n  ): Promise<T | null> {\r\n    return this.performOperation({ key, operation: 'set', value }, recovery);\r\n  }\r\n\r\n  static async removeItem(\r\n    key: string,\r\n    recovery: ErrorRecoveryStrategy = { strategy: 'ignore' }\r\n  ): Promise<null> {\r\n    return this.performOperation({ key, operation: 'remove' }, recovery);\r\n  }\r\n\r\n  // Batch operations with transaction-like behavior\r\n  static async batchOperation<T>(\r\n    operations: StorageOperation<any>[],\r\n    recovery: ErrorRecoveryStrategy = { strategy: 'retry' }\r\n  ): Promise<(T | null)[]> {\r\n    const results: (T | null)[] = [];\r\n    const completedOperations: StorageOperation<any>[] = [];\r\n    \r\n    try {\r\n      for (const operation of operations) {\r\n        const result = await this.performOperation(operation, recovery);\r\n        results.push(result);\r\n        completedOperations.push(operation);\r\n      }\r\n      \r\n      return results;\r\n    } catch (error) {\r\n      // Rollback completed operations if possible\r\n      log.warn('Batch operation failed, attempting rollback', { \r\n        completed: completedOperations.length,\r\n        total: operations.length\r\n      });\r\n      \r\n      // For set operations, we can't easily rollback, but we can log\r\n      for (const op of completedOperations) {\r\n        if (op.operation === 'set') {\r\n          log.warn(`Cannot rollback set operation for ${op.key}`);\r\n        }\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Error boundary for safety components\r\nexport function createSafetyErrorBoundary(\r\n  componentName: string,\r\n  fallbackComponent?: React.ComponentType<{ error: Error; retry: () => void }>\r\n) {\r\n  return class SafetyErrorBoundary extends React.Component<\r\n    { children: React.ReactNode },\r\n    { hasError: boolean; error: Error | null; errorId: string }\r\n  > {\r\n    constructor(props: { children: React.ReactNode }) {\r\n      super(props);\r\n      this.state = { \r\n        hasError: false, \r\n        error: null, \r\n        errorId: `${componentName}_${Date.now()}`\r\n      };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: Error) {\r\n      return { \r\n        hasError: true, \r\n        error,\r\n        errorId: `error_${Date.now()}`\r\n      };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n      log.error(`Safety component error in ${componentName}`, error, {\r\n        componentStack: errorInfo.componentStack,\r\n        errorBoundary: componentName,\r\n        errorId: this.state.errorId\r\n      });\r\n\r\n      // Report to crash analytics in production\r\n      if (Platform.OS !== 'web' && !__DEV__) {\r\n        this.reportToAnalytics(error, errorInfo);\r\n      }\r\n    }\r\n\r\n    private async reportToAnalytics(error: Error, errorInfo: React.ErrorInfo) {\r\n      try {\r\n        // In a real app, send to crash reporting service\r\n        await SafeAsyncStorage.setItem(\r\n          `crash_report_${this.state.errorId}`,\r\n          {\r\n            error: {\r\n              message: error.message,\r\n              stack: error.stack,\r\n              name: error.name\r\n            },\r\n            errorInfo,\r\n            timestamp: Date.now(),\r\n            component: componentName,\r\n            platform: Platform.OS,\r\n            version: Platform.Version\r\n          },\r\n          { strategy: 'ignore' } // Don't fail if we can't save crash report\r\n        );\r\n      } catch (reportError) {\r\n        log.error('Failed to save crash report', reportError as Error);\r\n      }\r\n    }\r\n\r\n    retry = () => {\r\n      log.info(`Retrying ${componentName} after error`);\r\n      this.setState({ \r\n        hasError: false, \r\n        error: null,\r\n        errorId: `${componentName}_${Date.now()}`\r\n      });\r\n    };\r\n\r\n    render() {\r\n      if (this.state.hasError) {\r\n        if (fallbackComponent) {\r\n          const FallbackComponent = fallbackComponent;\r\n          return React.createElement(FallbackComponent, { error: this.state.error!, retry: this.retry });\r\n        }\r\n\r\n        // Default safety fallback\r\n        return React.createElement(View, {\r\n          style: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            padding: 20,\r\n            backgroundColor: '#FFF5F5'\r\n          }\r\n        }, [\r\n          React.createElement(Text, {\r\n            key: 'title',\r\n            style: { fontSize: 18, fontWeight: 'bold', color: '#E53E3E', marginBottom: 10 }\r\n          }, 'Safety Feature Unavailable'),\r\n          React.createElement(Text, {\r\n            key: 'description',\r\n            style: { fontSize: 14, color: '#666', textAlign: 'center', marginBottom: 20 }\r\n          }, `The ${componentName} feature encountered an error. This doesn't affect other safety features.`),\r\n          React.createElement(Pressable, {\r\n            key: 'retry-button',\r\n            style: {\r\n              backgroundColor: '#3182CE',\r\n              paddingHorizontal: 20,\r\n              paddingVertical: 10,\r\n              borderRadius: 8\r\n            },\r\n            onPress: this.retry\r\n          }, React.createElement(Text, {\r\n            style: { color: 'white', fontWeight: '600' }\r\n          }, 'Try Again'))\r\n        ]);\r\n      }\r\n\r\n      return this.props.children;\r\n    }\r\n  };\r\n}\r\n\r\n// Location error handling with user-friendly messages\r\nexport function handleLocationError(error: any): {\r\n  userMessage: string;\r\n  technicalMessage: string;\r\n  canRetry: boolean;\r\n  suggestedAction?: string;\r\n} {\r\n  const errorCode = error?.code || error?.PERMISSION_DENIED || 'UNKNOWN';\r\n  \r\n  switch (errorCode) {\r\n    case 1: // PERMISSION_DENIED\r\n    case 'PERMISSION_DENIED':\r\n      return {\r\n        userMessage: \"Location access is needed for safety features\",\r\n        technicalMessage: \"Location permission denied\",\r\n        canRetry: true,\r\n        suggestedAction: \"Please enable location access in your device settings\"\r\n      };\r\n    \r\n    case 2: // POSITION_UNAVAILABLE\r\n    case 'POSITION_UNAVAILABLE':\r\n      return {\r\n        userMessage: \"Can't find your location right now\",\r\n        technicalMessage: \"GPS signal unavailable\",\r\n        canRetry: true,\r\n        suggestedAction: \"Try moving to an area with better GPS signal\"\r\n      };\r\n    \r\n    case 3: // TIMEOUT\r\n    case 'TIMEOUT':\r\n      return {\r\n        userMessage: \"Location is taking too long to find\",\r\n        technicalMessage: \"Location request timeout\",\r\n        canRetry: true,\r\n        suggestedAction: \"Please try again in a moment\"\r\n      };\r\n    \r\n    default:\r\n      return {\r\n        userMessage: \"Having trouble with location services\",\r\n        technicalMessage: error?.message || \"Unknown location error\",\r\n        canRetry: true,\r\n        suggestedAction: \"Please check your device's location settings\"\r\n      };\r\n  }\r\n}\r\n\r\n// Network error handling\r\nexport function handleNetworkError(error: any): {\r\n  userMessage: string;\r\n  technicalMessage: string;\r\n  canRetry: boolean;\r\n  isOffline: boolean;\r\n} {\r\n  const message = error?.message?.toLowerCase() || '';\r\n  \r\n  if (message.includes('network') || message.includes('offline') || message.includes('internet')) {\r\n    return {\r\n      userMessage: \"No internet connection\",\r\n      technicalMessage: \"Network unavailable\",\r\n      canRetry: true,\r\n      isOffline: true\r\n    };\r\n  }\r\n  \r\n  if (message.includes('timeout')) {\r\n    return {\r\n      userMessage: \"Connection is slow, please wait\",\r\n      technicalMessage: \"Request timeout\",\r\n      canRetry: true,\r\n      isOffline: false\r\n    };\r\n  }\r\n  \r\n  if (message.includes('404') || message.includes('not found')) {\r\n    return {\r\n      userMessage: \"Service temporarily unavailable\",\r\n      technicalMessage: \"Resource not found\",\r\n      canRetry: false,\r\n      isOffline: false\r\n    };\r\n  }\r\n  \r\n  return {\r\n    userMessage: \"Connection problem, please try again\",\r\n    technicalMessage: error?.message || \"Unknown network error\",\r\n    canRetry: true,\r\n    isOffline: false\r\n  };\r\n}\r\n\r\n// Camera/photo error handling\r\nexport function handleCameraError(error: any): {\r\n  userMessage: string;\r\n  technicalMessage: string;\r\n  canRetry: boolean;\r\n  requiresPermission: boolean;\r\n} {\r\n  const message = error?.message?.toLowerCase() || '';\r\n  \r\n  if (message.includes('permission') || message.includes('denied')) {\r\n    return {\r\n      userMessage: \"Camera permission is needed for photo check-ins\",\r\n      technicalMessage: \"Camera permission denied\",\r\n      canRetry: true,\r\n      requiresPermission: true\r\n    };\r\n  }\r\n  \r\n  if (message.includes('unavailable') || message.includes('not available')) {\r\n    return {\r\n      userMessage: \"Camera is not available on this device\",\r\n      technicalMessage: \"Camera hardware unavailable\",\r\n      canRetry: false,\r\n      requiresPermission: false\r\n    };\r\n  }\r\n  \r\n  if (message.includes('cancelled') || message.includes('canceled')) {\r\n    return {\r\n      userMessage: \"Photo was cancelled\",\r\n      technicalMessage: \"User cancelled camera\",\r\n      canRetry: true,\r\n      requiresPermission: false\r\n    };\r\n  }\r\n  \r\n  return {\r\n    userMessage: \"Camera error, please try again\",\r\n    technicalMessage: error?.message || \"Unknown camera error\",\r\n    canRetry: true,\r\n    requiresPermission: false\r\n  };\r\n}\r\n\r\nexport default {\r\n  withRetry,\r\n  SafeAsyncStorage,\r\n  createSafetyErrorBoundary,\r\n  handleLocationError,\r\n  handleNetworkError,\r\n  handleCameraError,\r\n  DEFAULT_RETRY_CONFIG\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\invariant.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[91,94],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[91,94],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Lightweight invariant utility (dev-only warnings)\r\nexport function invariant(condition: any, message: string) {\r\n    if (!condition && typeof __DEV__ !== 'undefined' && __DEV__) {\r\n        // eslint-disable-next-line no-console\r\n        console.warn(`[invariant] ${message}`);\r\n    }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\locationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[268,271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[268,271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[531,534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[531,534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[948,951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[948,951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2484,2487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2484,2487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2601,2604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2601,2604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2717,2720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2717,2720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2849,2852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2849,2852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3730,3733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3730,3733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3823,3826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3823,3826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3915,3918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3915,3918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4023,4026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4023,4026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Platform } from 'react-native';\n\r\nimport Config from './config';\r\n\r\nexport enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n}\r\n\r\ntype LogEntry = {\r\n  level: LogLevel;\r\n  message: string;\r\n  timestamp: number;\r\n  context?: Record<string, any>;\r\n  stack?: string;\r\n};\r\n\r\nclass Logger {\r\n  private logs: LogEntry[] = [];\r\n  private maxLogs = 1000;\r\n  private minLevel = Config.isDev ? LogLevel.DEBUG : LogLevel.INFO;\r\n\r\n  private formatMessage(level: LogLevel, message: string, context?: Record<string, any>): string {\r\n    const timestamp = new Date().toISOString();\r\n    const levelStr = LogLevel[level];\r\n    const contextStr = context ? ` ${JSON.stringify(context)}` : '';\r\n    return `[${timestamp}] ${levelStr}: ${message}${contextStr}`;\r\n  }\r\n\r\n  private shouldLog(level: LogLevel): boolean {\r\n    return level >= this.minLevel;\r\n  }\r\n\r\n  private addLog(level: LogLevel, message: string, context?: Record<string, any>, error?: Error) {\r\n    if (!this.shouldLog(level)) return;\r\n\r\n    const logEntry: LogEntry = {\r\n      level,\r\n      message,\r\n      timestamp: Date.now(),\r\n      context,\r\n      stack: error?.stack,\r\n    };\r\n\r\n    this.logs.push(logEntry);\r\n\r\n    // Keep only the most recent logs\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs = this.logs.slice(-this.maxLogs);\r\n    }\r\n\r\n    // Console output in development\r\n    if (Config.isDev) {\r\n      const formattedMessage = this.formatMessage(level, message, context);\r\n      \r\n      switch (level) {\r\n        case LogLevel.DEBUG:\r\n          console.log(formattedMessage);\r\n          break;\r\n        case LogLevel.INFO:\r\n          console.info(formattedMessage);\r\n          break;\r\n        case LogLevel.WARN:\r\n          console.warn(formattedMessage);\r\n          break;\r\n        case LogLevel.ERROR:\r\n          console.error(formattedMessage, error);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Send to crash reporting service in production\r\n    if (Config.isProduction && level >= LogLevel.ERROR) {\r\n      this.sendToCrashReporting(logEntry, error);\r\n    }\r\n  }\r\n\r\n  private async sendToCrashReporting(logEntry: LogEntry, error?: Error) {\r\n    try {\r\n      // In a real app, you'd send to services like Sentry, Bugsnag, etc.\r\n      // For now, we'll just store it locally\r\n      console.error('Production Error:', logEntry, error);\r\n    } catch (e) {\r\n      console.error('Failed to send crash report:', e);\r\n    }\r\n  }\r\n\r\n  debug(message: string, context?: Record<string, any>) {\r\n    this.addLog(LogLevel.DEBUG, message, context);\r\n  }\r\n\r\n  info(message: string, context?: Record<string, any>) {\r\n    this.addLog(LogLevel.INFO, message, context);\r\n  }\r\n\r\n  warn(message: string, context?: Record<string, any>) {\r\n    this.addLog(LogLevel.WARN, message, context);\r\n  }\r\n\r\n  error(message: string, error?: Error, context?: Record<string, any>) {\r\n    this.addLog(LogLevel.ERROR, message, context, error);\r\n  }\r\n\r\n  // Performance logging\r\n  time(label: string) {\r\n    if (Config.isDev) {\r\n      console.time(label);\r\n    }\r\n  }\r\n\r\n  timeEnd(label: string) {\r\n    if (Config.isDev) {\r\n      console.timeEnd(label);\r\n    }\r\n  }\r\n\r\n  // Get logs for debugging\r\n  getLogs(level?: LogLevel): LogEntry[] {\r\n    if (level !== undefined) {\r\n      return this.logs.filter(log => log.level >= level);\r\n    }\r\n    return [...this.logs];\r\n  }\r\n\r\n  // Clear logs\r\n  clearLogs() {\r\n    this.logs = [];\r\n  }\r\n\r\n  // Export logs for support\r\n  exportLogs(): string {\r\n    return this.logs\r\n      .map(log => this.formatMessage(log.level, log.message, log.context))\r\n      .join('\\n');\r\n  }\r\n}\r\n\r\nexport const logger = new Logger();\r\n\r\n// Convenience functions\r\nexport const log = {\r\n  debug: (message: string, context?: Record<string, any>) => logger.debug(message, context),\r\n  info: (message: string, context?: Record<string, any>) => logger.info(message, context),\r\n  warn: (message: string, context?: Record<string, any>) => logger.warn(message, context),\r\n  error: (message: string, error?: Error, context?: Record<string, any>) => logger.error(message, error, context),\r\n  time: (label: string) => logger.time(label),\r\n  timeEnd: (label: string) => logger.timeEnd(label),\r\n};\r\n\r\n// Global error handler\r\nif (Platform.OS !== 'web') {\r\n  const originalHandler = ErrorUtils.getGlobalHandler();\r\n  \r\n  ErrorUtils.setGlobalHandler((error, isFatal) => {\r\n    logger.error(\r\n      `Global ${isFatal ? 'Fatal' : 'Non-Fatal'} Error`,\r\n      error,\r\n      { isFatal, stack: error.stack }\r\n    );\r\n    \r\n    // Call original handler\r\n    if (originalHandler) {\r\n      originalHandler(error, isFatal);\r\n    }\r\n  });\r\n}\r\n\r\nexport default logger;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\notification.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":40,"column":35,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":40,"endColumn":64},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":76,"column":35,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":76,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Notifications' is assigned a value but never used.","line":97,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":30},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":97,"column":35,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":97,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":101,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Platform, Alert } from 'react-native';\r\n\r\ntype NotificationOptions = {\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  priority?: 'high' | 'normal';\r\n};\r\n\r\n// Check if we're running in Expo Go (which has notification limitations)\r\nconst isExpoGo = __DEV__ && Platform.OS !== 'web';\r\n\r\nexport const showNotification = async (options: NotificationOptions) => {\r\n  const { title, body, icon = '/icon.png', priority = 'normal' } = options;\r\n  \r\n  if (Platform.OS === 'web') {\r\n    // Web notification\r\n    if ('Notification' in window) {\r\n      if (Notification.permission === 'granted') {\r\n        new Notification(title, { body, icon });\r\n      } else if (Notification.permission === 'default') {\r\n        const permission = await Notification.requestPermission();\r\n        if (permission === 'granted') {\r\n          new Notification(title, { body, icon });\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (isExpoGo) {\r\n      // Expo Go fallback: Use Alert for important notifications\r\n      if (priority === 'high') {\r\n        Alert.alert(title, body, [{ text: 'OK' }]);\r\n      } else {\r\n        // For normal priority, just log (to avoid too many alerts)\r\n        console.log(`≡ƒô▒ Notification: ${title} - ${body}`);\r\n      }\r\n    } else {\r\n      // Production build: Use expo-notifications\r\n      try {\r\n        const { Notifications } = require('expo-notifications');\r\n        await Notifications.scheduleNotificationAsync({\r\n          content: {\r\n            title,\r\n            body,\r\n            sound: true,\r\n          },\r\n          trigger: null, // Show immediately\r\n        });\r\n      } catch (error) {\r\n        console.warn('Failed to show notification:', error);\r\n        // Fallback to alert for critical notifications\r\n        if (priority === 'high') {\r\n          Alert.alert(title, body, [{ text: 'OK' }]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const requestNotificationPermission = async (): Promise<boolean> => {\r\n  if (Platform.OS === 'web') {\r\n    if ('Notification' in window) {\r\n      const permission = await Notification.requestPermission();\r\n      return permission === 'granted';\r\n    }\r\n    return false;\r\n  } else {\r\n    if (isExpoGo) {\r\n      // Expo Go: Limited notification support\r\n      console.log('ΓÜá∩╕Å Running in Expo Go - notifications limited to alerts');\r\n      console.log('≡ƒÆí For full notification support, use a development build');\r\n      return true; // We can show alerts\r\n    } else {\r\n      // Production build: Request proper permissions\r\n      try {\r\n        const { Notifications } = require('expo-notifications');\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        return status === 'granted';\r\n      } catch (error) {\r\n        console.warn('Failed to request notification permissions:', error);\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const hasNotificationPermission = (): boolean => {\r\n  if (Platform.OS === 'web') {\r\n    return 'Notification' in window && Notification.permission === 'granted';\r\n  } else {\r\n    if (isExpoGo) {\r\n      // Expo Go: We can show alerts\r\n      return true;\r\n    } else {\r\n      // Production build: Check actual permissions\r\n      try {\r\n        const { Notifications } = require('expo-notifications');\r\n        // This is async, but we need sync for this function\r\n        // In production, you'd want to cache the permission status\r\n        return true; // Assume granted for now\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to show development build recommendation\r\nexport const showDevelopmentBuildRecommendation = () => {\r\n  if (isExpoGo) {\r\n    Alert.alert(\r\n      '≡ƒô▒ Enhanced Features Available',\r\n      'For the best experience with notifications and background features, consider using a development build instead of Expo Go.\\n\\nLearn more at: docs.expo.dev/develop/development-builds/',\r\n      [\r\n        { text: 'Maybe Later', style: 'cancel' },\r\n        { text: 'Learn More', onPress: () => console.log('Open development build docs') }\r\n      ]\r\n    );\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\performanceMarks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\persistence.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[212,215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[212,215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[240,243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[240,243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[275,278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[275,278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[359,362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[359,362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst STORAGE_KEY = 'kidmap.navigation.v1';\r\nconst VERSION = 1;\r\n\r\nexport interface PersistedState {\r\n    version: number;\r\n    favorites: any[];\r\n    recentSearches: any[];\r\n    accessibilitySettings: any;\r\n    photoCheckIns: any[];\r\n    selectedTravelMode: string;\r\n    routeOptions: any;\r\n}\r\n\r\nexport async function loadPersistedState(): Promise<PersistedState | null> {\r\n    try {\r\n        const raw = await AsyncStorage.getItem(STORAGE_KEY);\r\n        if (!raw) return null;\r\n        const parsed = JSON.parse(raw);\r\n        if (!parsed || typeof parsed !== 'object') return null;\r\n        if (parsed.version !== VERSION) return null; // simple migration gate\r\n        return parsed as PersistedState;\r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function savePersistedState(partial: Omit<PersistedState, 'version'>) {\r\n    try {\r\n        const outbound: PersistedState = { version: VERSION, ...partial } as PersistedState;\r\n        await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(outbound));\r\n    } catch {\r\n        // swallow for now; could add error logging later\r\n    }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\regionUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1668,1671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1668,1671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RegionConfig } from \"@/types/region\";\r\n\r\nexport const formatCurrency = (amount: number, currency: string): string => {\r\n  try {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: currency,\r\n    }).format(amount);\r\n  } catch {\r\n    return `${currency} ${amount.toFixed(2)}`;\r\n  }\r\n};\r\n\r\nexport const formatDistance = (meters: number, units: \"metric\" | \"imperial\"): string => {\r\n  if (units === \"imperial\") {\r\n    const feet = meters * 3.28084;\r\n    if (feet < 1000) {\r\n      return `${Math.round(feet)} ft`;\r\n    }\r\n    const miles = feet / 5280;\r\n    return `${miles.toFixed(1)} mi`;\r\n  } else {\r\n    if (meters < 1000) {\r\n      return `${Math.round(meters)} m`;\r\n    }\r\n    const kilometers = meters / 1000;\r\n    return `${kilometers.toFixed(1)} km`;\r\n  }\r\n};\r\n\r\nexport const formatTemperature = (celsius: number, units: \"metric\" | \"imperial\"): string => {\r\n  if (units === \"imperial\") {\r\n    const fahrenheit = (celsius * 9/5) + 32;\r\n    return `${Math.round(fahrenheit)}┬░F`;\r\n  }\r\n  return `${Math.round(celsius)}┬░C`;\r\n};\r\n\r\nexport const getLocalizedTime = (date: Date, timezone: string): string => {\r\n  try {\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      timeZone: timezone,\r\n      hour: 'numeric',\r\n      minute: '2-digit',\r\n      hour12: true,\r\n    }).format(date);\r\n  } catch {\r\n    return date.toLocaleTimeString();\r\n  }\r\n};\r\n\r\nexport const validateRegionConfig = (config: RegionConfig): boolean => {\r\n  const required = ['id', 'name', 'country', 'timezone', 'currency', 'language', 'coordinates', 'transitSystems', 'emergencyNumber'];\r\n  \r\n  return required.every(field => {\r\n    const value = (config as any)[field];\r\n    return value !== undefined && value !== null && value !== '';\r\n  });\r\n};\r\n\r\nexport const generateRegionFromTemplate = (\r\n  name: string,\r\n  country: string,\r\n  coordinates: { latitude: number; longitude: number },\r\n  customizations: Partial<RegionConfig> = {}\r\n): RegionConfig => {\r\n  const baseConfig: RegionConfig = {\r\n    id: name.toLowerCase().replace(/\\s+/g, '-'),\r\n    name,\r\n    country,\r\n    timezone: 'UTC',\r\n    currency: 'USD',\r\n    language: 'en',\r\n    coordinates,\r\n    transitSystems: [\r\n      {\r\n        id: 'local-bus',\r\n        name: 'Local Bus',\r\n        type: 'bus',\r\n        color: '#4285F4',\r\n      }\r\n    ],\r\n    emergencyNumber: '911',\r\n    safetyTips: [\r\n      'Always stay with a trusted adult when using public transportation',\r\n      'Keep your transit card or payment method safe',\r\n      'Be aware of your surroundings',\r\n      'Know your route before you travel',\r\n    ],\r\n    funFacts: [\r\n      `Welcome to ${name}!`,\r\n      'Public transportation helps reduce traffic and pollution.',\r\n      'Always be courteous to other passengers.',\r\n    ],\r\n    popularPlaces: [],\r\n    mapStyle: 'standard',\r\n    ...customizations,\r\n  };\r\n\r\n  return baseConfig;\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\touchTargetAudit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\transitDataUpdater.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[284,287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[284,287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[306,309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[306,309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[325,328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[325,328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4444,4447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4444,4447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRegionStore } from \"@/stores/regionStore\";\r\nimport { RegionConfig } from \"@/types/region\";\r\n\r\nexport type TransitDataUpdateResult = {\r\n  success: boolean;\r\n  regionId: string;\r\n  message: string;\r\n  lastUpdated: Date;\r\n};\r\n\r\nexport type TransitApiResponse = {\r\n  routes?: any[];\r\n  schedules?: any[];\r\n  alerts?: any[];\r\n  lastModified: string;\r\n};\r\n\r\nexport class TransitDataUpdater {\r\n  private static instance: TransitDataUpdater;\r\n  private updateInProgress = new Set<string>();\r\n\r\n  static getInstance(): TransitDataUpdater {\r\n    if (!TransitDataUpdater.instance) {\r\n      TransitDataUpdater.instance = new TransitDataUpdater();\r\n    }\r\n    return TransitDataUpdater.instance;\r\n  }\r\n\r\n  async updateRegionTransitData(regionId: string): Promise<TransitDataUpdateResult> {\r\n    if (this.updateInProgress.has(regionId)) {\r\n      return {\r\n        success: false,\r\n        regionId,\r\n        message: \"Update already in progress for this region\",\r\n        lastUpdated: new Date()\r\n      };\r\n    }\r\n\r\n    this.updateInProgress.add(regionId);\r\n\r\n    try {\r\n      const { availableRegions, updateRegionTransitData } = useRegionStore.getState();\r\n      const region = availableRegions.find(r => r.id === regionId);\r\n\r\n      if (!region) {\r\n        throw new Error(`Region ${regionId} not found`);\r\n      }\r\n\r\n      console.log(`Updating transit data for ${region.name}...`);\r\n\r\n      // Simulate API call to transit system\r\n      const transitData = await this.fetchTransitData(region);\r\n      \r\n      // Update the region with new transit data\r\n      const updatedRegion: Partial<RegionConfig> = {\r\n        ...region,\r\n        transitSystems: this.processTransitSystems(transitData, region),\r\n        // Add timestamp for last update\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n\r\n      updateRegionTransitData(regionId, updatedRegion);\r\n\r\n      return {\r\n        success: true,\r\n        regionId,\r\n        message: `Successfully updated transit data for ${region.name}`,\r\n        lastUpdated: new Date()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(`Failed to update transit data for ${regionId}:`, error);\r\n      return {\r\n        success: false,\r\n        regionId,\r\n        message: `Failed to update: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        lastUpdated: new Date()\r\n      };\r\n    } finally {\r\n      this.updateInProgress.delete(regionId);\r\n    }\r\n  }\r\n\r\n  async updateAllRegions(): Promise<TransitDataUpdateResult[]> {\r\n    const { availableRegions } = useRegionStore.getState();\r\n    const results: TransitDataUpdateResult[] = [];\r\n\r\n    // Update regions in batches to avoid overwhelming APIs\r\n    const batchSize = 3;\r\n    for (let i = 0; i < availableRegions.length; i += batchSize) {\r\n      const batch = availableRegions.slice(i, i + batchSize);\r\n      const batchPromises = batch.map(region => this.updateRegionTransitData(region.id));\r\n      const batchResults = await Promise.all(batchPromises);\r\n      results.push(...batchResults);\r\n\r\n      // Add delay between batches\r\n      if (i + batchSize < availableRegions.length) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  private async fetchTransitData(region: RegionConfig): Promise<TransitApiResponse> {\r\n    // In a real app, this would make actual API calls to the transit system\r\n    // For now, we'll simulate the API response\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\r\n\r\n    // Simulate different API responses based on region\r\n    const mockResponse: TransitApiResponse = {\r\n      routes: this.generateMockRoutes(region),\r\n      schedules: this.generateMockSchedules(region),\r\n      alerts: this.generateMockAlerts(region),\r\n      lastModified: new Date().toISOString()\r\n    };\r\n\r\n    return mockResponse;\r\n  }\r\n\r\n  private processTransitSystems(transitData: TransitApiResponse, region: RegionConfig) {\r\n    // Process the API response and update transit systems\r\n    // In a real app, this would parse the actual API response format\r\n    \r\n    return region.transitSystems.map(system => ({\r\n      ...system,\r\n      // Add real-time status\r\n      status: Math.random() > 0.1 ? 'operational' as const : 'delayed' as const,\r\n      lastUpdated: new Date().toISOString(),\r\n      // Add route updates if available\r\n      routes: transitData.routes ? \r\n        transitData.routes.filter((route: any) => route.systemId === system.id) :\r\n        system.routes\r\n    }));\r\n  }\r\n\r\n  private generateMockRoutes(region: RegionConfig) {\r\n    // Generate mock route data\r\n    return region.transitSystems.flatMap(system => \r\n      (system.routes || []).map(route => ({\r\n        id: `${system.id}-${route}`,\r\n        name: route,\r\n        systemId: system.id,\r\n        status: Math.random() > 0.1 ? 'on-time' : 'delayed',\r\n        nextArrival: Math.floor(Math.random() * 15) + 1 // 1-15 minutes\r\n      }))\r\n    );\r\n  }\r\n\r\n  private generateMockSchedules(region: RegionConfig) {\r\n    // Generate mock schedule data\r\n    return [{\r\n      systemId: region.transitSystems[0]?.id,\r\n      schedules: Array.from({ length: 10 }, (_, i) => ({\r\n        time: new Date(Date.now() + (i + 1) * 5 * 60 * 1000).toISOString(),\r\n        route: region.transitSystems[0]?.routes?.[0] || 'Route 1',\r\n        destination: 'Downtown'\r\n      }))\r\n    }];\r\n  }\r\n\r\n  private generateMockAlerts(region: RegionConfig) {\r\n    // Generate mock alert data\r\n    const alerts = [];\r\n    \r\n    if (Math.random() > 0.7) {\r\n      alerts.push({\r\n        id: `alert-${Date.now()}`,\r\n        type: 'delay',\r\n        message: `Minor delays on ${region.transitSystems[0]?.name} due to signal problems`,\r\n        severity: 'low',\r\n        affectedRoutes: region.transitSystems[0]?.routes?.slice(0, 2) || []\r\n      });\r\n    }\r\n\r\n    return alerts;\r\n  }\r\n\r\n  isUpdateInProgress(regionId: string): boolean {\r\n    return this.updateInProgress.has(regionId);\r\n  }\r\n\r\n  getUpdateStatus(): { [regionId: string]: boolean } {\r\n    const status: { [regionId: string]: boolean } = {};\r\n    this.updateInProgress.forEach(regionId => {\r\n      status[regionId] = true;\r\n    });\r\n    return status;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const transitDataUpdater = TransitDataUpdater.getInstance();\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\utils\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Admin\\StudioProjects\\KidMap-1\\webpack.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":38,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":69},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":3,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const createExpoWebpackConfigAsync = require('@expo/webpack-config');\r\n\r\nmodule.exports = async function (env, argv) {\r\n    const config = await createExpoWebpackConfigAsync(env, argv);\r\n\r\n    // Customize the config before returning it.\r\n    config.resolve.fallback = {\r\n        ...config.resolve.fallback,\r\n        \"crypto\": false,\r\n        \"stream\": false,\r\n        \"assert\": false,\r\n        \"http\": false,\r\n        \"https\": false,\r\n        \"os\": false,\r\n        \"url\": false,\r\n        \"zlib\": false,\r\n    };\r\n\r\n    // Fix import.meta issues\r\n    config.module.rules.push({\r\n        test: /\\.m?js$/,\r\n        resolve: {\r\n            fullySpecified: false,\r\n        },\r\n    });\r\n\r\n    return config;\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
